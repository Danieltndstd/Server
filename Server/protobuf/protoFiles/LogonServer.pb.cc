// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogonServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LogonServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace LogonServer {

void protobuf_ShutdownFile_LogonServer_2eproto() {
  delete PROTO_CESHI::default_instance_;
  delete PROTO_RegisterAccounts::default_instance_;
  delete PROTO_LogonAccountsBCode::default_instance_;
  delete PROTO_RegisterAccountsBCode::default_instance_;
  delete PROTO_LogonVisitor::default_instance_;
  delete PROTO_RegisterMobile::default_instance_;
  delete PROTO_LogonSuccessBCode::default_instance_;
  delete PROTO_LogonFinish::default_instance_;
  delete PROTO_OperateResult::default_instance_;
  delete PROTO_ModifyLogonPass::default_instance_;
  delete PROTO_ModifyNickName::default_instance_;
  delete PROTO_ModifyResult::default_instance_;
  delete PROTO_UserSaveScore::default_instance_;
  delete PROTO_UserTakeScore::default_instance_;
  delete PROTO_QueryInsureInfo::default_instance_;
  delete PROTO_UserInsureSuccess::default_instance_;
  delete PROTO_UserInsureFailure::default_instance_;
  delete PROTO_GetDialInfo::default_instance_;
  delete PROTO_GetDailInfoResult::default_instance_;
  delete PROTO_RotateDailAward::default_instance_;
  delete PROTO_RotateDailAwardInfo::default_instance_;
  delete PROTO_GetUserSignIn::default_instance_;
  delete PROTO_SetUserSignIn::default_instance_;
  delete PROTO_GetSignInResult::default_instance_;
  delete PROTO_ChickBindBank::default_instance_;
  delete PROTO_GP_BindBankCard::default_instance_;
  delete PROTO_ChickBindZFB::default_instance_;
  delete PROTO_BindZFB::default_instance_;
  delete PROTO_BindBankInfo::default_instance_;
  delete PROTO_BindZFBInfo::default_instance_;
  delete PROTO_RequestMail::default_instance_;
  delete PROTO_ReadDeleteMail::default_instance_;
  delete ProtoRequestMail::default_instance_;
  delete PROTO_RequestMailToal::default_instance_;
  delete PROTO_ReadDeleteMailToal::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_LogonServer_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_LogonServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  PROTO_CESHI::default_instance_ = new PROTO_CESHI();
  PROTO_RegisterAccounts::default_instance_ = new PROTO_RegisterAccounts();
  PROTO_LogonAccountsBCode::default_instance_ = new PROTO_LogonAccountsBCode();
  PROTO_RegisterAccountsBCode::default_instance_ = new PROTO_RegisterAccountsBCode();
  PROTO_LogonVisitor::default_instance_ = new PROTO_LogonVisitor();
  PROTO_RegisterMobile::default_instance_ = new PROTO_RegisterMobile();
  PROTO_LogonSuccessBCode::default_instance_ = new PROTO_LogonSuccessBCode();
  PROTO_LogonFinish::default_instance_ = new PROTO_LogonFinish();
  PROTO_OperateResult::default_instance_ = new PROTO_OperateResult();
  PROTO_ModifyLogonPass::default_instance_ = new PROTO_ModifyLogonPass();
  PROTO_ModifyNickName::default_instance_ = new PROTO_ModifyNickName();
  PROTO_ModifyResult::default_instance_ = new PROTO_ModifyResult();
  PROTO_UserSaveScore::default_instance_ = new PROTO_UserSaveScore();
  PROTO_UserTakeScore::default_instance_ = new PROTO_UserTakeScore();
  PROTO_QueryInsureInfo::default_instance_ = new PROTO_QueryInsureInfo();
  PROTO_UserInsureSuccess::default_instance_ = new PROTO_UserInsureSuccess();
  PROTO_UserInsureFailure::default_instance_ = new PROTO_UserInsureFailure();
  PROTO_GetDialInfo::default_instance_ = new PROTO_GetDialInfo();
  PROTO_GetDailInfoResult::default_instance_ = new PROTO_GetDailInfoResult();
  PROTO_RotateDailAward::default_instance_ = new PROTO_RotateDailAward();
  PROTO_RotateDailAwardInfo::default_instance_ = new PROTO_RotateDailAwardInfo();
  PROTO_GetUserSignIn::default_instance_ = new PROTO_GetUserSignIn();
  PROTO_SetUserSignIn::default_instance_ = new PROTO_SetUserSignIn();
  PROTO_GetSignInResult::default_instance_ = new PROTO_GetSignInResult();
  PROTO_ChickBindBank::default_instance_ = new PROTO_ChickBindBank();
  PROTO_GP_BindBankCard::default_instance_ = new PROTO_GP_BindBankCard();
  PROTO_ChickBindZFB::default_instance_ = new PROTO_ChickBindZFB();
  PROTO_BindZFB::default_instance_ = new PROTO_BindZFB();
  PROTO_BindBankInfo::default_instance_ = new PROTO_BindBankInfo();
  PROTO_BindZFBInfo::default_instance_ = new PROTO_BindZFBInfo();
  PROTO_RequestMail::default_instance_ = new PROTO_RequestMail();
  PROTO_ReadDeleteMail::default_instance_ = new PROTO_ReadDeleteMail();
  ProtoRequestMail::default_instance_ = new ProtoRequestMail();
  PROTO_RequestMailToal::default_instance_ = new PROTO_RequestMailToal();
  PROTO_ReadDeleteMailToal::default_instance_ = new PROTO_ReadDeleteMailToal();
  PROTO_CESHI::default_instance_->InitAsDefaultInstance();
  PROTO_RegisterAccounts::default_instance_->InitAsDefaultInstance();
  PROTO_LogonAccountsBCode::default_instance_->InitAsDefaultInstance();
  PROTO_RegisterAccountsBCode::default_instance_->InitAsDefaultInstance();
  PROTO_LogonVisitor::default_instance_->InitAsDefaultInstance();
  PROTO_RegisterMobile::default_instance_->InitAsDefaultInstance();
  PROTO_LogonSuccessBCode::default_instance_->InitAsDefaultInstance();
  PROTO_LogonFinish::default_instance_->InitAsDefaultInstance();
  PROTO_OperateResult::default_instance_->InitAsDefaultInstance();
  PROTO_ModifyLogonPass::default_instance_->InitAsDefaultInstance();
  PROTO_ModifyNickName::default_instance_->InitAsDefaultInstance();
  PROTO_ModifyResult::default_instance_->InitAsDefaultInstance();
  PROTO_UserSaveScore::default_instance_->InitAsDefaultInstance();
  PROTO_UserTakeScore::default_instance_->InitAsDefaultInstance();
  PROTO_QueryInsureInfo::default_instance_->InitAsDefaultInstance();
  PROTO_UserInsureSuccess::default_instance_->InitAsDefaultInstance();
  PROTO_UserInsureFailure::default_instance_->InitAsDefaultInstance();
  PROTO_GetDialInfo::default_instance_->InitAsDefaultInstance();
  PROTO_GetDailInfoResult::default_instance_->InitAsDefaultInstance();
  PROTO_RotateDailAward::default_instance_->InitAsDefaultInstance();
  PROTO_RotateDailAwardInfo::default_instance_->InitAsDefaultInstance();
  PROTO_GetUserSignIn::default_instance_->InitAsDefaultInstance();
  PROTO_SetUserSignIn::default_instance_->InitAsDefaultInstance();
  PROTO_GetSignInResult::default_instance_->InitAsDefaultInstance();
  PROTO_ChickBindBank::default_instance_->InitAsDefaultInstance();
  PROTO_GP_BindBankCard::default_instance_->InitAsDefaultInstance();
  PROTO_ChickBindZFB::default_instance_->InitAsDefaultInstance();
  PROTO_BindZFB::default_instance_->InitAsDefaultInstance();
  PROTO_BindBankInfo::default_instance_->InitAsDefaultInstance();
  PROTO_BindZFBInfo::default_instance_->InitAsDefaultInstance();
  PROTO_RequestMail::default_instance_->InitAsDefaultInstance();
  PROTO_ReadDeleteMail::default_instance_->InitAsDefaultInstance();
  ProtoRequestMail::default_instance_->InitAsDefaultInstance();
  PROTO_RequestMailToal::default_instance_->InitAsDefaultInstance();
  PROTO_ReadDeleteMailToal::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LogonServer_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_LogonServer_2eproto_once_);
void protobuf_AddDesc_LogonServer_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_LogonServer_2eproto_once_,
                 &protobuf_AddDesc_LogonServer_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LogonServer_2eproto {
  StaticDescriptorInitializer_LogonServer_2eproto() {
    protobuf_AddDesc_LogonServer_2eproto();
  }
} static_descriptor_initializer_LogonServer_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int PROTO_CESHI::kBUserIDFieldNumber;
const int PROTO_CESHI::kCbPlayStatusFieldNumber;
const int PROTO_CESHI::kCbMaxCallFieldNumber;
#endif  // !_MSC_VER

PROTO_CESHI::PROTO_CESHI()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_CESHI)
}

void PROTO_CESHI::InitAsDefaultInstance() {
}

PROTO_CESHI::PROTO_CESHI(const PROTO_CESHI& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_CESHI)
}

void PROTO_CESHI::SharedCtor() {
  _cached_size_ = 0;
  buserid_ = GOOGLE_LONGLONG(0);
  cbplaystatus_ = 0;
  cbmaxcall_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_CESHI::~PROTO_CESHI() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_CESHI)
  SharedDtor();
}

void PROTO_CESHI::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_CESHI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_CESHI& PROTO_CESHI::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_CESHI* PROTO_CESHI::default_instance_ = NULL;

PROTO_CESHI* PROTO_CESHI::New() const {
  return new PROTO_CESHI;
}

void PROTO_CESHI::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PROTO_CESHI*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buserid_, cbmaxcall_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_CESHI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_CESHI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 bUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buserid_)));
          set_has_buserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cbPlayStatus;
        break;
      }

      // required int32 cbPlayStatus = 2;
      case 2: {
        if (tag == 16) {
         parse_cbPlayStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbplaystatus_)));
          set_has_cbplaystatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cbMaxCall;
        break;
      }

      // required int32 cbMaxCall = 3;
      case 3: {
        if (tag == 24) {
         parse_cbMaxCall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbmaxcall_)));
          set_has_cbmaxcall();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_CESHI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_CESHI)
  return false;
#undef DO_
}

void PROTO_CESHI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_CESHI)
  // required int64 bUserID = 1;
  if (has_buserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->buserid(), output);
  }

  // required int32 cbPlayStatus = 2;
  if (has_cbplaystatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cbplaystatus(), output);
  }

  // required int32 cbMaxCall = 3;
  if (has_cbmaxcall()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cbmaxcall(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_CESHI)
}

int PROTO_CESHI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 bUserID = 1;
    if (has_buserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buserid());
    }

    // required int32 cbPlayStatus = 2;
    if (has_cbplaystatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbplaystatus());
    }

    // required int32 cbMaxCall = 3;
    if (has_cbmaxcall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbmaxcall());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_CESHI::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_CESHI*>(&from));
}

void PROTO_CESHI::MergeFrom(const PROTO_CESHI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buserid()) {
      set_buserid(from.buserid());
    }
    if (from.has_cbplaystatus()) {
      set_cbplaystatus(from.cbplaystatus());
    }
    if (from.has_cbmaxcall()) {
      set_cbmaxcall(from.cbmaxcall());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_CESHI::CopyFrom(const PROTO_CESHI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_CESHI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PROTO_CESHI::Swap(PROTO_CESHI* other) {
  if (other != this) {
    std::swap(buserid_, other->buserid_);
    std::swap(cbplaystatus_, other->cbplaystatus_);
    std::swap(cbmaxcall_, other->cbmaxcall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_CESHI::GetTypeName() const {
  return "LogonServer.PROTO_CESHI";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_RegisterAccounts::kCbGenderFieldNumber;
const int PROTO_RegisterAccounts::kSzAccountsFieldNumber;
const int PROTO_RegisterAccounts::kSzNickNameFieldNumber;
const int PROTO_RegisterAccounts::kSzLogonPassFieldNumber;
#endif  // !_MSC_VER

PROTO_RegisterAccounts::PROTO_RegisterAccounts()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_RegisterAccounts)
}

void PROTO_RegisterAccounts::InitAsDefaultInstance() {
}

PROTO_RegisterAccounts::PROTO_RegisterAccounts(const PROTO_RegisterAccounts& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_RegisterAccounts)
}

void PROTO_RegisterAccounts::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cbgender_ = GOOGLE_LONGLONG(0);
  szaccounts_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szlogonpass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_RegisterAccounts::~PROTO_RegisterAccounts() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_RegisterAccounts)
  SharedDtor();
}

void PROTO_RegisterAccounts::SharedDtor() {
  if (szaccounts_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szaccounts_;
  }
  if (sznickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sznickname_;
  }
  if (szlogonpass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szlogonpass_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_RegisterAccounts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_RegisterAccounts& PROTO_RegisterAccounts::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_RegisterAccounts* PROTO_RegisterAccounts::default_instance_ = NULL;

PROTO_RegisterAccounts* PROTO_RegisterAccounts::New() const {
  return new PROTO_RegisterAccounts;
}

void PROTO_RegisterAccounts::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cbgender_ = GOOGLE_LONGLONG(0);
    if (has_szaccounts()) {
      if (szaccounts_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szaccounts_->clear();
      }
    }
    if (has_sznickname()) {
      if (sznickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sznickname_->clear();
      }
    }
    if (has_szlogonpass()) {
      if (szlogonpass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szlogonpass_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_RegisterAccounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_RegisterAccounts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 cbGender = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cbgender_)));
          set_has_cbgender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szAccounts;
        break;
      }

      // required string szAccounts = 2;
      case 2: {
        if (tag == 18) {
         parse_szAccounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szaccounts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_szNickName;
        break;
      }

      // required string szNickName = 3;
      case 3: {
        if (tag == 26) {
         parse_szNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sznickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_szLogonPass;
        break;
      }

      // required string szLogonPass = 4;
      case 4: {
        if (tag == 34) {
         parse_szLogonPass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szlogonpass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_RegisterAccounts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_RegisterAccounts)
  return false;
#undef DO_
}

void PROTO_RegisterAccounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_RegisterAccounts)
  // required int64 cbGender = 1;
  if (has_cbgender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cbgender(), output);
  }

  // required string szAccounts = 2;
  if (has_szaccounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szaccounts(), output);
  }

  // required string szNickName = 3;
  if (has_sznickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sznickname(), output);
  }

  // required string szLogonPass = 4;
  if (has_szlogonpass()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->szlogonpass(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_RegisterAccounts)
}

int PROTO_RegisterAccounts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 cbGender = 1;
    if (has_cbgender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cbgender());
    }

    // required string szAccounts = 2;
    if (has_szaccounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szaccounts());
    }

    // required string szNickName = 3;
    if (has_sznickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sznickname());
    }

    // required string szLogonPass = 4;
    if (has_szlogonpass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szlogonpass());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_RegisterAccounts::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_RegisterAccounts*>(&from));
}

void PROTO_RegisterAccounts::MergeFrom(const PROTO_RegisterAccounts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cbgender()) {
      set_cbgender(from.cbgender());
    }
    if (from.has_szaccounts()) {
      set_szaccounts(from.szaccounts());
    }
    if (from.has_sznickname()) {
      set_sznickname(from.sznickname());
    }
    if (from.has_szlogonpass()) {
      set_szlogonpass(from.szlogonpass());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_RegisterAccounts::CopyFrom(const PROTO_RegisterAccounts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_RegisterAccounts::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PROTO_RegisterAccounts::Swap(PROTO_RegisterAccounts* other) {
  if (other != this) {
    std::swap(cbgender_, other->cbgender_);
    std::swap(szaccounts_, other->szaccounts_);
    std::swap(sznickname_, other->sznickname_);
    std::swap(szlogonpass_, other->szlogonpass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_RegisterAccounts::GetTypeName() const {
  return "LogonServer.PROTO_RegisterAccounts";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_LogonAccountsBCode::kDwPlazaVersionFieldNumber;
const int PROTO_LogonAccountsBCode::kCbDeviceTypeFieldNumber;
const int PROTO_LogonAccountsBCode::kSzPasswordFieldNumber;
const int PROTO_LogonAccountsBCode::kSzAccountsFieldNumber;
const int PROTO_LogonAccountsBCode::kSzMachineIDFieldNumber;
const int PROTO_LogonAccountsBCode::kSzMobilePhoneFieldNumber;
const int PROTO_LogonAccountsBCode::kDwInviteIDFieldNumber;
const int PROTO_LogonAccountsBCode::kDwSortIDFieldNumber;
const int PROTO_LogonAccountsBCode::kDwLogonTypeFieldNumber;
#endif  // !_MSC_VER

PROTO_LogonAccountsBCode::PROTO_LogonAccountsBCode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_LogonAccountsBCode)
}

void PROTO_LogonAccountsBCode::InitAsDefaultInstance() {
}

PROTO_LogonAccountsBCode::PROTO_LogonAccountsBCode(const PROTO_LogonAccountsBCode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_LogonAccountsBCode)
}

void PROTO_LogonAccountsBCode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dwplazaversion_ = GOOGLE_LONGLONG(0);
  cbdevicetype_ = 0;
  szpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szaccounts_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szmobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dwinviteid_ = GOOGLE_LONGLONG(0);
  dwsortid_ = GOOGLE_LONGLONG(0);
  dwlogontype_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_LogonAccountsBCode::~PROTO_LogonAccountsBCode() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_LogonAccountsBCode)
  SharedDtor();
}

void PROTO_LogonAccountsBCode::SharedDtor() {
  if (szpassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szpassword_;
  }
  if (szaccounts_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szaccounts_;
  }
  if (szmachineid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szmachineid_;
  }
  if (szmobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szmobilephone_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_LogonAccountsBCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_LogonAccountsBCode& PROTO_LogonAccountsBCode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_LogonAccountsBCode* PROTO_LogonAccountsBCode::default_instance_ = NULL;

PROTO_LogonAccountsBCode* PROTO_LogonAccountsBCode::New() const {
  return new PROTO_LogonAccountsBCode;
}

void PROTO_LogonAccountsBCode::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PROTO_LogonAccountsBCode*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(dwinviteid_, dwsortid_);
    dwplazaversion_ = GOOGLE_LONGLONG(0);
    cbdevicetype_ = 0;
    if (has_szpassword()) {
      if (szpassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szpassword_->clear();
      }
    }
    if (has_szaccounts()) {
      if (szaccounts_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szaccounts_->clear();
      }
    }
    if (has_szmachineid()) {
      if (szmachineid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szmachineid_->clear();
      }
    }
    if (has_szmobilephone()) {
      if (szmobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szmobilephone_->clear();
      }
    }
  }
  dwlogontype_ = GOOGLE_LONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_LogonAccountsBCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_LogonAccountsBCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwPlazaVersion = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwplazaversion_)));
          set_has_dwplazaversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cbDeviceType;
        break;
      }

      // required int32 cbDeviceType = 2;
      case 2: {
        if (tag == 16) {
         parse_cbDeviceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbdevicetype_)));
          set_has_cbdevicetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_szPassword;
        break;
      }

      // required string szPassword = 3;
      case 3: {
        if (tag == 26) {
         parse_szPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szpassword()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_szAccounts;
        break;
      }

      // required string szAccounts = 4;
      case 4: {
        if (tag == 34) {
         parse_szAccounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szaccounts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_szMachineID;
        break;
      }

      // required string szMachineID = 5;
      case 5: {
        if (tag == 42) {
         parse_szMachineID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szmachineid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_szMobilePhone;
        break;
      }

      // required string szMobilePhone = 6;
      case 6: {
        if (tag == 50) {
         parse_szMobilePhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szmobilephone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dwInviteID;
        break;
      }

      // required int64 dwInviteID = 7;
      case 7: {
        if (tag == 56) {
         parse_dwInviteID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwinviteid_)));
          set_has_dwinviteid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dwSortID;
        break;
      }

      // required int64 dwSortID = 8;
      case 8: {
        if (tag == 64) {
         parse_dwSortID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwsortid_)));
          set_has_dwsortid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_dwLogonType;
        break;
      }

      // required int64 dwLogonType = 9;
      case 9: {
        if (tag == 72) {
         parse_dwLogonType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwlogontype_)));
          set_has_dwlogontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_LogonAccountsBCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_LogonAccountsBCode)
  return false;
#undef DO_
}

void PROTO_LogonAccountsBCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_LogonAccountsBCode)
  // required int64 dwPlazaVersion = 1;
  if (has_dwplazaversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwplazaversion(), output);
  }

  // required int32 cbDeviceType = 2;
  if (has_cbdevicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cbdevicetype(), output);
  }

  // required string szPassword = 3;
  if (has_szpassword()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szpassword(), output);
  }

  // required string szAccounts = 4;
  if (has_szaccounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->szaccounts(), output);
  }

  // required string szMachineID = 5;
  if (has_szmachineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->szmachineid(), output);
  }

  // required string szMobilePhone = 6;
  if (has_szmobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->szmobilephone(), output);
  }

  // required int64 dwInviteID = 7;
  if (has_dwinviteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->dwinviteid(), output);
  }

  // required int64 dwSortID = 8;
  if (has_dwsortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->dwsortid(), output);
  }

  // required int64 dwLogonType = 9;
  if (has_dwlogontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->dwlogontype(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_LogonAccountsBCode)
}

int PROTO_LogonAccountsBCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwPlazaVersion = 1;
    if (has_dwplazaversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwplazaversion());
    }

    // required int32 cbDeviceType = 2;
    if (has_cbdevicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbdevicetype());
    }

    // required string szPassword = 3;
    if (has_szpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szpassword());
    }

    // required string szAccounts = 4;
    if (has_szaccounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szaccounts());
    }

    // required string szMachineID = 5;
    if (has_szmachineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szmachineid());
    }

    // required string szMobilePhone = 6;
    if (has_szmobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szmobilephone());
    }

    // required int64 dwInviteID = 7;
    if (has_dwinviteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwinviteid());
    }

    // required int64 dwSortID = 8;
    if (has_dwsortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwsortid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 dwLogonType = 9;
    if (has_dwlogontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwlogontype());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_LogonAccountsBCode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_LogonAccountsBCode*>(&from));
}

void PROTO_LogonAccountsBCode::MergeFrom(const PROTO_LogonAccountsBCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwplazaversion()) {
      set_dwplazaversion(from.dwplazaversion());
    }
    if (from.has_cbdevicetype()) {
      set_cbdevicetype(from.cbdevicetype());
    }
    if (from.has_szpassword()) {
      set_szpassword(from.szpassword());
    }
    if (from.has_szaccounts()) {
      set_szaccounts(from.szaccounts());
    }
    if (from.has_szmachineid()) {
      set_szmachineid(from.szmachineid());
    }
    if (from.has_szmobilephone()) {
      set_szmobilephone(from.szmobilephone());
    }
    if (from.has_dwinviteid()) {
      set_dwinviteid(from.dwinviteid());
    }
    if (from.has_dwsortid()) {
      set_dwsortid(from.dwsortid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dwlogontype()) {
      set_dwlogontype(from.dwlogontype());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_LogonAccountsBCode::CopyFrom(const PROTO_LogonAccountsBCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_LogonAccountsBCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void PROTO_LogonAccountsBCode::Swap(PROTO_LogonAccountsBCode* other) {
  if (other != this) {
    std::swap(dwplazaversion_, other->dwplazaversion_);
    std::swap(cbdevicetype_, other->cbdevicetype_);
    std::swap(szpassword_, other->szpassword_);
    std::swap(szaccounts_, other->szaccounts_);
    std::swap(szmachineid_, other->szmachineid_);
    std::swap(szmobilephone_, other->szmobilephone_);
    std::swap(dwinviteid_, other->dwinviteid_);
    std::swap(dwsortid_, other->dwsortid_);
    std::swap(dwlogontype_, other->dwlogontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_LogonAccountsBCode::GetTypeName() const {
  return "LogonServer.PROTO_LogonAccountsBCode";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_RegisterAccountsBCode::kCbDeviceTypeFieldNumber;
const int PROTO_RegisterAccountsBCode::kSzLogonPassFieldNumber;
const int PROTO_RegisterAccountsBCode::kSzInsurePassFieldNumber;
const int PROTO_RegisterAccountsBCode::kWFaceIDFieldNumber;
const int PROTO_RegisterAccountsBCode::kCbGenderFieldNumber;
const int PROTO_RegisterAccountsBCode::kSzAccountsFieldNumber;
const int PROTO_RegisterAccountsBCode::kSzNickNameFieldNumber;
const int PROTO_RegisterAccountsBCode::kSzMachineIDFieldNumber;
const int PROTO_RegisterAccountsBCode::kSzMobilePhoneFieldNumber;
const int PROTO_RegisterAccountsBCode::kDwSpreaderIDFieldNumber;
#endif  // !_MSC_VER

PROTO_RegisterAccountsBCode::PROTO_RegisterAccountsBCode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_RegisterAccountsBCode)
}

void PROTO_RegisterAccountsBCode::InitAsDefaultInstance() {
}

PROTO_RegisterAccountsBCode::PROTO_RegisterAccountsBCode(const PROTO_RegisterAccountsBCode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_RegisterAccountsBCode)
}

void PROTO_RegisterAccountsBCode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cbdevicetype_ = 0;
  szlogonpass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szinsurepass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wfaceid_ = GOOGLE_LONGLONG(0);
  cbgender_ = 0;
  szaccounts_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szmobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dwspreaderid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_RegisterAccountsBCode::~PROTO_RegisterAccountsBCode() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_RegisterAccountsBCode)
  SharedDtor();
}

void PROTO_RegisterAccountsBCode::SharedDtor() {
  if (szlogonpass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szlogonpass_;
  }
  if (szinsurepass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szinsurepass_;
  }
  if (szaccounts_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szaccounts_;
  }
  if (sznickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sznickname_;
  }
  if (szmachineid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szmachineid_;
  }
  if (szmobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szmobilephone_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_RegisterAccountsBCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_RegisterAccountsBCode& PROTO_RegisterAccountsBCode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_RegisterAccountsBCode* PROTO_RegisterAccountsBCode::default_instance_ = NULL;

PROTO_RegisterAccountsBCode* PROTO_RegisterAccountsBCode::New() const {
  return new PROTO_RegisterAccountsBCode;
}

void PROTO_RegisterAccountsBCode::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PROTO_RegisterAccountsBCode*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cbdevicetype_, wfaceid_);
    if (has_szlogonpass()) {
      if (szlogonpass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szlogonpass_->clear();
      }
    }
    if (has_szinsurepass()) {
      if (szinsurepass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szinsurepass_->clear();
      }
    }
    if (has_szaccounts()) {
      if (szaccounts_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szaccounts_->clear();
      }
    }
    if (has_sznickname()) {
      if (sznickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sznickname_->clear();
      }
    }
    if (has_szmachineid()) {
      if (szmachineid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szmachineid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_szmobilephone()) {
      if (szmobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szmobilephone_->clear();
      }
    }
    dwspreaderid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_RegisterAccountsBCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_RegisterAccountsBCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cbDeviceType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbdevicetype_)));
          set_has_cbdevicetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szLogonPass;
        break;
      }

      // required string szLogonPass = 2;
      case 2: {
        if (tag == 18) {
         parse_szLogonPass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szlogonpass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_szInsurePass;
        break;
      }

      // required string szInsurePass = 3;
      case 3: {
        if (tag == 26) {
         parse_szInsurePass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szinsurepass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_wFaceID;
        break;
      }

      // required int64 wFaceID = 4;
      case 4: {
        if (tag == 32) {
         parse_wFaceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wfaceid_)));
          set_has_wfaceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cbGender;
        break;
      }

      // required int32 cbGender = 5;
      case 5: {
        if (tag == 40) {
         parse_cbGender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbgender_)));
          set_has_cbgender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_szAccounts;
        break;
      }

      // required string szAccounts = 6;
      case 6: {
        if (tag == 50) {
         parse_szAccounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szaccounts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_szNickName;
        break;
      }

      // required string szNickName = 7;
      case 7: {
        if (tag == 58) {
         parse_szNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sznickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_szMachineID;
        break;
      }

      // required string szMachineID = 8;
      case 8: {
        if (tag == 66) {
         parse_szMachineID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szmachineid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_szMobilePhone;
        break;
      }

      // required string szMobilePhone = 9;
      case 9: {
        if (tag == 74) {
         parse_szMobilePhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szmobilephone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_dwSpreaderID;
        break;
      }

      // required int64 dwSpreaderID = 10;
      case 10: {
        if (tag == 80) {
         parse_dwSpreaderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwspreaderid_)));
          set_has_dwspreaderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_RegisterAccountsBCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_RegisterAccountsBCode)
  return false;
#undef DO_
}

void PROTO_RegisterAccountsBCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_RegisterAccountsBCode)
  // required int32 cbDeviceType = 1;
  if (has_cbdevicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cbdevicetype(), output);
  }

  // required string szLogonPass = 2;
  if (has_szlogonpass()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szlogonpass(), output);
  }

  // required string szInsurePass = 3;
  if (has_szinsurepass()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szinsurepass(), output);
  }

  // required int64 wFaceID = 4;
  if (has_wfaceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->wfaceid(), output);
  }

  // required int32 cbGender = 5;
  if (has_cbgender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cbgender(), output);
  }

  // required string szAccounts = 6;
  if (has_szaccounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->szaccounts(), output);
  }

  // required string szNickName = 7;
  if (has_sznickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sznickname(), output);
  }

  // required string szMachineID = 8;
  if (has_szmachineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->szmachineid(), output);
  }

  // required string szMobilePhone = 9;
  if (has_szmobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->szmobilephone(), output);
  }

  // required int64 dwSpreaderID = 10;
  if (has_dwspreaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->dwspreaderid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_RegisterAccountsBCode)
}

int PROTO_RegisterAccountsBCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cbDeviceType = 1;
    if (has_cbdevicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbdevicetype());
    }

    // required string szLogonPass = 2;
    if (has_szlogonpass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szlogonpass());
    }

    // required string szInsurePass = 3;
    if (has_szinsurepass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szinsurepass());
    }

    // required int64 wFaceID = 4;
    if (has_wfaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wfaceid());
    }

    // required int32 cbGender = 5;
    if (has_cbgender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbgender());
    }

    // required string szAccounts = 6;
    if (has_szaccounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szaccounts());
    }

    // required string szNickName = 7;
    if (has_sznickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sznickname());
    }

    // required string szMachineID = 8;
    if (has_szmachineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szmachineid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string szMobilePhone = 9;
    if (has_szmobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szmobilephone());
    }

    // required int64 dwSpreaderID = 10;
    if (has_dwspreaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwspreaderid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_RegisterAccountsBCode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_RegisterAccountsBCode*>(&from));
}

void PROTO_RegisterAccountsBCode::MergeFrom(const PROTO_RegisterAccountsBCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cbdevicetype()) {
      set_cbdevicetype(from.cbdevicetype());
    }
    if (from.has_szlogonpass()) {
      set_szlogonpass(from.szlogonpass());
    }
    if (from.has_szinsurepass()) {
      set_szinsurepass(from.szinsurepass());
    }
    if (from.has_wfaceid()) {
      set_wfaceid(from.wfaceid());
    }
    if (from.has_cbgender()) {
      set_cbgender(from.cbgender());
    }
    if (from.has_szaccounts()) {
      set_szaccounts(from.szaccounts());
    }
    if (from.has_sznickname()) {
      set_sznickname(from.sznickname());
    }
    if (from.has_szmachineid()) {
      set_szmachineid(from.szmachineid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_szmobilephone()) {
      set_szmobilephone(from.szmobilephone());
    }
    if (from.has_dwspreaderid()) {
      set_dwspreaderid(from.dwspreaderid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_RegisterAccountsBCode::CopyFrom(const PROTO_RegisterAccountsBCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_RegisterAccountsBCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void PROTO_RegisterAccountsBCode::Swap(PROTO_RegisterAccountsBCode* other) {
  if (other != this) {
    std::swap(cbdevicetype_, other->cbdevicetype_);
    std::swap(szlogonpass_, other->szlogonpass_);
    std::swap(szinsurepass_, other->szinsurepass_);
    std::swap(wfaceid_, other->wfaceid_);
    std::swap(cbgender_, other->cbgender_);
    std::swap(szaccounts_, other->szaccounts_);
    std::swap(sznickname_, other->sznickname_);
    std::swap(szmachineid_, other->szmachineid_);
    std::swap(szmobilephone_, other->szmobilephone_);
    std::swap(dwspreaderid_, other->dwspreaderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_RegisterAccountsBCode::GetTypeName() const {
  return "LogonServer.PROTO_RegisterAccountsBCode";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_LogonVisitor::kDwPlazaVersionFieldNumber;
const int PROTO_LogonVisitor::kCbDeviceTypeFieldNumber;
const int PROTO_LogonVisitor::kSzMachineIDFieldNumber;
const int PROTO_LogonVisitor::kSzSpreaderFieldNumber;
const int PROTO_LogonVisitor::kDwInviteIDFieldNumber;
const int PROTO_LogonVisitor::kDwSortIDFieldNumber;
const int PROTO_LogonVisitor::kDwLogonTypeFieldNumber;
#endif  // !_MSC_VER

PROTO_LogonVisitor::PROTO_LogonVisitor()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_LogonVisitor)
}

void PROTO_LogonVisitor::InitAsDefaultInstance() {
}

PROTO_LogonVisitor::PROTO_LogonVisitor(const PROTO_LogonVisitor& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_LogonVisitor)
}

void PROTO_LogonVisitor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dwplazaversion_ = GOOGLE_LONGLONG(0);
  cbdevicetype_ = GOOGLE_LONGLONG(0);
  szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szspreader_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dwinviteid_ = GOOGLE_LONGLONG(0);
  dwsortid_ = GOOGLE_LONGLONG(0);
  dwlogontype_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_LogonVisitor::~PROTO_LogonVisitor() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_LogonVisitor)
  SharedDtor();
}

void PROTO_LogonVisitor::SharedDtor() {
  if (szmachineid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szmachineid_;
  }
  if (szspreader_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szspreader_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_LogonVisitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_LogonVisitor& PROTO_LogonVisitor::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_LogonVisitor* PROTO_LogonVisitor::default_instance_ = NULL;

PROTO_LogonVisitor* PROTO_LogonVisitor::New() const {
  return new PROTO_LogonVisitor;
}

void PROTO_LogonVisitor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PROTO_LogonVisitor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(dwplazaversion_, cbdevicetype_);
    ZR_(dwinviteid_, dwlogontype_);
    if (has_szmachineid()) {
      if (szmachineid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szmachineid_->clear();
      }
    }
    if (has_szspreader()) {
      if (szspreader_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szspreader_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_LogonVisitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_LogonVisitor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwPlazaVersion = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwplazaversion_)));
          set_has_dwplazaversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cbDeviceType;
        break;
      }

      // required int64 cbDeviceType = 2;
      case 2: {
        if (tag == 16) {
         parse_cbDeviceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cbdevicetype_)));
          set_has_cbdevicetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_szMachineID;
        break;
      }

      // required string szMachineID = 3;
      case 3: {
        if (tag == 26) {
         parse_szMachineID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szmachineid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_szSpreader;
        break;
      }

      // required string szSpreader = 4;
      case 4: {
        if (tag == 34) {
         parse_szSpreader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szspreader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dwInviteID;
        break;
      }

      // required int64 dwInviteID = 5;
      case 5: {
        if (tag == 40) {
         parse_dwInviteID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwinviteid_)));
          set_has_dwinviteid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dwSortID;
        break;
      }

      // required int64 dwSortID = 6;
      case 6: {
        if (tag == 48) {
         parse_dwSortID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwsortid_)));
          set_has_dwsortid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dwLogonType;
        break;
      }

      // required int64 dwLogonType = 7;
      case 7: {
        if (tag == 56) {
         parse_dwLogonType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwlogontype_)));
          set_has_dwlogontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_LogonVisitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_LogonVisitor)
  return false;
#undef DO_
}

void PROTO_LogonVisitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_LogonVisitor)
  // required int64 dwPlazaVersion = 1;
  if (has_dwplazaversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwplazaversion(), output);
  }

  // required int64 cbDeviceType = 2;
  if (has_cbdevicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cbdevicetype(), output);
  }

  // required string szMachineID = 3;
  if (has_szmachineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szmachineid(), output);
  }

  // required string szSpreader = 4;
  if (has_szspreader()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->szspreader(), output);
  }

  // required int64 dwInviteID = 5;
  if (has_dwinviteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->dwinviteid(), output);
  }

  // required int64 dwSortID = 6;
  if (has_dwsortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->dwsortid(), output);
  }

  // required int64 dwLogonType = 7;
  if (has_dwlogontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->dwlogontype(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_LogonVisitor)
}

int PROTO_LogonVisitor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwPlazaVersion = 1;
    if (has_dwplazaversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwplazaversion());
    }

    // required int64 cbDeviceType = 2;
    if (has_cbdevicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cbdevicetype());
    }

    // required string szMachineID = 3;
    if (has_szmachineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szmachineid());
    }

    // required string szSpreader = 4;
    if (has_szspreader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szspreader());
    }

    // required int64 dwInviteID = 5;
    if (has_dwinviteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwinviteid());
    }

    // required int64 dwSortID = 6;
    if (has_dwsortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwsortid());
    }

    // required int64 dwLogonType = 7;
    if (has_dwlogontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwlogontype());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_LogonVisitor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_LogonVisitor*>(&from));
}

void PROTO_LogonVisitor::MergeFrom(const PROTO_LogonVisitor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwplazaversion()) {
      set_dwplazaversion(from.dwplazaversion());
    }
    if (from.has_cbdevicetype()) {
      set_cbdevicetype(from.cbdevicetype());
    }
    if (from.has_szmachineid()) {
      set_szmachineid(from.szmachineid());
    }
    if (from.has_szspreader()) {
      set_szspreader(from.szspreader());
    }
    if (from.has_dwinviteid()) {
      set_dwinviteid(from.dwinviteid());
    }
    if (from.has_dwsortid()) {
      set_dwsortid(from.dwsortid());
    }
    if (from.has_dwlogontype()) {
      set_dwlogontype(from.dwlogontype());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_LogonVisitor::CopyFrom(const PROTO_LogonVisitor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_LogonVisitor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void PROTO_LogonVisitor::Swap(PROTO_LogonVisitor* other) {
  if (other != this) {
    std::swap(dwplazaversion_, other->dwplazaversion_);
    std::swap(cbdevicetype_, other->cbdevicetype_);
    std::swap(szmachineid_, other->szmachineid_);
    std::swap(szspreader_, other->szspreader_);
    std::swap(dwinviteid_, other->dwinviteid_);
    std::swap(dwsortid_, other->dwsortid_);
    std::swap(dwlogontype_, other->dwlogontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_LogonVisitor::GetTypeName() const {
  return "LogonServer.PROTO_LogonVisitor";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_RegisterMobile::kSzMobilePhoneFieldNumber;
const int PROTO_RegisterMobile::kSzLogonPassFieldNumber;
const int PROTO_RegisterMobile::kSzMachineIDFieldNumber;
const int PROTO_RegisterMobile::kSzVerificationCodeFieldNumber;
#endif  // !_MSC_VER

PROTO_RegisterMobile::PROTO_RegisterMobile()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_RegisterMobile)
}

void PROTO_RegisterMobile::InitAsDefaultInstance() {
}

PROTO_RegisterMobile::PROTO_RegisterMobile(const PROTO_RegisterMobile& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_RegisterMobile)
}

void PROTO_RegisterMobile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  szmobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szlogonpass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szverificationcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_RegisterMobile::~PROTO_RegisterMobile() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_RegisterMobile)
  SharedDtor();
}

void PROTO_RegisterMobile::SharedDtor() {
  if (szmobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szmobilephone_;
  }
  if (szlogonpass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szlogonpass_;
  }
  if (szmachineid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szmachineid_;
  }
  if (szverificationcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szverificationcode_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_RegisterMobile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_RegisterMobile& PROTO_RegisterMobile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_RegisterMobile* PROTO_RegisterMobile::default_instance_ = NULL;

PROTO_RegisterMobile* PROTO_RegisterMobile::New() const {
  return new PROTO_RegisterMobile;
}

void PROTO_RegisterMobile::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_szmobilephone()) {
      if (szmobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szmobilephone_->clear();
      }
    }
    if (has_szlogonpass()) {
      if (szlogonpass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szlogonpass_->clear();
      }
    }
    if (has_szmachineid()) {
      if (szmachineid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szmachineid_->clear();
      }
    }
    if (has_szverificationcode()) {
      if (szverificationcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szverificationcode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_RegisterMobile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_RegisterMobile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string szMobilePhone = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szmobilephone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szLogonPass;
        break;
      }

      // required string szLogonPass = 2;
      case 2: {
        if (tag == 18) {
         parse_szLogonPass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szlogonpass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_szMachineID;
        break;
      }

      // required string szMachineID = 3;
      case 3: {
        if (tag == 26) {
         parse_szMachineID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szmachineid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_szVerificationCode;
        break;
      }

      // required string szVerificationCode = 4;
      case 4: {
        if (tag == 34) {
         parse_szVerificationCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szverificationcode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_RegisterMobile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_RegisterMobile)
  return false;
#undef DO_
}

void PROTO_RegisterMobile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_RegisterMobile)
  // required string szMobilePhone = 1;
  if (has_szmobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->szmobilephone(), output);
  }

  // required string szLogonPass = 2;
  if (has_szlogonpass()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szlogonpass(), output);
  }

  // required string szMachineID = 3;
  if (has_szmachineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szmachineid(), output);
  }

  // required string szVerificationCode = 4;
  if (has_szverificationcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->szverificationcode(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_RegisterMobile)
}

int PROTO_RegisterMobile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string szMobilePhone = 1;
    if (has_szmobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szmobilephone());
    }

    // required string szLogonPass = 2;
    if (has_szlogonpass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szlogonpass());
    }

    // required string szMachineID = 3;
    if (has_szmachineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szmachineid());
    }

    // required string szVerificationCode = 4;
    if (has_szverificationcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szverificationcode());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_RegisterMobile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_RegisterMobile*>(&from));
}

void PROTO_RegisterMobile::MergeFrom(const PROTO_RegisterMobile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szmobilephone()) {
      set_szmobilephone(from.szmobilephone());
    }
    if (from.has_szlogonpass()) {
      set_szlogonpass(from.szlogonpass());
    }
    if (from.has_szmachineid()) {
      set_szmachineid(from.szmachineid());
    }
    if (from.has_szverificationcode()) {
      set_szverificationcode(from.szverificationcode());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_RegisterMobile::CopyFrom(const PROTO_RegisterMobile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_RegisterMobile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PROTO_RegisterMobile::Swap(PROTO_RegisterMobile* other) {
  if (other != this) {
    std::swap(szmobilephone_, other->szmobilephone_);
    std::swap(szlogonpass_, other->szlogonpass_);
    std::swap(szmachineid_, other->szmachineid_);
    std::swap(szverificationcode_, other->szverificationcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_RegisterMobile::GetTypeName() const {
  return "LogonServer.PROTO_RegisterMobile";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_LogonSuccessBCode::kWFaceIDFieldNumber;
const int PROTO_LogonSuccessBCode::kCbGenderFieldNumber;
const int PROTO_LogonSuccessBCode::kDwUserIDFieldNumber;
const int PROTO_LogonSuccessBCode::kDwGameIDFieldNumber;
const int PROTO_LogonSuccessBCode::kDwExperienceFieldNumber;
const int PROTO_LogonSuccessBCode::kCbMemberOrderFieldNumber;
const int PROTO_LogonSuccessBCode::kDwUserMedalFieldNumber;
const int PROTO_LogonSuccessBCode::kLUserScoreFieldNumber;
const int PROTO_LogonSuccessBCode::kLUserInsureFieldNumber;
const int PROTO_LogonSuccessBCode::kDwInoutIndexFieldNumber;
const int PROTO_LogonSuccessBCode::kLRevenueFieldNumber;
const int PROTO_LogonSuccessBCode::kLLobbyLVFieldNumber;
const int PROTO_LogonSuccessBCode::kCbVisitorClientFieldNumber;
const int PROTO_LogonSuccessBCode::kSzNickNameFieldNumber;
const int PROTO_LogonSuccessBCode::kSzAccountsFieldNumber;
const int PROTO_LogonSuccessBCode::kSzUnderWriteFieldNumber;
const int PROTO_LogonSuccessBCode::kDwServerIDFieldNumber;
#endif  // !_MSC_VER

PROTO_LogonSuccessBCode::PROTO_LogonSuccessBCode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_LogonSuccessBCode)
}

void PROTO_LogonSuccessBCode::InitAsDefaultInstance() {
}

PROTO_LogonSuccessBCode::PROTO_LogonSuccessBCode(const PROTO_LogonSuccessBCode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_LogonSuccessBCode)
}

void PROTO_LogonSuccessBCode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wfaceid_ = GOOGLE_LONGLONG(0);
  cbgender_ = 0;
  dwuserid_ = GOOGLE_LONGLONG(0);
  dwgameid_ = GOOGLE_LONGLONG(0);
  dwexperience_ = GOOGLE_LONGLONG(0);
  cbmemberorder_ = 0;
  dwusermedal_ = GOOGLE_LONGLONG(0);
  luserscore_ = GOOGLE_LONGLONG(0);
  luserinsure_ = GOOGLE_LONGLONG(0);
  dwinoutindex_ = GOOGLE_LONGLONG(0);
  lrevenue_ = GOOGLE_LONGLONG(0);
  llobbylv_ = GOOGLE_LONGLONG(0);
  cbvisitorclient_ = 0;
  sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szaccounts_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szunderwrite_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dwserverid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_LogonSuccessBCode::~PROTO_LogonSuccessBCode() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_LogonSuccessBCode)
  SharedDtor();
}

void PROTO_LogonSuccessBCode::SharedDtor() {
  if (sznickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sznickname_;
  }
  if (szaccounts_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szaccounts_;
  }
  if (szunderwrite_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szunderwrite_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_LogonSuccessBCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_LogonSuccessBCode& PROTO_LogonSuccessBCode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_LogonSuccessBCode* PROTO_LogonSuccessBCode::default_instance_ = NULL;

PROTO_LogonSuccessBCode* PROTO_LogonSuccessBCode::New() const {
  return new PROTO_LogonSuccessBCode;
}

void PROTO_LogonSuccessBCode::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PROTO_LogonSuccessBCode*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(wfaceid_, luserscore_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(luserinsure_, llobbylv_);
    cbvisitorclient_ = 0;
    if (has_sznickname()) {
      if (sznickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sznickname_->clear();
      }
    }
    if (has_szaccounts()) {
      if (szaccounts_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szaccounts_->clear();
      }
    }
    if (has_szunderwrite()) {
      if (szunderwrite_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szunderwrite_->clear();
      }
    }
  }
  dwserverid_ = GOOGLE_LONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_LogonSuccessBCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_LogonSuccessBCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 wFaceID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wfaceid_)));
          set_has_wfaceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cbGender;
        break;
      }

      // required int32 cbGender = 2;
      case 2: {
        if (tag == 16) {
         parse_cbGender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbgender_)));
          set_has_cbgender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dwUserID;
        break;
      }

      // required int64 dwUserID = 3;
      case 3: {
        if (tag == 24) {
         parse_dwUserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dwGameID;
        break;
      }

      // required int64 dwGameID = 4;
      case 4: {
        if (tag == 32) {
         parse_dwGameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwgameid_)));
          set_has_dwgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dwExperience;
        break;
      }

      // required int64 dwExperience = 5;
      case 5: {
        if (tag == 40) {
         parse_dwExperience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwexperience_)));
          set_has_dwexperience();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cbMemberOrder;
        break;
      }

      // required int32 cbMemberOrder = 6;
      case 6: {
        if (tag == 48) {
         parse_cbMemberOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbmemberorder_)));
          set_has_cbmemberorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dwUserMedal;
        break;
      }

      // required int64 dwUserMedal = 7;
      case 7: {
        if (tag == 56) {
         parse_dwUserMedal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwusermedal_)));
          set_has_dwusermedal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lUserScore;
        break;
      }

      // required int64 lUserScore = 8;
      case 8: {
        if (tag == 64) {
         parse_lUserScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &luserscore_)));
          set_has_luserscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_lUserInsure;
        break;
      }

      // required int64 lUserInsure = 9;
      case 9: {
        if (tag == 72) {
         parse_lUserInsure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &luserinsure_)));
          set_has_luserinsure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_dwInoutIndex;
        break;
      }

      // required int64 dwInoutIndex = 10;
      case 10: {
        if (tag == 80) {
         parse_dwInoutIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwinoutindex_)));
          set_has_dwinoutindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_lRevenue;
        break;
      }

      // required int64 lRevenue = 11;
      case 11: {
        if (tag == 88) {
         parse_lRevenue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lrevenue_)));
          set_has_lrevenue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_lLobbyLV;
        break;
      }

      // required int64 lLobbyLV = 12;
      case 12: {
        if (tag == 96) {
         parse_lLobbyLV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &llobbylv_)));
          set_has_llobbylv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_cbVisitorClient;
        break;
      }

      // required int32 cbVisitorClient = 13;
      case 13: {
        if (tag == 104) {
         parse_cbVisitorClient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbvisitorclient_)));
          set_has_cbvisitorclient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_szNickName;
        break;
      }

      // required string szNickName = 14;
      case 14: {
        if (tag == 114) {
         parse_szNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sznickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_szAccounts;
        break;
      }

      // required string szAccounts = 15;
      case 15: {
        if (tag == 122) {
         parse_szAccounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szaccounts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_szUnderWrite;
        break;
      }

      // required string szUnderWrite = 16;
      case 16: {
        if (tag == 130) {
         parse_szUnderWrite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szunderwrite()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_dwServerID;
        break;
      }

      // required int64 dwServerID = 17;
      case 17: {
        if (tag == 136) {
         parse_dwServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwserverid_)));
          set_has_dwserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_LogonSuccessBCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_LogonSuccessBCode)
  return false;
#undef DO_
}

void PROTO_LogonSuccessBCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_LogonSuccessBCode)
  // required int64 wFaceID = 1;
  if (has_wfaceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->wfaceid(), output);
  }

  // required int32 cbGender = 2;
  if (has_cbgender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cbgender(), output);
  }

  // required int64 dwUserID = 3;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dwuserid(), output);
  }

  // required int64 dwGameID = 4;
  if (has_dwgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->dwgameid(), output);
  }

  // required int64 dwExperience = 5;
  if (has_dwexperience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->dwexperience(), output);
  }

  // required int32 cbMemberOrder = 6;
  if (has_cbmemberorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cbmemberorder(), output);
  }

  // required int64 dwUserMedal = 7;
  if (has_dwusermedal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->dwusermedal(), output);
  }

  // required int64 lUserScore = 8;
  if (has_luserscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->luserscore(), output);
  }

  // required int64 lUserInsure = 9;
  if (has_luserinsure()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->luserinsure(), output);
  }

  // required int64 dwInoutIndex = 10;
  if (has_dwinoutindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->dwinoutindex(), output);
  }

  // required int64 lRevenue = 11;
  if (has_lrevenue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->lrevenue(), output);
  }

  // required int64 lLobbyLV = 12;
  if (has_llobbylv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->llobbylv(), output);
  }

  // required int32 cbVisitorClient = 13;
  if (has_cbvisitorclient()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->cbvisitorclient(), output);
  }

  // required string szNickName = 14;
  if (has_sznickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->sznickname(), output);
  }

  // required string szAccounts = 15;
  if (has_szaccounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->szaccounts(), output);
  }

  // required string szUnderWrite = 16;
  if (has_szunderwrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->szunderwrite(), output);
  }

  // required int64 dwServerID = 17;
  if (has_dwserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->dwserverid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_LogonSuccessBCode)
}

int PROTO_LogonSuccessBCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 wFaceID = 1;
    if (has_wfaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wfaceid());
    }

    // required int32 cbGender = 2;
    if (has_cbgender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbgender());
    }

    // required int64 dwUserID = 3;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

    // required int64 dwGameID = 4;
    if (has_dwgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwgameid());
    }

    // required int64 dwExperience = 5;
    if (has_dwexperience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwexperience());
    }

    // required int32 cbMemberOrder = 6;
    if (has_cbmemberorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbmemberorder());
    }

    // required int64 dwUserMedal = 7;
    if (has_dwusermedal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwusermedal());
    }

    // required int64 lUserScore = 8;
    if (has_luserscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->luserscore());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 lUserInsure = 9;
    if (has_luserinsure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->luserinsure());
    }

    // required int64 dwInoutIndex = 10;
    if (has_dwinoutindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwinoutindex());
    }

    // required int64 lRevenue = 11;
    if (has_lrevenue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lrevenue());
    }

    // required int64 lLobbyLV = 12;
    if (has_llobbylv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->llobbylv());
    }

    // required int32 cbVisitorClient = 13;
    if (has_cbvisitorclient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbvisitorclient());
    }

    // required string szNickName = 14;
    if (has_sznickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sznickname());
    }

    // required string szAccounts = 15;
    if (has_szaccounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szaccounts());
    }

    // required string szUnderWrite = 16;
    if (has_szunderwrite()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szunderwrite());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int64 dwServerID = 17;
    if (has_dwserverid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwserverid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_LogonSuccessBCode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_LogonSuccessBCode*>(&from));
}

void PROTO_LogonSuccessBCode::MergeFrom(const PROTO_LogonSuccessBCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wfaceid()) {
      set_wfaceid(from.wfaceid());
    }
    if (from.has_cbgender()) {
      set_cbgender(from.cbgender());
    }
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_dwgameid()) {
      set_dwgameid(from.dwgameid());
    }
    if (from.has_dwexperience()) {
      set_dwexperience(from.dwexperience());
    }
    if (from.has_cbmemberorder()) {
      set_cbmemberorder(from.cbmemberorder());
    }
    if (from.has_dwusermedal()) {
      set_dwusermedal(from.dwusermedal());
    }
    if (from.has_luserscore()) {
      set_luserscore(from.luserscore());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_luserinsure()) {
      set_luserinsure(from.luserinsure());
    }
    if (from.has_dwinoutindex()) {
      set_dwinoutindex(from.dwinoutindex());
    }
    if (from.has_lrevenue()) {
      set_lrevenue(from.lrevenue());
    }
    if (from.has_llobbylv()) {
      set_llobbylv(from.llobbylv());
    }
    if (from.has_cbvisitorclient()) {
      set_cbvisitorclient(from.cbvisitorclient());
    }
    if (from.has_sznickname()) {
      set_sznickname(from.sznickname());
    }
    if (from.has_szaccounts()) {
      set_szaccounts(from.szaccounts());
    }
    if (from.has_szunderwrite()) {
      set_szunderwrite(from.szunderwrite());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dwserverid()) {
      set_dwserverid(from.dwserverid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_LogonSuccessBCode::CopyFrom(const PROTO_LogonSuccessBCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_LogonSuccessBCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  return true;
}

void PROTO_LogonSuccessBCode::Swap(PROTO_LogonSuccessBCode* other) {
  if (other != this) {
    std::swap(wfaceid_, other->wfaceid_);
    std::swap(cbgender_, other->cbgender_);
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(dwgameid_, other->dwgameid_);
    std::swap(dwexperience_, other->dwexperience_);
    std::swap(cbmemberorder_, other->cbmemberorder_);
    std::swap(dwusermedal_, other->dwusermedal_);
    std::swap(luserscore_, other->luserscore_);
    std::swap(luserinsure_, other->luserinsure_);
    std::swap(dwinoutindex_, other->dwinoutindex_);
    std::swap(lrevenue_, other->lrevenue_);
    std::swap(llobbylv_, other->llobbylv_);
    std::swap(cbvisitorclient_, other->cbvisitorclient_);
    std::swap(sznickname_, other->sznickname_);
    std::swap(szaccounts_, other->szaccounts_);
    std::swap(szunderwrite_, other->szunderwrite_);
    std::swap(dwserverid_, other->dwserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_LogonSuccessBCode::GetTypeName() const {
  return "LogonServer.PROTO_LogonSuccessBCode";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_LogonFinish::kCbLogonFinishFieldNumber;
#endif  // !_MSC_VER

PROTO_LogonFinish::PROTO_LogonFinish()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_LogonFinish)
}

void PROTO_LogonFinish::InitAsDefaultInstance() {
}

PROTO_LogonFinish::PROTO_LogonFinish(const PROTO_LogonFinish& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_LogonFinish)
}

void PROTO_LogonFinish::SharedCtor() {
  _cached_size_ = 0;
  cblogonfinish_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_LogonFinish::~PROTO_LogonFinish() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_LogonFinish)
  SharedDtor();
}

void PROTO_LogonFinish::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_LogonFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_LogonFinish& PROTO_LogonFinish::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_LogonFinish* PROTO_LogonFinish::default_instance_ = NULL;

PROTO_LogonFinish* PROTO_LogonFinish::New() const {
  return new PROTO_LogonFinish;
}

void PROTO_LogonFinish::Clear() {
  cblogonfinish_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_LogonFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_LogonFinish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cbLogonFinish = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cblogonfinish_)));
          set_has_cblogonfinish();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_LogonFinish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_LogonFinish)
  return false;
#undef DO_
}

void PROTO_LogonFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_LogonFinish)
  // required int32 cbLogonFinish = 1;
  if (has_cblogonfinish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cblogonfinish(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_LogonFinish)
}

int PROTO_LogonFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cbLogonFinish = 1;
    if (has_cblogonfinish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cblogonfinish());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_LogonFinish::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_LogonFinish*>(&from));
}

void PROTO_LogonFinish::MergeFrom(const PROTO_LogonFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cblogonfinish()) {
      set_cblogonfinish(from.cblogonfinish());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_LogonFinish::CopyFrom(const PROTO_LogonFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_LogonFinish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PROTO_LogonFinish::Swap(PROTO_LogonFinish* other) {
  if (other != this) {
    std::swap(cblogonfinish_, other->cblogonfinish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_LogonFinish::GetTypeName() const {
  return "LogonServer.PROTO_LogonFinish";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_OperateResult::kWSubCommandIDFieldNumber;
const int PROTO_OperateResult::kDwResultCodeFieldNumber;
const int PROTO_OperateResult::kSzDescribeStringFieldNumber;
#endif  // !_MSC_VER

PROTO_OperateResult::PROTO_OperateResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_OperateResult)
}

void PROTO_OperateResult::InitAsDefaultInstance() {
}

PROTO_OperateResult::PROTO_OperateResult(const PROTO_OperateResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_OperateResult)
}

void PROTO_OperateResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wsubcommandid_ = 0;
  dwresultcode_ = GOOGLE_LONGLONG(0);
  szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_OperateResult::~PROTO_OperateResult() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_OperateResult)
  SharedDtor();
}

void PROTO_OperateResult::SharedDtor() {
  if (szdescribestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szdescribestring_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_OperateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_OperateResult& PROTO_OperateResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_OperateResult* PROTO_OperateResult::default_instance_ = NULL;

PROTO_OperateResult* PROTO_OperateResult::New() const {
  return new PROTO_OperateResult;
}

void PROTO_OperateResult::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    wsubcommandid_ = 0;
    dwresultcode_ = GOOGLE_LONGLONG(0);
    if (has_szdescribestring()) {
      if (szdescribestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szdescribestring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_OperateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_OperateResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 wSubCommandID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wsubcommandid_)));
          set_has_wsubcommandid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dwResultCode;
        break;
      }

      // required int64 dwResultCode = 2;
      case 2: {
        if (tag == 16) {
         parse_dwResultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwresultcode_)));
          set_has_dwresultcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_szDescribeString;
        break;
      }

      // required string szDescribeString = 3;
      case 3: {
        if (tag == 26) {
         parse_szDescribeString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdescribestring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_OperateResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_OperateResult)
  return false;
#undef DO_
}

void PROTO_OperateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_OperateResult)
  // required int32 wSubCommandID = 1;
  if (has_wsubcommandid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wsubcommandid(), output);
  }

  // required int64 dwResultCode = 2;
  if (has_dwresultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dwresultcode(), output);
  }

  // required string szDescribeString = 3;
  if (has_szdescribestring()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szdescribestring(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_OperateResult)
}

int PROTO_OperateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 wSubCommandID = 1;
    if (has_wsubcommandid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wsubcommandid());
    }

    // required int64 dwResultCode = 2;
    if (has_dwresultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwresultcode());
    }

    // required string szDescribeString = 3;
    if (has_szdescribestring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szdescribestring());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_OperateResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_OperateResult*>(&from));
}

void PROTO_OperateResult::MergeFrom(const PROTO_OperateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wsubcommandid()) {
      set_wsubcommandid(from.wsubcommandid());
    }
    if (from.has_dwresultcode()) {
      set_dwresultcode(from.dwresultcode());
    }
    if (from.has_szdescribestring()) {
      set_szdescribestring(from.szdescribestring());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_OperateResult::CopyFrom(const PROTO_OperateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_OperateResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PROTO_OperateResult::Swap(PROTO_OperateResult* other) {
  if (other != this) {
    std::swap(wsubcommandid_, other->wsubcommandid_);
    std::swap(dwresultcode_, other->dwresultcode_);
    std::swap(szdescribestring_, other->szdescribestring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_OperateResult::GetTypeName() const {
  return "LogonServer.PROTO_OperateResult";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_ModifyLogonPass::kSzAccountsFieldNumber;
const int PROTO_ModifyLogonPass::kSzScrPasswordFieldNumber;
const int PROTO_ModifyLogonPass::kSzDesPasswordFieldNumber;
#endif  // !_MSC_VER

PROTO_ModifyLogonPass::PROTO_ModifyLogonPass()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_ModifyLogonPass)
}

void PROTO_ModifyLogonPass::InitAsDefaultInstance() {
}

PROTO_ModifyLogonPass::PROTO_ModifyLogonPass(const PROTO_ModifyLogonPass& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_ModifyLogonPass)
}

void PROTO_ModifyLogonPass::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  szaccounts_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szscrpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szdespassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_ModifyLogonPass::~PROTO_ModifyLogonPass() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_ModifyLogonPass)
  SharedDtor();
}

void PROTO_ModifyLogonPass::SharedDtor() {
  if (szaccounts_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szaccounts_;
  }
  if (szscrpassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szscrpassword_;
  }
  if (szdespassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szdespassword_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_ModifyLogonPass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_ModifyLogonPass& PROTO_ModifyLogonPass::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_ModifyLogonPass* PROTO_ModifyLogonPass::default_instance_ = NULL;

PROTO_ModifyLogonPass* PROTO_ModifyLogonPass::New() const {
  return new PROTO_ModifyLogonPass;
}

void PROTO_ModifyLogonPass::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_szaccounts()) {
      if (szaccounts_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szaccounts_->clear();
      }
    }
    if (has_szscrpassword()) {
      if (szscrpassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szscrpassword_->clear();
      }
    }
    if (has_szdespassword()) {
      if (szdespassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szdespassword_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_ModifyLogonPass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_ModifyLogonPass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string szAccounts = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szaccounts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szScrPassword;
        break;
      }

      // required string szScrPassword = 2;
      case 2: {
        if (tag == 18) {
         parse_szScrPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szscrpassword()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_szDesPassword;
        break;
      }

      // required string szDesPassword = 3;
      case 3: {
        if (tag == 26) {
         parse_szDesPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdespassword()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_ModifyLogonPass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_ModifyLogonPass)
  return false;
#undef DO_
}

void PROTO_ModifyLogonPass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_ModifyLogonPass)
  // required string szAccounts = 1;
  if (has_szaccounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->szaccounts(), output);
  }

  // required string szScrPassword = 2;
  if (has_szscrpassword()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szscrpassword(), output);
  }

  // required string szDesPassword = 3;
  if (has_szdespassword()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szdespassword(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_ModifyLogonPass)
}

int PROTO_ModifyLogonPass::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string szAccounts = 1;
    if (has_szaccounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szaccounts());
    }

    // required string szScrPassword = 2;
    if (has_szscrpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szscrpassword());
    }

    // required string szDesPassword = 3;
    if (has_szdespassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szdespassword());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_ModifyLogonPass::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_ModifyLogonPass*>(&from));
}

void PROTO_ModifyLogonPass::MergeFrom(const PROTO_ModifyLogonPass& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szaccounts()) {
      set_szaccounts(from.szaccounts());
    }
    if (from.has_szscrpassword()) {
      set_szscrpassword(from.szscrpassword());
    }
    if (from.has_szdespassword()) {
      set_szdespassword(from.szdespassword());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_ModifyLogonPass::CopyFrom(const PROTO_ModifyLogonPass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_ModifyLogonPass::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PROTO_ModifyLogonPass::Swap(PROTO_ModifyLogonPass* other) {
  if (other != this) {
    std::swap(szaccounts_, other->szaccounts_);
    std::swap(szscrpassword_, other->szscrpassword_);
    std::swap(szdespassword_, other->szdespassword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_ModifyLogonPass::GetTypeName() const {
  return "LogonServer.PROTO_ModifyLogonPass";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_ModifyNickName::kDwUserIDFieldNumber;
const int PROTO_ModifyNickName::kSzNickNameFieldNumber;
#endif  // !_MSC_VER

PROTO_ModifyNickName::PROTO_ModifyNickName()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_ModifyNickName)
}

void PROTO_ModifyNickName::InitAsDefaultInstance() {
}

PROTO_ModifyNickName::PROTO_ModifyNickName(const PROTO_ModifyNickName& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_ModifyNickName)
}

void PROTO_ModifyNickName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_LONGLONG(0);
  sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_ModifyNickName::~PROTO_ModifyNickName() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_ModifyNickName)
  SharedDtor();
}

void PROTO_ModifyNickName::SharedDtor() {
  if (sznickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sznickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_ModifyNickName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_ModifyNickName& PROTO_ModifyNickName::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_ModifyNickName* PROTO_ModifyNickName::default_instance_ = NULL;

PROTO_ModifyNickName* PROTO_ModifyNickName::New() const {
  return new PROTO_ModifyNickName;
}

void PROTO_ModifyNickName::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    dwuserid_ = GOOGLE_LONGLONG(0);
    if (has_sznickname()) {
      if (sznickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sznickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_ModifyNickName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_ModifyNickName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szNickName;
        break;
      }

      // required string szNickName = 2;
      case 2: {
        if (tag == 18) {
         parse_szNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sznickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_ModifyNickName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_ModifyNickName)
  return false;
#undef DO_
}

void PROTO_ModifyNickName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_ModifyNickName)
  // required int64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwuserid(), output);
  }

  // required string szNickName = 2;
  if (has_sznickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sznickname(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_ModifyNickName)
}

int PROTO_ModifyNickName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

    // required string szNickName = 2;
    if (has_sznickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sznickname());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_ModifyNickName::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_ModifyNickName*>(&from));
}

void PROTO_ModifyNickName::MergeFrom(const PROTO_ModifyNickName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_sznickname()) {
      set_sznickname(from.sznickname());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_ModifyNickName::CopyFrom(const PROTO_ModifyNickName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_ModifyNickName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PROTO_ModifyNickName::Swap(PROTO_ModifyNickName* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(sznickname_, other->sznickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_ModifyNickName::GetTypeName() const {
  return "LogonServer.PROTO_ModifyNickName";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_ModifyResult::kCbResultCodeFieldNumber;
const int PROTO_ModifyResult::kWSubCommandIDFieldNumber;
const int PROTO_ModifyResult::kSzDescribeFieldNumber;
#endif  // !_MSC_VER

PROTO_ModifyResult::PROTO_ModifyResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_ModifyResult)
}

void PROTO_ModifyResult::InitAsDefaultInstance() {
}

PROTO_ModifyResult::PROTO_ModifyResult(const PROTO_ModifyResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_ModifyResult)
}

void PROTO_ModifyResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cbresultcode_ = GOOGLE_LONGLONG(0);
  wsubcommandid_ = GOOGLE_LONGLONG(0);
  szdescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_ModifyResult::~PROTO_ModifyResult() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_ModifyResult)
  SharedDtor();
}

void PROTO_ModifyResult::SharedDtor() {
  if (szdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szdescribe_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_ModifyResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_ModifyResult& PROTO_ModifyResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_ModifyResult* PROTO_ModifyResult::default_instance_ = NULL;

PROTO_ModifyResult* PROTO_ModifyResult::New() const {
  return new PROTO_ModifyResult;
}

void PROTO_ModifyResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PROTO_ModifyResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(cbresultcode_, wsubcommandid_);
    if (has_szdescribe()) {
      if (szdescribe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szdescribe_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_ModifyResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_ModifyResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 cbResultCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cbresultcode_)));
          set_has_cbresultcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wSubCommandID;
        break;
      }

      // required int64 wSubCommandID = 2;
      case 2: {
        if (tag == 16) {
         parse_wSubCommandID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wsubcommandid_)));
          set_has_wsubcommandid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_szDescribe;
        break;
      }

      // required string szDescribe = 3;
      case 3: {
        if (tag == 26) {
         parse_szDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdescribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_ModifyResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_ModifyResult)
  return false;
#undef DO_
}

void PROTO_ModifyResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_ModifyResult)
  // required int64 cbResultCode = 1;
  if (has_cbresultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cbresultcode(), output);
  }

  // required int64 wSubCommandID = 2;
  if (has_wsubcommandid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->wsubcommandid(), output);
  }

  // required string szDescribe = 3;
  if (has_szdescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szdescribe(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_ModifyResult)
}

int PROTO_ModifyResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 cbResultCode = 1;
    if (has_cbresultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cbresultcode());
    }

    // required int64 wSubCommandID = 2;
    if (has_wsubcommandid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wsubcommandid());
    }

    // required string szDescribe = 3;
    if (has_szdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szdescribe());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_ModifyResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_ModifyResult*>(&from));
}

void PROTO_ModifyResult::MergeFrom(const PROTO_ModifyResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cbresultcode()) {
      set_cbresultcode(from.cbresultcode());
    }
    if (from.has_wsubcommandid()) {
      set_wsubcommandid(from.wsubcommandid());
    }
    if (from.has_szdescribe()) {
      set_szdescribe(from.szdescribe());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_ModifyResult::CopyFrom(const PROTO_ModifyResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_ModifyResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PROTO_ModifyResult::Swap(PROTO_ModifyResult* other) {
  if (other != this) {
    std::swap(cbresultcode_, other->cbresultcode_);
    std::swap(wsubcommandid_, other->wsubcommandid_);
    std::swap(szdescribe_, other->szdescribe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_ModifyResult::GetTypeName() const {
  return "LogonServer.PROTO_ModifyResult";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_UserSaveScore::kDwUserIDFieldNumber;
const int PROTO_UserSaveScore::kLSaveScoreFieldNumber;
const int PROTO_UserSaveScore::kSzMachineIDFieldNumber;
#endif  // !_MSC_VER

PROTO_UserSaveScore::PROTO_UserSaveScore()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_UserSaveScore)
}

void PROTO_UserSaveScore::InitAsDefaultInstance() {
}

PROTO_UserSaveScore::PROTO_UserSaveScore(const PROTO_UserSaveScore& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_UserSaveScore)
}

void PROTO_UserSaveScore::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_LONGLONG(0);
  lsavescore_ = GOOGLE_LONGLONG(0);
  szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_UserSaveScore::~PROTO_UserSaveScore() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_UserSaveScore)
  SharedDtor();
}

void PROTO_UserSaveScore::SharedDtor() {
  if (szmachineid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szmachineid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_UserSaveScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_UserSaveScore& PROTO_UserSaveScore::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_UserSaveScore* PROTO_UserSaveScore::default_instance_ = NULL;

PROTO_UserSaveScore* PROTO_UserSaveScore::New() const {
  return new PROTO_UserSaveScore;
}

void PROTO_UserSaveScore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PROTO_UserSaveScore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(dwuserid_, lsavescore_);
    if (has_szmachineid()) {
      if (szmachineid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szmachineid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_UserSaveScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_UserSaveScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lSaveScore;
        break;
      }

      // required int64 lSaveScore = 2;
      case 2: {
        if (tag == 16) {
         parse_lSaveScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lsavescore_)));
          set_has_lsavescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_szMachineID;
        break;
      }

      // required string szMachineID = 3;
      case 3: {
        if (tag == 26) {
         parse_szMachineID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szmachineid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_UserSaveScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_UserSaveScore)
  return false;
#undef DO_
}

void PROTO_UserSaveScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_UserSaveScore)
  // required int64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwuserid(), output);
  }

  // required int64 lSaveScore = 2;
  if (has_lsavescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->lsavescore(), output);
  }

  // required string szMachineID = 3;
  if (has_szmachineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szmachineid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_UserSaveScore)
}

int PROTO_UserSaveScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

    // required int64 lSaveScore = 2;
    if (has_lsavescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lsavescore());
    }

    // required string szMachineID = 3;
    if (has_szmachineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szmachineid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_UserSaveScore::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_UserSaveScore*>(&from));
}

void PROTO_UserSaveScore::MergeFrom(const PROTO_UserSaveScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_lsavescore()) {
      set_lsavescore(from.lsavescore());
    }
    if (from.has_szmachineid()) {
      set_szmachineid(from.szmachineid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_UserSaveScore::CopyFrom(const PROTO_UserSaveScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_UserSaveScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PROTO_UserSaveScore::Swap(PROTO_UserSaveScore* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(lsavescore_, other->lsavescore_);
    std::swap(szmachineid_, other->szmachineid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_UserSaveScore::GetTypeName() const {
  return "LogonServer.PROTO_UserSaveScore";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_UserTakeScore::kDwUserIDFieldNumber;
const int PROTO_UserTakeScore::kLTakeScoreFieldNumber;
const int PROTO_UserTakeScore::kSzPasswordFieldNumber;
const int PROTO_UserTakeScore::kSzMachineIDFieldNumber;
#endif  // !_MSC_VER

PROTO_UserTakeScore::PROTO_UserTakeScore()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_UserTakeScore)
}

void PROTO_UserTakeScore::InitAsDefaultInstance() {
}

PROTO_UserTakeScore::PROTO_UserTakeScore(const PROTO_UserTakeScore& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_UserTakeScore)
}

void PROTO_UserTakeScore::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_LONGLONG(0);
  ltakescore_ = GOOGLE_LONGLONG(0);
  szpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_UserTakeScore::~PROTO_UserTakeScore() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_UserTakeScore)
  SharedDtor();
}

void PROTO_UserTakeScore::SharedDtor() {
  if (szpassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szpassword_;
  }
  if (szmachineid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szmachineid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_UserTakeScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_UserTakeScore& PROTO_UserTakeScore::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_UserTakeScore* PROTO_UserTakeScore::default_instance_ = NULL;

PROTO_UserTakeScore* PROTO_UserTakeScore::New() const {
  return new PROTO_UserTakeScore;
}

void PROTO_UserTakeScore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PROTO_UserTakeScore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(dwuserid_, ltakescore_);
    if (has_szpassword()) {
      if (szpassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szpassword_->clear();
      }
    }
    if (has_szmachineid()) {
      if (szmachineid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szmachineid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_UserTakeScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_UserTakeScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lTakeScore;
        break;
      }

      // required int64 lTakeScore = 2;
      case 2: {
        if (tag == 16) {
         parse_lTakeScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ltakescore_)));
          set_has_ltakescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_szPassword;
        break;
      }

      // required string szPassword = 3;
      case 3: {
        if (tag == 26) {
         parse_szPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szpassword()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_szMachineID;
        break;
      }

      // required string szMachineID = 4;
      case 4: {
        if (tag == 34) {
         parse_szMachineID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szmachineid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_UserTakeScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_UserTakeScore)
  return false;
#undef DO_
}

void PROTO_UserTakeScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_UserTakeScore)
  // required int64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwuserid(), output);
  }

  // required int64 lTakeScore = 2;
  if (has_ltakescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ltakescore(), output);
  }

  // required string szPassword = 3;
  if (has_szpassword()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szpassword(), output);
  }

  // required string szMachineID = 4;
  if (has_szmachineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->szmachineid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_UserTakeScore)
}

int PROTO_UserTakeScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

    // required int64 lTakeScore = 2;
    if (has_ltakescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ltakescore());
    }

    // required string szPassword = 3;
    if (has_szpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szpassword());
    }

    // required string szMachineID = 4;
    if (has_szmachineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szmachineid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_UserTakeScore::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_UserTakeScore*>(&from));
}

void PROTO_UserTakeScore::MergeFrom(const PROTO_UserTakeScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_ltakescore()) {
      set_ltakescore(from.ltakescore());
    }
    if (from.has_szpassword()) {
      set_szpassword(from.szpassword());
    }
    if (from.has_szmachineid()) {
      set_szmachineid(from.szmachineid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_UserTakeScore::CopyFrom(const PROTO_UserTakeScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_UserTakeScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PROTO_UserTakeScore::Swap(PROTO_UserTakeScore* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(ltakescore_, other->ltakescore_);
    std::swap(szpassword_, other->szpassword_);
    std::swap(szmachineid_, other->szmachineid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_UserTakeScore::GetTypeName() const {
  return "LogonServer.PROTO_UserTakeScore";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_QueryInsureInfo::kDwUserIDFieldNumber;
#endif  // !_MSC_VER

PROTO_QueryInsureInfo::PROTO_QueryInsureInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_QueryInsureInfo)
}

void PROTO_QueryInsureInfo::InitAsDefaultInstance() {
}

PROTO_QueryInsureInfo::PROTO_QueryInsureInfo(const PROTO_QueryInsureInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_QueryInsureInfo)
}

void PROTO_QueryInsureInfo::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_QueryInsureInfo::~PROTO_QueryInsureInfo() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_QueryInsureInfo)
  SharedDtor();
}

void PROTO_QueryInsureInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_QueryInsureInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_QueryInsureInfo& PROTO_QueryInsureInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_QueryInsureInfo* PROTO_QueryInsureInfo::default_instance_ = NULL;

PROTO_QueryInsureInfo* PROTO_QueryInsureInfo::New() const {
  return new PROTO_QueryInsureInfo;
}

void PROTO_QueryInsureInfo::Clear() {
  dwuserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_QueryInsureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_QueryInsureInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_QueryInsureInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_QueryInsureInfo)
  return false;
#undef DO_
}

void PROTO_QueryInsureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_QueryInsureInfo)
  // required int64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwuserid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_QueryInsureInfo)
}

int PROTO_QueryInsureInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_QueryInsureInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_QueryInsureInfo*>(&from));
}

void PROTO_QueryInsureInfo::MergeFrom(const PROTO_QueryInsureInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_QueryInsureInfo::CopyFrom(const PROTO_QueryInsureInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_QueryInsureInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PROTO_QueryInsureInfo::Swap(PROTO_QueryInsureInfo* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_QueryInsureInfo::GetTypeName() const {
  return "LogonServer.PROTO_QueryInsureInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_UserInsureSuccess::kDwUserIDFieldNumber;
const int PROTO_UserInsureSuccess::kLUserScoreFieldNumber;
const int PROTO_UserInsureSuccess::kLUserInsureFieldNumber;
const int PROTO_UserInsureSuccess::kSzDescribeStringFieldNumber;
#endif  // !_MSC_VER

PROTO_UserInsureSuccess::PROTO_UserInsureSuccess()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_UserInsureSuccess)
}

void PROTO_UserInsureSuccess::InitAsDefaultInstance() {
}

PROTO_UserInsureSuccess::PROTO_UserInsureSuccess(const PROTO_UserInsureSuccess& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_UserInsureSuccess)
}

void PROTO_UserInsureSuccess::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_LONGLONG(0);
  luserscore_ = GOOGLE_LONGLONG(0);
  luserinsure_ = GOOGLE_LONGLONG(0);
  szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_UserInsureSuccess::~PROTO_UserInsureSuccess() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_UserInsureSuccess)
  SharedDtor();
}

void PROTO_UserInsureSuccess::SharedDtor() {
  if (szdescribestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szdescribestring_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_UserInsureSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_UserInsureSuccess& PROTO_UserInsureSuccess::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_UserInsureSuccess* PROTO_UserInsureSuccess::default_instance_ = NULL;

PROTO_UserInsureSuccess* PROTO_UserInsureSuccess::New() const {
  return new PROTO_UserInsureSuccess;
}

void PROTO_UserInsureSuccess::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PROTO_UserInsureSuccess*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(dwuserid_, luserinsure_);
    if (has_szdescribestring()) {
      if (szdescribestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szdescribestring_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_UserInsureSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_UserInsureSuccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lUserScore;
        break;
      }

      // required int64 lUserScore = 2;
      case 2: {
        if (tag == 16) {
         parse_lUserScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &luserscore_)));
          set_has_luserscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lUserInsure;
        break;
      }

      // required int64 lUserInsure = 3;
      case 3: {
        if (tag == 24) {
         parse_lUserInsure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &luserinsure_)));
          set_has_luserinsure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_szDescribeString;
        break;
      }

      // required string szDescribeString = 4;
      case 4: {
        if (tag == 34) {
         parse_szDescribeString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdescribestring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_UserInsureSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_UserInsureSuccess)
  return false;
#undef DO_
}

void PROTO_UserInsureSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_UserInsureSuccess)
  // required int64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwuserid(), output);
  }

  // required int64 lUserScore = 2;
  if (has_luserscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->luserscore(), output);
  }

  // required int64 lUserInsure = 3;
  if (has_luserinsure()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->luserinsure(), output);
  }

  // required string szDescribeString = 4;
  if (has_szdescribestring()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->szdescribestring(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_UserInsureSuccess)
}

int PROTO_UserInsureSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

    // required int64 lUserScore = 2;
    if (has_luserscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->luserscore());
    }

    // required int64 lUserInsure = 3;
    if (has_luserinsure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->luserinsure());
    }

    // required string szDescribeString = 4;
    if (has_szdescribestring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szdescribestring());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_UserInsureSuccess::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_UserInsureSuccess*>(&from));
}

void PROTO_UserInsureSuccess::MergeFrom(const PROTO_UserInsureSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_luserscore()) {
      set_luserscore(from.luserscore());
    }
    if (from.has_luserinsure()) {
      set_luserinsure(from.luserinsure());
    }
    if (from.has_szdescribestring()) {
      set_szdescribestring(from.szdescribestring());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_UserInsureSuccess::CopyFrom(const PROTO_UserInsureSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_UserInsureSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PROTO_UserInsureSuccess::Swap(PROTO_UserInsureSuccess* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(luserscore_, other->luserscore_);
    std::swap(luserinsure_, other->luserinsure_);
    std::swap(szdescribestring_, other->szdescribestring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_UserInsureSuccess::GetTypeName() const {
  return "LogonServer.PROTO_UserInsureSuccess";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_UserInsureFailure::kLResultCodeFieldNumber;
const int PROTO_UserInsureFailure::kSzDescribeStringFieldNumber;
#endif  // !_MSC_VER

PROTO_UserInsureFailure::PROTO_UserInsureFailure()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_UserInsureFailure)
}

void PROTO_UserInsureFailure::InitAsDefaultInstance() {
}

PROTO_UserInsureFailure::PROTO_UserInsureFailure(const PROTO_UserInsureFailure& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_UserInsureFailure)
}

void PROTO_UserInsureFailure::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lresultcode_ = GOOGLE_LONGLONG(0);
  szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_UserInsureFailure::~PROTO_UserInsureFailure() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_UserInsureFailure)
  SharedDtor();
}

void PROTO_UserInsureFailure::SharedDtor() {
  if (szdescribestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szdescribestring_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_UserInsureFailure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_UserInsureFailure& PROTO_UserInsureFailure::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_UserInsureFailure* PROTO_UserInsureFailure::default_instance_ = NULL;

PROTO_UserInsureFailure* PROTO_UserInsureFailure::New() const {
  return new PROTO_UserInsureFailure;
}

void PROTO_UserInsureFailure::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    lresultcode_ = GOOGLE_LONGLONG(0);
    if (has_szdescribestring()) {
      if (szdescribestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szdescribestring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_UserInsureFailure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_UserInsureFailure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 lResultCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lresultcode_)));
          set_has_lresultcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szDescribeString;
        break;
      }

      // required string szDescribeString = 2;
      case 2: {
        if (tag == 18) {
         parse_szDescribeString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdescribestring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_UserInsureFailure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_UserInsureFailure)
  return false;
#undef DO_
}

void PROTO_UserInsureFailure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_UserInsureFailure)
  // required int64 lResultCode = 1;
  if (has_lresultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->lresultcode(), output);
  }

  // required string szDescribeString = 2;
  if (has_szdescribestring()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szdescribestring(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_UserInsureFailure)
}

int PROTO_UserInsureFailure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 lResultCode = 1;
    if (has_lresultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lresultcode());
    }

    // required string szDescribeString = 2;
    if (has_szdescribestring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szdescribestring());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_UserInsureFailure::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_UserInsureFailure*>(&from));
}

void PROTO_UserInsureFailure::MergeFrom(const PROTO_UserInsureFailure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lresultcode()) {
      set_lresultcode(from.lresultcode());
    }
    if (from.has_szdescribestring()) {
      set_szdescribestring(from.szdescribestring());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_UserInsureFailure::CopyFrom(const PROTO_UserInsureFailure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_UserInsureFailure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PROTO_UserInsureFailure::Swap(PROTO_UserInsureFailure* other) {
  if (other != this) {
    std::swap(lresultcode_, other->lresultcode_);
    std::swap(szdescribestring_, other->szdescribestring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_UserInsureFailure::GetTypeName() const {
  return "LogonServer.PROTO_UserInsureFailure";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_GetDialInfo::kDwUserIDFieldNumber;
#endif  // !_MSC_VER

PROTO_GetDialInfo::PROTO_GetDialInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_GetDialInfo)
}

void PROTO_GetDialInfo::InitAsDefaultInstance() {
}

PROTO_GetDialInfo::PROTO_GetDialInfo(const PROTO_GetDialInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_GetDialInfo)
}

void PROTO_GetDialInfo::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_GetDialInfo::~PROTO_GetDialInfo() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_GetDialInfo)
  SharedDtor();
}

void PROTO_GetDialInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_GetDialInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_GetDialInfo& PROTO_GetDialInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_GetDialInfo* PROTO_GetDialInfo::default_instance_ = NULL;

PROTO_GetDialInfo* PROTO_GetDialInfo::New() const {
  return new PROTO_GetDialInfo;
}

void PROTO_GetDialInfo::Clear() {
  dwuserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_GetDialInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_GetDialInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_GetDialInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_GetDialInfo)
  return false;
#undef DO_
}

void PROTO_GetDialInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_GetDialInfo)
  // required int64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwuserid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_GetDialInfo)
}

int PROTO_GetDialInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_GetDialInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_GetDialInfo*>(&from));
}

void PROTO_GetDialInfo::MergeFrom(const PROTO_GetDialInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_GetDialInfo::CopyFrom(const PROTO_GetDialInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_GetDialInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PROTO_GetDialInfo::Swap(PROTO_GetDialInfo* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_GetDialInfo::GetTypeName() const {
  return "LogonServer.PROTO_GetDialInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_GetDailInfoResult::kDwSilverConsumeFieldNumber;
const int PROTO_GetDailInfoResult::kDwGoldConsumeFieldNumber;
const int PROTO_GetDailInfoResult::kDwJewelConsumeFieldNumber;
const int PROTO_GetDailInfoResult::kDwDrawScoreFieldNumber;
const int PROTO_GetDailInfoResult::kDwAddScoreFieldNumber;
const int PROTO_GetDailInfoResult::kDwDailInfoFieldNumber;
#endif  // !_MSC_VER

PROTO_GetDailInfoResult::PROTO_GetDailInfoResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_GetDailInfoResult)
}

void PROTO_GetDailInfoResult::InitAsDefaultInstance() {
}

PROTO_GetDailInfoResult::PROTO_GetDailInfoResult(const PROTO_GetDailInfoResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_GetDailInfoResult)
}

void PROTO_GetDailInfoResult::SharedCtor() {
  _cached_size_ = 0;
  dwsilverconsume_ = GOOGLE_LONGLONG(0);
  dwgoldconsume_ = GOOGLE_LONGLONG(0);
  dwjewelconsume_ = GOOGLE_LONGLONG(0);
  dwdrawscore_ = GOOGLE_LONGLONG(0);
  dwaddscore_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_GetDailInfoResult::~PROTO_GetDailInfoResult() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_GetDailInfoResult)
  SharedDtor();
}

void PROTO_GetDailInfoResult::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_GetDailInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_GetDailInfoResult& PROTO_GetDailInfoResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_GetDailInfoResult* PROTO_GetDailInfoResult::default_instance_ = NULL;

PROTO_GetDailInfoResult* PROTO_GetDailInfoResult::New() const {
  return new PROTO_GetDailInfoResult;
}

void PROTO_GetDailInfoResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PROTO_GetDailInfoResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(dwsilverconsume_, dwaddscore_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  dwdailinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_GetDailInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_GetDailInfoResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwSilverConsume = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwsilverconsume_)));
          set_has_dwsilverconsume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dwGoldConsume;
        break;
      }

      // required int64 dwGoldConsume = 2;
      case 2: {
        if (tag == 16) {
         parse_dwGoldConsume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwgoldconsume_)));
          set_has_dwgoldconsume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dwJewelConsume;
        break;
      }

      // required int64 dwJewelConsume = 3;
      case 3: {
        if (tag == 24) {
         parse_dwJewelConsume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwjewelconsume_)));
          set_has_dwjewelconsume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dwDrawScore;
        break;
      }

      // required int64 dwDrawScore = 4;
      case 4: {
        if (tag == 32) {
         parse_dwDrawScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwdrawscore_)));
          set_has_dwdrawscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dwAddScore;
        break;
      }

      // required int64 dwAddScore = 5;
      case 5: {
        if (tag == 40) {
         parse_dwAddScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwaddscore_)));
          set_has_dwaddscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dwDailInfo;
        break;
      }

      // repeated int64 dwDailInfo = 6;
      case 6: {
        if (tag == 48) {
         parse_dwDailInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_dwdailinfo())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dwdailinfo())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dwDailInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_GetDailInfoResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_GetDailInfoResult)
  return false;
#undef DO_
}

void PROTO_GetDailInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_GetDailInfoResult)
  // required int64 dwSilverConsume = 1;
  if (has_dwsilverconsume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwsilverconsume(), output);
  }

  // required int64 dwGoldConsume = 2;
  if (has_dwgoldconsume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dwgoldconsume(), output);
  }

  // required int64 dwJewelConsume = 3;
  if (has_dwjewelconsume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dwjewelconsume(), output);
  }

  // required int64 dwDrawScore = 4;
  if (has_dwdrawscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->dwdrawscore(), output);
  }

  // required int64 dwAddScore = 5;
  if (has_dwaddscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->dwaddscore(), output);
  }

  // repeated int64 dwDailInfo = 6;
  for (int i = 0; i < this->dwdailinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->dwdailinfo(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_GetDailInfoResult)
}

int PROTO_GetDailInfoResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwSilverConsume = 1;
    if (has_dwsilverconsume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwsilverconsume());
    }

    // required int64 dwGoldConsume = 2;
    if (has_dwgoldconsume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwgoldconsume());
    }

    // required int64 dwJewelConsume = 3;
    if (has_dwjewelconsume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwjewelconsume());
    }

    // required int64 dwDrawScore = 4;
    if (has_dwdrawscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwdrawscore());
    }

    // required int64 dwAddScore = 5;
    if (has_dwaddscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwaddscore());
    }

  }
  // repeated int64 dwDailInfo = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->dwdailinfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dwdailinfo(i));
    }
    total_size += 1 * this->dwdailinfo_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_GetDailInfoResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_GetDailInfoResult*>(&from));
}

void PROTO_GetDailInfoResult::MergeFrom(const PROTO_GetDailInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  dwdailinfo_.MergeFrom(from.dwdailinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwsilverconsume()) {
      set_dwsilverconsume(from.dwsilverconsume());
    }
    if (from.has_dwgoldconsume()) {
      set_dwgoldconsume(from.dwgoldconsume());
    }
    if (from.has_dwjewelconsume()) {
      set_dwjewelconsume(from.dwjewelconsume());
    }
    if (from.has_dwdrawscore()) {
      set_dwdrawscore(from.dwdrawscore());
    }
    if (from.has_dwaddscore()) {
      set_dwaddscore(from.dwaddscore());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_GetDailInfoResult::CopyFrom(const PROTO_GetDailInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_GetDailInfoResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PROTO_GetDailInfoResult::Swap(PROTO_GetDailInfoResult* other) {
  if (other != this) {
    std::swap(dwsilverconsume_, other->dwsilverconsume_);
    std::swap(dwgoldconsume_, other->dwgoldconsume_);
    std::swap(dwjewelconsume_, other->dwjewelconsume_);
    std::swap(dwdrawscore_, other->dwdrawscore_);
    std::swap(dwaddscore_, other->dwaddscore_);
    dwdailinfo_.Swap(&other->dwdailinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_GetDailInfoResult::GetTypeName() const {
  return "LogonServer.PROTO_GetDailInfoResult";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_RotateDailAward::kDwUserIDFieldNumber;
const int PROTO_RotateDailAward::kDwDailTypeFieldNumber;
#endif  // !_MSC_VER

PROTO_RotateDailAward::PROTO_RotateDailAward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_RotateDailAward)
}

void PROTO_RotateDailAward::InitAsDefaultInstance() {
}

PROTO_RotateDailAward::PROTO_RotateDailAward(const PROTO_RotateDailAward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_RotateDailAward)
}

void PROTO_RotateDailAward::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_LONGLONG(0);
  dwdailtype_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_RotateDailAward::~PROTO_RotateDailAward() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_RotateDailAward)
  SharedDtor();
}

void PROTO_RotateDailAward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_RotateDailAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_RotateDailAward& PROTO_RotateDailAward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_RotateDailAward* PROTO_RotateDailAward::default_instance_ = NULL;

PROTO_RotateDailAward* PROTO_RotateDailAward::New() const {
  return new PROTO_RotateDailAward;
}

void PROTO_RotateDailAward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PROTO_RotateDailAward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dwuserid_, dwdailtype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_RotateDailAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_RotateDailAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dwDailType;
        break;
      }

      // required int64 dwDailType = 2;
      case 2: {
        if (tag == 16) {
         parse_dwDailType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwdailtype_)));
          set_has_dwdailtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_RotateDailAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_RotateDailAward)
  return false;
#undef DO_
}

void PROTO_RotateDailAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_RotateDailAward)
  // required int64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwuserid(), output);
  }

  // required int64 dwDailType = 2;
  if (has_dwdailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dwdailtype(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_RotateDailAward)
}

int PROTO_RotateDailAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

    // required int64 dwDailType = 2;
    if (has_dwdailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwdailtype());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_RotateDailAward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_RotateDailAward*>(&from));
}

void PROTO_RotateDailAward::MergeFrom(const PROTO_RotateDailAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_dwdailtype()) {
      set_dwdailtype(from.dwdailtype());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_RotateDailAward::CopyFrom(const PROTO_RotateDailAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_RotateDailAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PROTO_RotateDailAward::Swap(PROTO_RotateDailAward* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(dwdailtype_, other->dwdailtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_RotateDailAward::GetTypeName() const {
  return "LogonServer.PROTO_RotateDailAward";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_RotateDailAwardInfo::kDwResultCodeFieldNumber;
const int PROTO_RotateDailAwardInfo::kSzDescribeStringFieldNumber;
const int PROTO_RotateDailAwardInfo::kDwUserIDFieldNumber;
const int PROTO_RotateDailAwardInfo::kDwDailTypeFieldNumber;
const int PROTO_RotateDailAwardInfo::kDwDailAwardFieldNumber;
const int PROTO_RotateDailAwardInfo::kDwAwardIDFieldNumber;
const int PROTO_RotateDailAwardInfo::kDwConsumeSumFieldNumber;
const int PROTO_RotateDailAwardInfo::kDwSilverConsumeFieldNumber;
const int PROTO_RotateDailAwardInfo::kDwGoldConsumeFieldNumber;
const int PROTO_RotateDailAwardInfo::kDwJewelConsumeFieldNumber;
const int PROTO_RotateDailAwardInfo::kDwDrawScoreFieldNumber;
const int PROTO_RotateDailAwardInfo::kDwAddScoreFieldNumber;
const int PROTO_RotateDailAwardInfo::kDwDailInfoFieldNumber;
#endif  // !_MSC_VER

PROTO_RotateDailAwardInfo::PROTO_RotateDailAwardInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_RotateDailAwardInfo)
}

void PROTO_RotateDailAwardInfo::InitAsDefaultInstance() {
}

PROTO_RotateDailAwardInfo::PROTO_RotateDailAwardInfo(const PROTO_RotateDailAwardInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_RotateDailAwardInfo)
}

void PROTO_RotateDailAwardInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dwresultcode_ = GOOGLE_LONGLONG(0);
  szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dwuserid_ = GOOGLE_LONGLONG(0);
  dwdailtype_ = GOOGLE_LONGLONG(0);
  dwdailaward_ = GOOGLE_LONGLONG(0);
  dwawardid_ = GOOGLE_LONGLONG(0);
  dwconsumesum_ = GOOGLE_LONGLONG(0);
  dwsilverconsume_ = GOOGLE_LONGLONG(0);
  dwgoldconsume_ = GOOGLE_LONGLONG(0);
  dwjewelconsume_ = GOOGLE_LONGLONG(0);
  dwdrawscore_ = GOOGLE_LONGLONG(0);
  dwaddscore_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_RotateDailAwardInfo::~PROTO_RotateDailAwardInfo() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_RotateDailAwardInfo)
  SharedDtor();
}

void PROTO_RotateDailAwardInfo::SharedDtor() {
  if (szdescribestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szdescribestring_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_RotateDailAwardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_RotateDailAwardInfo& PROTO_RotateDailAwardInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_RotateDailAwardInfo* PROTO_RotateDailAwardInfo::default_instance_ = NULL;

PROTO_RotateDailAwardInfo* PROTO_RotateDailAwardInfo::New() const {
  return new PROTO_RotateDailAwardInfo;
}

void PROTO_RotateDailAwardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PROTO_RotateDailAwardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(dwuserid_, dwsilverconsume_);
    dwresultcode_ = GOOGLE_LONGLONG(0);
    if (has_szdescribestring()) {
      if (szdescribestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szdescribestring_->clear();
      }
    }
  }
  ZR_(dwgoldconsume_, dwaddscore_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  dwdailinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_RotateDailAwardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_RotateDailAwardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwResultCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwresultcode_)));
          set_has_dwresultcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szDescribeString;
        break;
      }

      // required string szDescribeString = 2;
      case 2: {
        if (tag == 18) {
         parse_szDescribeString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdescribestring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dwUserID;
        break;
      }

      // required int64 dwUserID = 3;
      case 3: {
        if (tag == 24) {
         parse_dwUserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dwDailType;
        break;
      }

      // required int64 dwDailType = 4;
      case 4: {
        if (tag == 32) {
         parse_dwDailType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwdailtype_)));
          set_has_dwdailtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dwDailAward;
        break;
      }

      // required int64 dwDailAward = 5;
      case 5: {
        if (tag == 40) {
         parse_dwDailAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwdailaward_)));
          set_has_dwdailaward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dwAwardID;
        break;
      }

      // required int64 dwAwardID = 6;
      case 6: {
        if (tag == 48) {
         parse_dwAwardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwawardid_)));
          set_has_dwawardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dwConsumeSum;
        break;
      }

      // required int64 dwConsumeSum = 7;
      case 7: {
        if (tag == 56) {
         parse_dwConsumeSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwconsumesum_)));
          set_has_dwconsumesum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dwSilverConsume;
        break;
      }

      // required int64 dwSilverConsume = 8;
      case 8: {
        if (tag == 64) {
         parse_dwSilverConsume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwsilverconsume_)));
          set_has_dwsilverconsume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_dwGoldConsume;
        break;
      }

      // required int64 dwGoldConsume = 9;
      case 9: {
        if (tag == 72) {
         parse_dwGoldConsume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwgoldconsume_)));
          set_has_dwgoldconsume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_dwJewelConsume;
        break;
      }

      // required int64 dwJewelConsume = 10;
      case 10: {
        if (tag == 80) {
         parse_dwJewelConsume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwjewelconsume_)));
          set_has_dwjewelconsume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_dwDrawScore;
        break;
      }

      // required int64 dwDrawScore = 11;
      case 11: {
        if (tag == 88) {
         parse_dwDrawScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwdrawscore_)));
          set_has_dwdrawscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_dwAddScore;
        break;
      }

      // required int64 dwAddScore = 12;
      case 12: {
        if (tag == 96) {
         parse_dwAddScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwaddscore_)));
          set_has_dwaddscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_dwDailInfo;
        break;
      }

      // repeated int64 dwDailInfo = 13;
      case 13: {
        if (tag == 104) {
         parse_dwDailInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 104, input, this->mutable_dwdailinfo())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dwdailinfo())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_dwDailInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_RotateDailAwardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_RotateDailAwardInfo)
  return false;
#undef DO_
}

void PROTO_RotateDailAwardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_RotateDailAwardInfo)
  // required int64 dwResultCode = 1;
  if (has_dwresultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwresultcode(), output);
  }

  // required string szDescribeString = 2;
  if (has_szdescribestring()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szdescribestring(), output);
  }

  // required int64 dwUserID = 3;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dwuserid(), output);
  }

  // required int64 dwDailType = 4;
  if (has_dwdailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->dwdailtype(), output);
  }

  // required int64 dwDailAward = 5;
  if (has_dwdailaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->dwdailaward(), output);
  }

  // required int64 dwAwardID = 6;
  if (has_dwawardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->dwawardid(), output);
  }

  // required int64 dwConsumeSum = 7;
  if (has_dwconsumesum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->dwconsumesum(), output);
  }

  // required int64 dwSilverConsume = 8;
  if (has_dwsilverconsume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->dwsilverconsume(), output);
  }

  // required int64 dwGoldConsume = 9;
  if (has_dwgoldconsume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->dwgoldconsume(), output);
  }

  // required int64 dwJewelConsume = 10;
  if (has_dwjewelconsume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->dwjewelconsume(), output);
  }

  // required int64 dwDrawScore = 11;
  if (has_dwdrawscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->dwdrawscore(), output);
  }

  // required int64 dwAddScore = 12;
  if (has_dwaddscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->dwaddscore(), output);
  }

  // repeated int64 dwDailInfo = 13;
  for (int i = 0; i < this->dwdailinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      13, this->dwdailinfo(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_RotateDailAwardInfo)
}

int PROTO_RotateDailAwardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwResultCode = 1;
    if (has_dwresultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwresultcode());
    }

    // required string szDescribeString = 2;
    if (has_szdescribestring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szdescribestring());
    }

    // required int64 dwUserID = 3;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

    // required int64 dwDailType = 4;
    if (has_dwdailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwdailtype());
    }

    // required int64 dwDailAward = 5;
    if (has_dwdailaward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwdailaward());
    }

    // required int64 dwAwardID = 6;
    if (has_dwawardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwawardid());
    }

    // required int64 dwConsumeSum = 7;
    if (has_dwconsumesum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwconsumesum());
    }

    // required int64 dwSilverConsume = 8;
    if (has_dwsilverconsume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwsilverconsume());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 dwGoldConsume = 9;
    if (has_dwgoldconsume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwgoldconsume());
    }

    // required int64 dwJewelConsume = 10;
    if (has_dwjewelconsume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwjewelconsume());
    }

    // required int64 dwDrawScore = 11;
    if (has_dwdrawscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwdrawscore());
    }

    // required int64 dwAddScore = 12;
    if (has_dwaddscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwaddscore());
    }

  }
  // repeated int64 dwDailInfo = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->dwdailinfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dwdailinfo(i));
    }
    total_size += 1 * this->dwdailinfo_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_RotateDailAwardInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_RotateDailAwardInfo*>(&from));
}

void PROTO_RotateDailAwardInfo::MergeFrom(const PROTO_RotateDailAwardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  dwdailinfo_.MergeFrom(from.dwdailinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwresultcode()) {
      set_dwresultcode(from.dwresultcode());
    }
    if (from.has_szdescribestring()) {
      set_szdescribestring(from.szdescribestring());
    }
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_dwdailtype()) {
      set_dwdailtype(from.dwdailtype());
    }
    if (from.has_dwdailaward()) {
      set_dwdailaward(from.dwdailaward());
    }
    if (from.has_dwawardid()) {
      set_dwawardid(from.dwawardid());
    }
    if (from.has_dwconsumesum()) {
      set_dwconsumesum(from.dwconsumesum());
    }
    if (from.has_dwsilverconsume()) {
      set_dwsilverconsume(from.dwsilverconsume());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dwgoldconsume()) {
      set_dwgoldconsume(from.dwgoldconsume());
    }
    if (from.has_dwjewelconsume()) {
      set_dwjewelconsume(from.dwjewelconsume());
    }
    if (from.has_dwdrawscore()) {
      set_dwdrawscore(from.dwdrawscore());
    }
    if (from.has_dwaddscore()) {
      set_dwaddscore(from.dwaddscore());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_RotateDailAwardInfo::CopyFrom(const PROTO_RotateDailAwardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_RotateDailAwardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void PROTO_RotateDailAwardInfo::Swap(PROTO_RotateDailAwardInfo* other) {
  if (other != this) {
    std::swap(dwresultcode_, other->dwresultcode_);
    std::swap(szdescribestring_, other->szdescribestring_);
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(dwdailtype_, other->dwdailtype_);
    std::swap(dwdailaward_, other->dwdailaward_);
    std::swap(dwawardid_, other->dwawardid_);
    std::swap(dwconsumesum_, other->dwconsumesum_);
    std::swap(dwsilverconsume_, other->dwsilverconsume_);
    std::swap(dwgoldconsume_, other->dwgoldconsume_);
    std::swap(dwjewelconsume_, other->dwjewelconsume_);
    std::swap(dwdrawscore_, other->dwdrawscore_);
    std::swap(dwaddscore_, other->dwaddscore_);
    dwdailinfo_.Swap(&other->dwdailinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_RotateDailAwardInfo::GetTypeName() const {
  return "LogonServer.PROTO_RotateDailAwardInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_GetUserSignIn::kDwUserIDFieldNumber;
#endif  // !_MSC_VER

PROTO_GetUserSignIn::PROTO_GetUserSignIn()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_GetUserSignIn)
}

void PROTO_GetUserSignIn::InitAsDefaultInstance() {
}

PROTO_GetUserSignIn::PROTO_GetUserSignIn(const PROTO_GetUserSignIn& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_GetUserSignIn)
}

void PROTO_GetUserSignIn::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_GetUserSignIn::~PROTO_GetUserSignIn() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_GetUserSignIn)
  SharedDtor();
}

void PROTO_GetUserSignIn::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_GetUserSignIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_GetUserSignIn& PROTO_GetUserSignIn::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_GetUserSignIn* PROTO_GetUserSignIn::default_instance_ = NULL;

PROTO_GetUserSignIn* PROTO_GetUserSignIn::New() const {
  return new PROTO_GetUserSignIn;
}

void PROTO_GetUserSignIn::Clear() {
  dwuserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_GetUserSignIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_GetUserSignIn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_GetUserSignIn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_GetUserSignIn)
  return false;
#undef DO_
}

void PROTO_GetUserSignIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_GetUserSignIn)
  // required int64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwuserid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_GetUserSignIn)
}

int PROTO_GetUserSignIn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_GetUserSignIn::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_GetUserSignIn*>(&from));
}

void PROTO_GetUserSignIn::MergeFrom(const PROTO_GetUserSignIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_GetUserSignIn::CopyFrom(const PROTO_GetUserSignIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_GetUserSignIn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PROTO_GetUserSignIn::Swap(PROTO_GetUserSignIn* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_GetUserSignIn::GetTypeName() const {
  return "LogonServer.PROTO_GetUserSignIn";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_SetUserSignIn::kDwUserIDFieldNumber;
#endif  // !_MSC_VER

PROTO_SetUserSignIn::PROTO_SetUserSignIn()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_SetUserSignIn)
}

void PROTO_SetUserSignIn::InitAsDefaultInstance() {
}

PROTO_SetUserSignIn::PROTO_SetUserSignIn(const PROTO_SetUserSignIn& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_SetUserSignIn)
}

void PROTO_SetUserSignIn::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_SetUserSignIn::~PROTO_SetUserSignIn() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_SetUserSignIn)
  SharedDtor();
}

void PROTO_SetUserSignIn::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_SetUserSignIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_SetUserSignIn& PROTO_SetUserSignIn::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_SetUserSignIn* PROTO_SetUserSignIn::default_instance_ = NULL;

PROTO_SetUserSignIn* PROTO_SetUserSignIn::New() const {
  return new PROTO_SetUserSignIn;
}

void PROTO_SetUserSignIn::Clear() {
  dwuserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_SetUserSignIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_SetUserSignIn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_SetUserSignIn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_SetUserSignIn)
  return false;
#undef DO_
}

void PROTO_SetUserSignIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_SetUserSignIn)
  // required int64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwuserid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_SetUserSignIn)
}

int PROTO_SetUserSignIn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_SetUserSignIn::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_SetUserSignIn*>(&from));
}

void PROTO_SetUserSignIn::MergeFrom(const PROTO_SetUserSignIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_SetUserSignIn::CopyFrom(const PROTO_SetUserSignIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_SetUserSignIn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PROTO_SetUserSignIn::Swap(PROTO_SetUserSignIn* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_SetUserSignIn::GetTypeName() const {
  return "LogonServer.PROTO_SetUserSignIn";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_GetSignInResult::kWSignInNumFieldNumber;
const int PROTO_GetSignInResult::kCbTodayIsSinInFieldNumber;
const int PROTO_GetSignInResult::kDwResultCodeFieldNumber;
const int PROTO_GetSignInResult::kSzDescribeStringFieldNumber;
#endif  // !_MSC_VER

PROTO_GetSignInResult::PROTO_GetSignInResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_GetSignInResult)
}

void PROTO_GetSignInResult::InitAsDefaultInstance() {
}

PROTO_GetSignInResult::PROTO_GetSignInResult(const PROTO_GetSignInResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_GetSignInResult)
}

void PROTO_GetSignInResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wsigninnum_ = 0;
  cbtodayissinin_ = 0;
  dwresultcode_ = GOOGLE_LONGLONG(0);
  szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_GetSignInResult::~PROTO_GetSignInResult() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_GetSignInResult)
  SharedDtor();
}

void PROTO_GetSignInResult::SharedDtor() {
  if (szdescribestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szdescribestring_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_GetSignInResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_GetSignInResult& PROTO_GetSignInResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_GetSignInResult* PROTO_GetSignInResult::default_instance_ = NULL;

PROTO_GetSignInResult* PROTO_GetSignInResult::New() const {
  return new PROTO_GetSignInResult;
}

void PROTO_GetSignInResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PROTO_GetSignInResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(wsigninnum_, dwresultcode_);
    if (has_szdescribestring()) {
      if (szdescribestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szdescribestring_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_GetSignInResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_GetSignInResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 wSignInNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wsigninnum_)));
          set_has_wsigninnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cbTodayIsSinIn;
        break;
      }

      // required int32 cbTodayIsSinIn = 2;
      case 2: {
        if (tag == 16) {
         parse_cbTodayIsSinIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbtodayissinin_)));
          set_has_cbtodayissinin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dwResultCode;
        break;
      }

      // required int64 dwResultCode = 3;
      case 3: {
        if (tag == 24) {
         parse_dwResultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwresultcode_)));
          set_has_dwresultcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_szDescribeString;
        break;
      }

      // required string szDescribeString = 4;
      case 4: {
        if (tag == 34) {
         parse_szDescribeString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdescribestring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_GetSignInResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_GetSignInResult)
  return false;
#undef DO_
}

void PROTO_GetSignInResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_GetSignInResult)
  // required int32 wSignInNum = 1;
  if (has_wsigninnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wsigninnum(), output);
  }

  // required int32 cbTodayIsSinIn = 2;
  if (has_cbtodayissinin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cbtodayissinin(), output);
  }

  // required int64 dwResultCode = 3;
  if (has_dwresultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dwresultcode(), output);
  }

  // required string szDescribeString = 4;
  if (has_szdescribestring()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->szdescribestring(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_GetSignInResult)
}

int PROTO_GetSignInResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 wSignInNum = 1;
    if (has_wsigninnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wsigninnum());
    }

    // required int32 cbTodayIsSinIn = 2;
    if (has_cbtodayissinin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbtodayissinin());
    }

    // required int64 dwResultCode = 3;
    if (has_dwresultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwresultcode());
    }

    // required string szDescribeString = 4;
    if (has_szdescribestring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szdescribestring());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_GetSignInResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_GetSignInResult*>(&from));
}

void PROTO_GetSignInResult::MergeFrom(const PROTO_GetSignInResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wsigninnum()) {
      set_wsigninnum(from.wsigninnum());
    }
    if (from.has_cbtodayissinin()) {
      set_cbtodayissinin(from.cbtodayissinin());
    }
    if (from.has_dwresultcode()) {
      set_dwresultcode(from.dwresultcode());
    }
    if (from.has_szdescribestring()) {
      set_szdescribestring(from.szdescribestring());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_GetSignInResult::CopyFrom(const PROTO_GetSignInResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_GetSignInResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PROTO_GetSignInResult::Swap(PROTO_GetSignInResult* other) {
  if (other != this) {
    std::swap(wsigninnum_, other->wsigninnum_);
    std::swap(cbtodayissinin_, other->cbtodayissinin_);
    std::swap(dwresultcode_, other->dwresultcode_);
    std::swap(szdescribestring_, other->szdescribestring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_GetSignInResult::GetTypeName() const {
  return "LogonServer.PROTO_GetSignInResult";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_ChickBindBank::kDwUserIDFieldNumber;
#endif  // !_MSC_VER

PROTO_ChickBindBank::PROTO_ChickBindBank()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_ChickBindBank)
}

void PROTO_ChickBindBank::InitAsDefaultInstance() {
}

PROTO_ChickBindBank::PROTO_ChickBindBank(const PROTO_ChickBindBank& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_ChickBindBank)
}

void PROTO_ChickBindBank::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_ChickBindBank::~PROTO_ChickBindBank() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_ChickBindBank)
  SharedDtor();
}

void PROTO_ChickBindBank::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_ChickBindBank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_ChickBindBank& PROTO_ChickBindBank::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_ChickBindBank* PROTO_ChickBindBank::default_instance_ = NULL;

PROTO_ChickBindBank* PROTO_ChickBindBank::New() const {
  return new PROTO_ChickBindBank;
}

void PROTO_ChickBindBank::Clear() {
  dwuserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_ChickBindBank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_ChickBindBank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_ChickBindBank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_ChickBindBank)
  return false;
#undef DO_
}

void PROTO_ChickBindBank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_ChickBindBank)
  // required int64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwuserid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_ChickBindBank)
}

int PROTO_ChickBindBank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_ChickBindBank::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_ChickBindBank*>(&from));
}

void PROTO_ChickBindBank::MergeFrom(const PROTO_ChickBindBank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_ChickBindBank::CopyFrom(const PROTO_ChickBindBank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_ChickBindBank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PROTO_ChickBindBank::Swap(PROTO_ChickBindBank* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_ChickBindBank::GetTypeName() const {
  return "LogonServer.PROTO_ChickBindBank";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_GP_BindBankCard::kDwUserIDFieldNumber;
const int PROTO_GP_BindBankCard::kSzBankNameFieldNumber;
const int PROTO_GP_BindBankCard::kSzBankCardNumFieldNumber;
const int PROTO_GP_BindBankCard::kSzAccountHolderFieldNumber;
#endif  // !_MSC_VER

PROTO_GP_BindBankCard::PROTO_GP_BindBankCard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_GP_BindBankCard)
}

void PROTO_GP_BindBankCard::InitAsDefaultInstance() {
}

PROTO_GP_BindBankCard::PROTO_GP_BindBankCard(const PROTO_GP_BindBankCard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_GP_BindBankCard)
}

void PROTO_GP_BindBankCard::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_LONGLONG(0);
  szbankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szbankcardnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szaccountholder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_GP_BindBankCard::~PROTO_GP_BindBankCard() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_GP_BindBankCard)
  SharedDtor();
}

void PROTO_GP_BindBankCard::SharedDtor() {
  if (szbankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szbankname_;
  }
  if (szbankcardnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szbankcardnum_;
  }
  if (szaccountholder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szaccountholder_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_GP_BindBankCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_GP_BindBankCard& PROTO_GP_BindBankCard::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_GP_BindBankCard* PROTO_GP_BindBankCard::default_instance_ = NULL;

PROTO_GP_BindBankCard* PROTO_GP_BindBankCard::New() const {
  return new PROTO_GP_BindBankCard;
}

void PROTO_GP_BindBankCard::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    dwuserid_ = GOOGLE_LONGLONG(0);
    if (has_szbankname()) {
      if (szbankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szbankname_->clear();
      }
    }
    if (has_szbankcardnum()) {
      if (szbankcardnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szbankcardnum_->clear();
      }
    }
    if (has_szaccountholder()) {
      if (szaccountholder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szaccountholder_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_GP_BindBankCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_GP_BindBankCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szBankName;
        break;
      }

      // required string szBankName = 2;
      case 2: {
        if (tag == 18) {
         parse_szBankName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szbankname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_szBankCardNum;
        break;
      }

      // required string szBankCardNum = 3;
      case 3: {
        if (tag == 26) {
         parse_szBankCardNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szbankcardnum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_szAccountHolder;
        break;
      }

      // required string szAccountHolder = 4;
      case 4: {
        if (tag == 34) {
         parse_szAccountHolder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szaccountholder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_GP_BindBankCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_GP_BindBankCard)
  return false;
#undef DO_
}

void PROTO_GP_BindBankCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_GP_BindBankCard)
  // required int64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwuserid(), output);
  }

  // required string szBankName = 2;
  if (has_szbankname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szbankname(), output);
  }

  // required string szBankCardNum = 3;
  if (has_szbankcardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szbankcardnum(), output);
  }

  // required string szAccountHolder = 4;
  if (has_szaccountholder()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->szaccountholder(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_GP_BindBankCard)
}

int PROTO_GP_BindBankCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

    // required string szBankName = 2;
    if (has_szbankname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szbankname());
    }

    // required string szBankCardNum = 3;
    if (has_szbankcardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szbankcardnum());
    }

    // required string szAccountHolder = 4;
    if (has_szaccountholder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szaccountholder());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_GP_BindBankCard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_GP_BindBankCard*>(&from));
}

void PROTO_GP_BindBankCard::MergeFrom(const PROTO_GP_BindBankCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_szbankname()) {
      set_szbankname(from.szbankname());
    }
    if (from.has_szbankcardnum()) {
      set_szbankcardnum(from.szbankcardnum());
    }
    if (from.has_szaccountholder()) {
      set_szaccountholder(from.szaccountholder());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_GP_BindBankCard::CopyFrom(const PROTO_GP_BindBankCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_GP_BindBankCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PROTO_GP_BindBankCard::Swap(PROTO_GP_BindBankCard* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(szbankname_, other->szbankname_);
    std::swap(szbankcardnum_, other->szbankcardnum_);
    std::swap(szaccountholder_, other->szaccountholder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_GP_BindBankCard::GetTypeName() const {
  return "LogonServer.PROTO_GP_BindBankCard";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_ChickBindZFB::kDwUserIDFieldNumber;
#endif  // !_MSC_VER

PROTO_ChickBindZFB::PROTO_ChickBindZFB()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_ChickBindZFB)
}

void PROTO_ChickBindZFB::InitAsDefaultInstance() {
}

PROTO_ChickBindZFB::PROTO_ChickBindZFB(const PROTO_ChickBindZFB& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_ChickBindZFB)
}

void PROTO_ChickBindZFB::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_ChickBindZFB::~PROTO_ChickBindZFB() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_ChickBindZFB)
  SharedDtor();
}

void PROTO_ChickBindZFB::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_ChickBindZFB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_ChickBindZFB& PROTO_ChickBindZFB::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_ChickBindZFB* PROTO_ChickBindZFB::default_instance_ = NULL;

PROTO_ChickBindZFB* PROTO_ChickBindZFB::New() const {
  return new PROTO_ChickBindZFB;
}

void PROTO_ChickBindZFB::Clear() {
  dwuserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_ChickBindZFB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_ChickBindZFB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_ChickBindZFB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_ChickBindZFB)
  return false;
#undef DO_
}

void PROTO_ChickBindZFB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_ChickBindZFB)
  // required int64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwuserid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_ChickBindZFB)
}

int PROTO_ChickBindZFB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_ChickBindZFB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_ChickBindZFB*>(&from));
}

void PROTO_ChickBindZFB::MergeFrom(const PROTO_ChickBindZFB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_ChickBindZFB::CopyFrom(const PROTO_ChickBindZFB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_ChickBindZFB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PROTO_ChickBindZFB::Swap(PROTO_ChickBindZFB* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_ChickBindZFB::GetTypeName() const {
  return "LogonServer.PROTO_ChickBindZFB";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_BindZFB::kDwUserIDFieldNumber;
const int PROTO_BindZFB::kSzZFBNameFieldNumber;
const int PROTO_BindZFB::kSzNickNameFieldNumber;
#endif  // !_MSC_VER

PROTO_BindZFB::PROTO_BindZFB()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_BindZFB)
}

void PROTO_BindZFB::InitAsDefaultInstance() {
}

PROTO_BindZFB::PROTO_BindZFB(const PROTO_BindZFB& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_BindZFB)
}

void PROTO_BindZFB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_LONGLONG(0);
  szzfbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_BindZFB::~PROTO_BindZFB() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_BindZFB)
  SharedDtor();
}

void PROTO_BindZFB::SharedDtor() {
  if (szzfbname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szzfbname_;
  }
  if (sznickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sznickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_BindZFB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_BindZFB& PROTO_BindZFB::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_BindZFB* PROTO_BindZFB::default_instance_ = NULL;

PROTO_BindZFB* PROTO_BindZFB::New() const {
  return new PROTO_BindZFB;
}

void PROTO_BindZFB::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    dwuserid_ = GOOGLE_LONGLONG(0);
    if (has_szzfbname()) {
      if (szzfbname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szzfbname_->clear();
      }
    }
    if (has_sznickname()) {
      if (sznickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sznickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_BindZFB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_BindZFB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szZFBName;
        break;
      }

      // required string szZFBName = 2;
      case 2: {
        if (tag == 18) {
         parse_szZFBName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szzfbname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_szNickName;
        break;
      }

      // required string szNickName = 3;
      case 3: {
        if (tag == 26) {
         parse_szNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sznickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_BindZFB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_BindZFB)
  return false;
#undef DO_
}

void PROTO_BindZFB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_BindZFB)
  // required int64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwuserid(), output);
  }

  // required string szZFBName = 2;
  if (has_szzfbname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szzfbname(), output);
  }

  // required string szNickName = 3;
  if (has_sznickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sznickname(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_BindZFB)
}

int PROTO_BindZFB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

    // required string szZFBName = 2;
    if (has_szzfbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szzfbname());
    }

    // required string szNickName = 3;
    if (has_sznickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sznickname());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_BindZFB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_BindZFB*>(&from));
}

void PROTO_BindZFB::MergeFrom(const PROTO_BindZFB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_szzfbname()) {
      set_szzfbname(from.szzfbname());
    }
    if (from.has_sznickname()) {
      set_sznickname(from.sznickname());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_BindZFB::CopyFrom(const PROTO_BindZFB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_BindZFB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PROTO_BindZFB::Swap(PROTO_BindZFB* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(szzfbname_, other->szzfbname_);
    std::swap(sznickname_, other->sznickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_BindZFB::GetTypeName() const {
  return "LogonServer.PROTO_BindZFB";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_BindBankInfo::kWSubCommandIDFieldNumber;
const int PROTO_BindBankInfo::kDwResultCodeFieldNumber;
const int PROTO_BindBankInfo::kSzDescribeStringFieldNumber;
const int PROTO_BindBankInfo::kSzBankNameFieldNumber;
const int PROTO_BindBankInfo::kSzBankCardNumFieldNumber;
const int PROTO_BindBankInfo::kSzAccountHolderFieldNumber;
#endif  // !_MSC_VER

PROTO_BindBankInfo::PROTO_BindBankInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_BindBankInfo)
}

void PROTO_BindBankInfo::InitAsDefaultInstance() {
}

PROTO_BindBankInfo::PROTO_BindBankInfo(const PROTO_BindBankInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_BindBankInfo)
}

void PROTO_BindBankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wsubcommandid_ = GOOGLE_LONGLONG(0);
  dwresultcode_ = GOOGLE_LONGLONG(0);
  szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szbankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szbankcardnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szaccountholder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_BindBankInfo::~PROTO_BindBankInfo() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_BindBankInfo)
  SharedDtor();
}

void PROTO_BindBankInfo::SharedDtor() {
  if (szdescribestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szdescribestring_;
  }
  if (szbankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szbankname_;
  }
  if (szbankcardnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szbankcardnum_;
  }
  if (szaccountholder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szaccountholder_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_BindBankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_BindBankInfo& PROTO_BindBankInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_BindBankInfo* PROTO_BindBankInfo::default_instance_ = NULL;

PROTO_BindBankInfo* PROTO_BindBankInfo::New() const {
  return new PROTO_BindBankInfo;
}

void PROTO_BindBankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PROTO_BindBankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(wsubcommandid_, dwresultcode_);
    if (has_szdescribestring()) {
      if (szdescribestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szdescribestring_->clear();
      }
    }
    if (has_szbankname()) {
      if (szbankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szbankname_->clear();
      }
    }
    if (has_szbankcardnum()) {
      if (szbankcardnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szbankcardnum_->clear();
      }
    }
    if (has_szaccountholder()) {
      if (szaccountholder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szaccountholder_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_BindBankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_BindBankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 wSubCommandID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wsubcommandid_)));
          set_has_wsubcommandid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dwResultCode;
        break;
      }

      // required int64 dwResultCode = 2;
      case 2: {
        if (tag == 16) {
         parse_dwResultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwresultcode_)));
          set_has_dwresultcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_szDescribeString;
        break;
      }

      // required string szDescribeString = 3;
      case 3: {
        if (tag == 26) {
         parse_szDescribeString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdescribestring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_szBankName;
        break;
      }

      // required string szBankName = 4;
      case 4: {
        if (tag == 34) {
         parse_szBankName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szbankname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_szBankCardNum;
        break;
      }

      // required string szBankCardNum = 5;
      case 5: {
        if (tag == 42) {
         parse_szBankCardNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szbankcardnum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_szAccountHolder;
        break;
      }

      // required string szAccountHolder = 6;
      case 6: {
        if (tag == 50) {
         parse_szAccountHolder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szaccountholder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_BindBankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_BindBankInfo)
  return false;
#undef DO_
}

void PROTO_BindBankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_BindBankInfo)
  // required int64 wSubCommandID = 1;
  if (has_wsubcommandid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->wsubcommandid(), output);
  }

  // required int64 dwResultCode = 2;
  if (has_dwresultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dwresultcode(), output);
  }

  // required string szDescribeString = 3;
  if (has_szdescribestring()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szdescribestring(), output);
  }

  // required string szBankName = 4;
  if (has_szbankname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->szbankname(), output);
  }

  // required string szBankCardNum = 5;
  if (has_szbankcardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->szbankcardnum(), output);
  }

  // required string szAccountHolder = 6;
  if (has_szaccountholder()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->szaccountholder(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_BindBankInfo)
}

int PROTO_BindBankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 wSubCommandID = 1;
    if (has_wsubcommandid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wsubcommandid());
    }

    // required int64 dwResultCode = 2;
    if (has_dwresultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwresultcode());
    }

    // required string szDescribeString = 3;
    if (has_szdescribestring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szdescribestring());
    }

    // required string szBankName = 4;
    if (has_szbankname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szbankname());
    }

    // required string szBankCardNum = 5;
    if (has_szbankcardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szbankcardnum());
    }

    // required string szAccountHolder = 6;
    if (has_szaccountholder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szaccountholder());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_BindBankInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_BindBankInfo*>(&from));
}

void PROTO_BindBankInfo::MergeFrom(const PROTO_BindBankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wsubcommandid()) {
      set_wsubcommandid(from.wsubcommandid());
    }
    if (from.has_dwresultcode()) {
      set_dwresultcode(from.dwresultcode());
    }
    if (from.has_szdescribestring()) {
      set_szdescribestring(from.szdescribestring());
    }
    if (from.has_szbankname()) {
      set_szbankname(from.szbankname());
    }
    if (from.has_szbankcardnum()) {
      set_szbankcardnum(from.szbankcardnum());
    }
    if (from.has_szaccountholder()) {
      set_szaccountholder(from.szaccountholder());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_BindBankInfo::CopyFrom(const PROTO_BindBankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_BindBankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PROTO_BindBankInfo::Swap(PROTO_BindBankInfo* other) {
  if (other != this) {
    std::swap(wsubcommandid_, other->wsubcommandid_);
    std::swap(dwresultcode_, other->dwresultcode_);
    std::swap(szdescribestring_, other->szdescribestring_);
    std::swap(szbankname_, other->szbankname_);
    std::swap(szbankcardnum_, other->szbankcardnum_);
    std::swap(szaccountholder_, other->szaccountholder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_BindBankInfo::GetTypeName() const {
  return "LogonServer.PROTO_BindBankInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_BindZFBInfo::kWSubCommandIDFieldNumber;
const int PROTO_BindZFBInfo::kDwResultCodeFieldNumber;
const int PROTO_BindZFBInfo::kSzDescribeStringFieldNumber;
const int PROTO_BindZFBInfo::kSzZFBNameFieldNumber;
const int PROTO_BindZFBInfo::kSzNickNameFieldNumber;
#endif  // !_MSC_VER

PROTO_BindZFBInfo::PROTO_BindZFBInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_BindZFBInfo)
}

void PROTO_BindZFBInfo::InitAsDefaultInstance() {
}

PROTO_BindZFBInfo::PROTO_BindZFBInfo(const PROTO_BindZFBInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_BindZFBInfo)
}

void PROTO_BindZFBInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wsubcommandid_ = GOOGLE_LONGLONG(0);
  dwresultcode_ = GOOGLE_LONGLONG(0);
  szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szzfbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_BindZFBInfo::~PROTO_BindZFBInfo() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_BindZFBInfo)
  SharedDtor();
}

void PROTO_BindZFBInfo::SharedDtor() {
  if (szdescribestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szdescribestring_;
  }
  if (szzfbname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szzfbname_;
  }
  if (sznickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sznickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_BindZFBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_BindZFBInfo& PROTO_BindZFBInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_BindZFBInfo* PROTO_BindZFBInfo::default_instance_ = NULL;

PROTO_BindZFBInfo* PROTO_BindZFBInfo::New() const {
  return new PROTO_BindZFBInfo;
}

void PROTO_BindZFBInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PROTO_BindZFBInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(wsubcommandid_, dwresultcode_);
    if (has_szdescribestring()) {
      if (szdescribestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szdescribestring_->clear();
      }
    }
    if (has_szzfbname()) {
      if (szzfbname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szzfbname_->clear();
      }
    }
    if (has_sznickname()) {
      if (sznickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sznickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_BindZFBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_BindZFBInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 wSubCommandID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wsubcommandid_)));
          set_has_wsubcommandid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dwResultCode;
        break;
      }

      // required int64 dwResultCode = 2;
      case 2: {
        if (tag == 16) {
         parse_dwResultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwresultcode_)));
          set_has_dwresultcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_szDescribeString;
        break;
      }

      // required string szDescribeString = 3;
      case 3: {
        if (tag == 26) {
         parse_szDescribeString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdescribestring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_szZFBName;
        break;
      }

      // required string szZFBName = 4;
      case 4: {
        if (tag == 34) {
         parse_szZFBName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szzfbname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_szNickName;
        break;
      }

      // required string szNickName = 5;
      case 5: {
        if (tag == 42) {
         parse_szNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sznickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_BindZFBInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_BindZFBInfo)
  return false;
#undef DO_
}

void PROTO_BindZFBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_BindZFBInfo)
  // required int64 wSubCommandID = 1;
  if (has_wsubcommandid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->wsubcommandid(), output);
  }

  // required int64 dwResultCode = 2;
  if (has_dwresultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dwresultcode(), output);
  }

  // required string szDescribeString = 3;
  if (has_szdescribestring()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szdescribestring(), output);
  }

  // required string szZFBName = 4;
  if (has_szzfbname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->szzfbname(), output);
  }

  // required string szNickName = 5;
  if (has_sznickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sznickname(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_BindZFBInfo)
}

int PROTO_BindZFBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 wSubCommandID = 1;
    if (has_wsubcommandid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wsubcommandid());
    }

    // required int64 dwResultCode = 2;
    if (has_dwresultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwresultcode());
    }

    // required string szDescribeString = 3;
    if (has_szdescribestring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szdescribestring());
    }

    // required string szZFBName = 4;
    if (has_szzfbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szzfbname());
    }

    // required string szNickName = 5;
    if (has_sznickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sznickname());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_BindZFBInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_BindZFBInfo*>(&from));
}

void PROTO_BindZFBInfo::MergeFrom(const PROTO_BindZFBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wsubcommandid()) {
      set_wsubcommandid(from.wsubcommandid());
    }
    if (from.has_dwresultcode()) {
      set_dwresultcode(from.dwresultcode());
    }
    if (from.has_szdescribestring()) {
      set_szdescribestring(from.szdescribestring());
    }
    if (from.has_szzfbname()) {
      set_szzfbname(from.szzfbname());
    }
    if (from.has_sznickname()) {
      set_sznickname(from.sznickname());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_BindZFBInfo::CopyFrom(const PROTO_BindZFBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_BindZFBInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PROTO_BindZFBInfo::Swap(PROTO_BindZFBInfo* other) {
  if (other != this) {
    std::swap(wsubcommandid_, other->wsubcommandid_);
    std::swap(dwresultcode_, other->dwresultcode_);
    std::swap(szdescribestring_, other->szdescribestring_);
    std::swap(szzfbname_, other->szzfbname_);
    std::swap(sznickname_, other->sznickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_BindZFBInfo::GetTypeName() const {
  return "LogonServer.PROTO_BindZFBInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_RequestMail::kDwUserIDFieldNumber;
#endif  // !_MSC_VER

PROTO_RequestMail::PROTO_RequestMail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_RequestMail)
}

void PROTO_RequestMail::InitAsDefaultInstance() {
}

PROTO_RequestMail::PROTO_RequestMail(const PROTO_RequestMail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_RequestMail)
}

void PROTO_RequestMail::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_RequestMail::~PROTO_RequestMail() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_RequestMail)
  SharedDtor();
}

void PROTO_RequestMail::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_RequestMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_RequestMail& PROTO_RequestMail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_RequestMail* PROTO_RequestMail::default_instance_ = NULL;

PROTO_RequestMail* PROTO_RequestMail::New() const {
  return new PROTO_RequestMail;
}

void PROTO_RequestMail::Clear() {
  dwuserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_RequestMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_RequestMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwUserID = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_RequestMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_RequestMail)
  return false;
#undef DO_
}

void PROTO_RequestMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_RequestMail)
  // required int64 dwUserID = 2;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dwuserid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_RequestMail)
}

int PROTO_RequestMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwUserID = 2;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_RequestMail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_RequestMail*>(&from));
}

void PROTO_RequestMail::MergeFrom(const PROTO_RequestMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_RequestMail::CopyFrom(const PROTO_RequestMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_RequestMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PROTO_RequestMail::Swap(PROTO_RequestMail* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_RequestMail::GetTypeName() const {
  return "LogonServer.PROTO_RequestMail";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_ReadDeleteMail::kDwUserIDFieldNumber;
const int PROTO_ReadDeleteMail::kDwOpenTypeFieldNumber;
const int PROTO_ReadDeleteMail::kDwMailIndexFieldNumber;
#endif  // !_MSC_VER

PROTO_ReadDeleteMail::PROTO_ReadDeleteMail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_ReadDeleteMail)
}

void PROTO_ReadDeleteMail::InitAsDefaultInstance() {
}

PROTO_ReadDeleteMail::PROTO_ReadDeleteMail(const PROTO_ReadDeleteMail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_ReadDeleteMail)
}

void PROTO_ReadDeleteMail::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_LONGLONG(0);
  dwopentype_ = GOOGLE_LONGLONG(0);
  dwmailindex_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_ReadDeleteMail::~PROTO_ReadDeleteMail() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_ReadDeleteMail)
  SharedDtor();
}

void PROTO_ReadDeleteMail::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_ReadDeleteMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_ReadDeleteMail& PROTO_ReadDeleteMail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_ReadDeleteMail* PROTO_ReadDeleteMail::default_instance_ = NULL;

PROTO_ReadDeleteMail* PROTO_ReadDeleteMail::New() const {
  return new PROTO_ReadDeleteMail;
}

void PROTO_ReadDeleteMail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PROTO_ReadDeleteMail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dwuserid_, dwmailindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_ReadDeleteMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_ReadDeleteMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwUserID = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dwOpenType;
        break;
      }

      // required int64 dwOpenType = 3;
      case 3: {
        if (tag == 24) {
         parse_dwOpenType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwopentype_)));
          set_has_dwopentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dwMailIndex;
        break;
      }

      // required int64 dwMailIndex = 4;
      case 4: {
        if (tag == 32) {
         parse_dwMailIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwmailindex_)));
          set_has_dwmailindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_ReadDeleteMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_ReadDeleteMail)
  return false;
#undef DO_
}

void PROTO_ReadDeleteMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_ReadDeleteMail)
  // required int64 dwUserID = 2;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dwuserid(), output);
  }

  // required int64 dwOpenType = 3;
  if (has_dwopentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dwopentype(), output);
  }

  // required int64 dwMailIndex = 4;
  if (has_dwmailindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->dwmailindex(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_ReadDeleteMail)
}

int PROTO_ReadDeleteMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwUserID = 2;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

    // required int64 dwOpenType = 3;
    if (has_dwopentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwopentype());
    }

    // required int64 dwMailIndex = 4;
    if (has_dwmailindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwmailindex());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_ReadDeleteMail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_ReadDeleteMail*>(&from));
}

void PROTO_ReadDeleteMail::MergeFrom(const PROTO_ReadDeleteMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_dwopentype()) {
      set_dwopentype(from.dwopentype());
    }
    if (from.has_dwmailindex()) {
      set_dwmailindex(from.dwmailindex());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_ReadDeleteMail::CopyFrom(const PROTO_ReadDeleteMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_ReadDeleteMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PROTO_ReadDeleteMail::Swap(PROTO_ReadDeleteMail* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(dwopentype_, other->dwopentype_);
    std::swap(dwmailindex_, other->dwmailindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_ReadDeleteMail::GetTypeName() const {
  return "LogonServer.PROTO_ReadDeleteMail";
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRequestMail::kDwMailIndexFieldNumber;
const int ProtoRequestMail::kSzMailContentFieldNumber;
#endif  // !_MSC_VER

ProtoRequestMail::ProtoRequestMail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.ProtoRequestMail)
}

void ProtoRequestMail::InitAsDefaultInstance() {
}

ProtoRequestMail::ProtoRequestMail(const ProtoRequestMail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.ProtoRequestMail)
}

void ProtoRequestMail::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dwmailindex_ = GOOGLE_LONGLONG(0);
  szmailcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRequestMail::~ProtoRequestMail() {
  // @@protoc_insertion_point(destructor:LogonServer.ProtoRequestMail)
  SharedDtor();
}

void ProtoRequestMail::SharedDtor() {
  if (szmailcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szmailcontent_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ProtoRequestMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoRequestMail& ProtoRequestMail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

ProtoRequestMail* ProtoRequestMail::default_instance_ = NULL;

ProtoRequestMail* ProtoRequestMail::New() const {
  return new ProtoRequestMail;
}

void ProtoRequestMail::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    dwmailindex_ = GOOGLE_LONGLONG(0);
    if (has_szmailcontent()) {
      if (szmailcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szmailcontent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ProtoRequestMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.ProtoRequestMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwMailIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwmailindex_)));
          set_has_dwmailindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szMailContent;
        break;
      }

      // required string szMailContent = 2;
      case 2: {
        if (tag == 18) {
         parse_szMailContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szmailcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.ProtoRequestMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.ProtoRequestMail)
  return false;
#undef DO_
}

void ProtoRequestMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.ProtoRequestMail)
  // required int64 dwMailIndex = 1;
  if (has_dwmailindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwmailindex(), output);
  }

  // required string szMailContent = 2;
  if (has_szmailcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szmailcontent(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.ProtoRequestMail)
}

int ProtoRequestMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwMailIndex = 1;
    if (has_dwmailindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwmailindex());
    }

    // required string szMailContent = 2;
    if (has_szmailcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szmailcontent());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRequestMail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoRequestMail*>(&from));
}

void ProtoRequestMail::MergeFrom(const ProtoRequestMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwmailindex()) {
      set_dwmailindex(from.dwmailindex());
    }
    if (from.has_szmailcontent()) {
      set_szmailcontent(from.szmailcontent());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ProtoRequestMail::CopyFrom(const ProtoRequestMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRequestMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProtoRequestMail::Swap(ProtoRequestMail* other) {
  if (other != this) {
    std::swap(dwmailindex_, other->dwmailindex_);
    std::swap(szmailcontent_, other->szmailcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ProtoRequestMail::GetTypeName() const {
  return "LogonServer.ProtoRequestMail";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_RequestMailToal::kDwUserIDFieldNumber;
const int PROTO_RequestMailToal::kStRequestMailFieldNumber;
#endif  // !_MSC_VER

PROTO_RequestMailToal::PROTO_RequestMailToal()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_RequestMailToal)
}

void PROTO_RequestMailToal::InitAsDefaultInstance() {
}

PROTO_RequestMailToal::PROTO_RequestMailToal(const PROTO_RequestMailToal& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_RequestMailToal)
}

void PROTO_RequestMailToal::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_RequestMailToal::~PROTO_RequestMailToal() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_RequestMailToal)
  SharedDtor();
}

void PROTO_RequestMailToal::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_RequestMailToal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_RequestMailToal& PROTO_RequestMailToal::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_RequestMailToal* PROTO_RequestMailToal::default_instance_ = NULL;

PROTO_RequestMailToal* PROTO_RequestMailToal::New() const {
  return new PROTO_RequestMailToal;
}

void PROTO_RequestMailToal::Clear() {
  dwuserid_ = GOOGLE_LONGLONG(0);
  strequestmail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_RequestMailToal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_RequestMailToal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stRequestMail;
        break;
      }

      // repeated .LogonServer.ProtoRequestMail stRequestMail = 2;
      case 2: {
        if (tag == 18) {
         parse_stRequestMail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strequestmail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stRequestMail;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_RequestMailToal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_RequestMailToal)
  return false;
#undef DO_
}

void PROTO_RequestMailToal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_RequestMailToal)
  // required int64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwuserid(), output);
  }

  // repeated .LogonServer.ProtoRequestMail stRequestMail = 2;
  for (int i = 0; i < this->strequestmail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->strequestmail(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_RequestMailToal)
}

int PROTO_RequestMailToal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

  }
  // repeated .LogonServer.ProtoRequestMail stRequestMail = 2;
  total_size += 1 * this->strequestmail_size();
  for (int i = 0; i < this->strequestmail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strequestmail(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_RequestMailToal::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_RequestMailToal*>(&from));
}

void PROTO_RequestMailToal::MergeFrom(const PROTO_RequestMailToal& from) {
  GOOGLE_CHECK_NE(&from, this);
  strequestmail_.MergeFrom(from.strequestmail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_RequestMailToal::CopyFrom(const PROTO_RequestMailToal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_RequestMailToal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->strequestmail())) return false;
  return true;
}

void PROTO_RequestMailToal::Swap(PROTO_RequestMailToal* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    strequestmail_.Swap(&other->strequestmail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_RequestMailToal::GetTypeName() const {
  return "LogonServer.PROTO_RequestMailToal";
}


// ===================================================================

#ifndef _MSC_VER
const int PROTO_ReadDeleteMailToal::kDwUserIDFieldNumber;
const int PROTO_ReadDeleteMailToal::kDwOpenTypeFieldNumber;
const int PROTO_ReadDeleteMailToal::kDwResultCodeFieldNumber;
const int PROTO_ReadDeleteMailToal::kStRequestMailFieldNumber;
#endif  // !_MSC_VER

PROTO_ReadDeleteMailToal::PROTO_ReadDeleteMailToal()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonServer.PROTO_ReadDeleteMailToal)
}

void PROTO_ReadDeleteMailToal::InitAsDefaultInstance() {
}

PROTO_ReadDeleteMailToal::PROTO_ReadDeleteMailToal(const PROTO_ReadDeleteMailToal& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogonServer.PROTO_ReadDeleteMailToal)
}

void PROTO_ReadDeleteMailToal::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = GOOGLE_LONGLONG(0);
  dwopentype_ = GOOGLE_LONGLONG(0);
  dwresultcode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PROTO_ReadDeleteMailToal::~PROTO_ReadDeleteMailToal() {
  // @@protoc_insertion_point(destructor:LogonServer.PROTO_ReadDeleteMailToal)
  SharedDtor();
}

void PROTO_ReadDeleteMailToal::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PROTO_ReadDeleteMailToal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PROTO_ReadDeleteMailToal& PROTO_ReadDeleteMailToal::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LogonServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LogonServer_2eproto();
#endif
  return *default_instance_;
}

PROTO_ReadDeleteMailToal* PROTO_ReadDeleteMailToal::default_instance_ = NULL;

PROTO_ReadDeleteMailToal* PROTO_ReadDeleteMailToal::New() const {
  return new PROTO_ReadDeleteMailToal;
}

void PROTO_ReadDeleteMailToal::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PROTO_ReadDeleteMailToal*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dwuserid_, dwresultcode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  strequestmail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PROTO_ReadDeleteMailToal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LogonServer.PROTO_ReadDeleteMailToal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwUserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dwOpenType;
        break;
      }

      // required int64 dwOpenType = 2;
      case 2: {
        if (tag == 16) {
         parse_dwOpenType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwopentype_)));
          set_has_dwopentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dwResultCode;
        break;
      }

      // required int64 dwResultCode = 3;
      case 3: {
        if (tag == 24) {
         parse_dwResultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwresultcode_)));
          set_has_dwresultcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stRequestMail;
        break;
      }

      // repeated .LogonServer.ProtoRequestMail stRequestMail = 4;
      case 4: {
        if (tag == 34) {
         parse_stRequestMail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strequestmail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stRequestMail;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonServer.PROTO_ReadDeleteMailToal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonServer.PROTO_ReadDeleteMailToal)
  return false;
#undef DO_
}

void PROTO_ReadDeleteMailToal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonServer.PROTO_ReadDeleteMailToal)
  // required int64 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwuserid(), output);
  }

  // required int64 dwOpenType = 2;
  if (has_dwopentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dwopentype(), output);
  }

  // required int64 dwResultCode = 3;
  if (has_dwresultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dwresultcode(), output);
  }

  // repeated .LogonServer.ProtoRequestMail stRequestMail = 4;
  for (int i = 0; i < this->strequestmail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->strequestmail(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LogonServer.PROTO_ReadDeleteMailToal)
}

int PROTO_ReadDeleteMailToal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwuserid());
    }

    // required int64 dwOpenType = 2;
    if (has_dwopentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwopentype());
    }

    // required int64 dwResultCode = 3;
    if (has_dwresultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwresultcode());
    }

  }
  // repeated .LogonServer.ProtoRequestMail stRequestMail = 4;
  total_size += 1 * this->strequestmail_size();
  for (int i = 0; i < this->strequestmail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strequestmail(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PROTO_ReadDeleteMailToal::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PROTO_ReadDeleteMailToal*>(&from));
}

void PROTO_ReadDeleteMailToal::MergeFrom(const PROTO_ReadDeleteMailToal& from) {
  GOOGLE_CHECK_NE(&from, this);
  strequestmail_.MergeFrom(from.strequestmail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_dwopentype()) {
      set_dwopentype(from.dwopentype());
    }
    if (from.has_dwresultcode()) {
      set_dwresultcode(from.dwresultcode());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PROTO_ReadDeleteMailToal::CopyFrom(const PROTO_ReadDeleteMailToal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_ReadDeleteMailToal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->strequestmail())) return false;
  return true;
}

void PROTO_ReadDeleteMailToal::Swap(PROTO_ReadDeleteMailToal* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(dwopentype_, other->dwopentype_);
    std::swap(dwresultcode_, other->dwresultcode_);
    strequestmail_.Swap(&other->strequestmail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PROTO_ReadDeleteMailToal::GetTypeName() const {
  return "LogonServer.PROTO_ReadDeleteMailToal";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LogonServer

// @@protoc_insertion_point(global_scope)
