#include "StdAfx.h"
#include "TableFrame.h"
#include "StockManager.h"
#include "DataBasePacket.h"
#include "AttemperEngineSink.h"

//////////////////////////////////////////////////////////////////////////////////

//断线定义
#define IDI_OFF_LINE				(TIME_TABLE_SINK_RANGE+1)			//断线标识

#define IDI_USER_READY_DETECT		(TIME_TABLE_SINK_RANGE+3)			//准备检测
#define MAX_OFF_LINE				3									//断线次数
#define TIME_OFF_LINE				60000L								//断线时间

#define IDI_ANDROID_STAND_UP		(TIME_TABLE_SINK_RANGE+4)			//机器人离开

//////////////////////////////////////////////////////////////////////////////////

//组件变量
CStockManager						g_StockManager;						//库存管理

//游戏记录
CGameScoreRecordArray				CTableFrame::m_GameScoreRecordBuffer;
CFishRecordArray					CTableFrame::m_FishRecordBuffer;

TCHAR	g_szFilePath[MAX_PATH];
//////////////////////////////////////////////////////////////////////////////////

//构造函数
CTableFrame::CTableFrame()
{
	//固有属性
	m_wTableID=0;
	m_wChairCount=0;
	m_cbStartMode=START_MODE_ALL_READY;

	//标志变量
	m_bGameStarted=false;
	m_bDrawStarted=false;
	m_bTableStarted=false;
	ZeroMemory(m_bAllowLookon,sizeof(m_bAllowLookon));
	ZeroMemory(m_lFrozenedScore,sizeof(m_lFrozenedScore));
	ZeroMemory(&m_RankTopList,sizeof(m_RankTopList));

	//游戏变量
	m_lCellScore=0L;
	m_cbGameStatus=GAME_STATUS_FREE;

	//时间变量
	m_dwDrawStartTime=0L;
	ZeroMemory(&m_SystemTimeStart,sizeof(m_SystemTimeStart));

	m_wDrawCount=0;

	//动态属性
	m_dwTableOwnerID=0L;
	ZeroMemory(m_szEnterPassword,sizeof(m_szEnterPassword));

	//断线变量
	ZeroMemory(m_wOffLineCount,sizeof(m_wOffLineCount));
	ZeroMemory(m_dwOffLineTime,sizeof(m_dwOffLineTime));

	//配置信息
	m_pGameParameter=NULL;
	m_pGameServiceAttrib=NULL;
	m_pGameServiceOption=NULL;

	//组件接口
	m_pITimerEngine=NULL;
	m_pITableFrameSink=NULL;
	m_pIMainServiceFrame=NULL;
	m_pIAndroidUserManager=NULL;

	//扩张接口
	m_pITableUserAction=NULL;
	m_pITableUserRequest=NULL;
	m_pIMatchTableAction=NULL;

	//数据接口
	m_pIKernelDataBaseEngine=NULL;
	m_pIRecordDataBaseEngine=NULL;

	//比赛接口
	m_pIGameMatchSink=NULL;

	//用户数组
	ZeroMemory(m_TableUserItemArray,sizeof(m_TableUserItemArray));

	//日志设定
	m_fileLog.SetRoot(TEXT("./SLog/Ox/房间%d/桌子%d/"), 11111, 22222);
}

//析构函数
CTableFrame::~CTableFrame()
{
	//释放对象
	SafeRelease(m_pITableFrameSink);
	SafeRelease(m_pIMatchTableAction);

	if (m_pIGameMatchSink!=NULL)
	{
		SafeDelete(m_pIGameMatchSink);
	}

	return;
}

//接口查询
VOID * CTableFrame::QueryInterface(REFGUID Guid, DWORD dwQueryVer)
{
	QUERYINTERFACE(ITableFrame,Guid,dwQueryVer);
	QUERYINTERFACE_IUNKNOWNEX(ITableFrame,Guid,dwQueryVer);
	return NULL;
}

//开始游戏
bool CTableFrame::StartGame()
{
	//游戏状态
	ASSERT(m_bDrawStarted==false);
	if (m_bDrawStarted==true) return false;

	//保存变量
	bool bGameStarted=m_bGameStarted;
	bool bTableStarted=m_bTableStarted;

	//设置状态
	m_bGameStarted=true;
	m_bDrawStarted=true;
	m_bTableStarted=true;

	//开始时间
	GetLocalTime(&m_SystemTimeStart);
	m_dwDrawStartTime=(DWORD)time(NULL);

	//I_TRACE(TEXT("桌子[%d],开始游戏"),m_wTableID);

	//开始设置
	if (bGameStarted==false)
	{
		//状态变量
		ZeroMemory(m_wOffLineCount,sizeof(m_wOffLineCount));
		ZeroMemory(m_dwOffLineTime,sizeof(m_dwOffLineTime));

		//设置用户
		for (WORD i=0;i<m_wChairCount;i++)
		{
			//获取用户
			IServerUserItem * pIServerUserItem=GetTableUserItem(i);

			//设置用户
			if (pIServerUserItem!=NULL)
			{
				//锁定元宝
				if (m_pGameServiceOption->lServiceScore>0L)
				{
					m_lFrozenedScore[i]=m_pGameServiceOption->lServiceScore;

					pIServerUserItem->FrozenedUserScore(m_pGameServiceOption->lServiceScore);
				}

				//设置状态
				BYTE cbUserStatus=pIServerUserItem->GetUserStatus();
				if ((cbUserStatus!=US_OFFLINE)&&(cbUserStatus!=US_PLAYING)) pIServerUserItem->SetUserStatus(US_PLAYING,m_wTableID,i);

				I_TRACE(TEXT("游戏开始 机器[%d] 用户[%d] 桌椅[%d-%d] 状态[%d]"),pIServerUserItem->IsAndroidUser(),pIServerUserItem->GetUserID(),pIServerUserItem->GetTableID(),pIServerUserItem->GetChairID(),pIServerUserItem->GetUserStatus());

			}
		}

		//发送状态
		if (bTableStarted!=m_bTableStarted) SendTableStatus();

	}

	//通知事件
	ASSERT_ERR(m_pITableFrameSink!=NULL);
	if (m_pITableFrameSink!=NULL) m_pITableFrameSink->OnEventGameStart();

	//比赛通知
	if(m_pIGameMatchSink!=NULL) m_pIGameMatchSink->OnEventGameStart(this, m_wChairCount);

	return true;
}

//解散游戏
bool CTableFrame::DismissGame()
{
	ConcludeGame(0);
 	IServerUserItem* pIServerUserItem=NULL;
 	BYTE cbUserStatus=US_NULL;
 	for (WORD i=0;i<m_wChairCount;i++)
 	{
 		 pIServerUserItem=GetTableUserItem(i);
 		if ( pIServerUserItem != NULL )
 		{
			
 			PerformStandUpAction(pIServerUserItem);
			if ( pIServerUserItem->IsAndroidUser() )
			{
				CAttemperEngineSink * pAttemperEngineSink = (CAttemperEngineSink *)m_pIMainServiceFrame;
				tagBindParameter * pBindParameter = pAttemperEngineSink->GetBindParameter(pIServerUserItem->GetBindIndex());
				if ( pBindParameter )
				m_pIAndroidUserManager->DeleteAndroidUserItem(pBindParameter->dwSocketID);
				continue;
			}
			
 			pIServerUserItem->SetUserStatus(US_NULL,INVALID_TABLE,INVALID_CHAIR);
 		}
 	}

	return false;
}

//结束游戏
bool CTableFrame::ConcludeGame(BYTE cbGameStatus)
{
	//效验状态
	ASSERT(m_bGameStarted==true);
	if (m_bGameStarted==false) return false;

	//保存变量
	bool bDrawStarted=m_bDrawStarted;

	//设置状态
	m_bDrawStarted=false;
	m_cbGameStatus=cbGameStatus;
	m_bGameStarted=(cbGameStatus>=GAME_STATUS_PLAY)?true:false;


	m_wDrawCount++;

	//通知比赛
	if(m_pIGameMatchSink!=NULL) m_pIGameMatchSink->OnEventGameEnd(this,0, NULL, cbGameStatus);

	//游戏记录
	if (bDrawStarted==true)
	{
		//写入记录
		if (CServerRule::IsRecordGameScore(m_pGameServiceOption->dwServerRule)==true)
		{
			//变量定义
			DBR_GR_GameScoreRecord GameScoreRecord;
			ZeroMemory(&GameScoreRecord,sizeof(GameScoreRecord));

			//设置变量
			GameScoreRecord.wTableID=m_wTableID;
			GameScoreRecord.dwPlayTimeCount=(bDrawStarted==true)?(DWORD)time(NULL)-m_dwDrawStartTime:0; //本局游戏时间

			//游戏时间
			GameScoreRecord.SystemTimeStart=m_SystemTimeStart;
			GetLocalTime(&GameScoreRecord.SystemTimeConclude);

			//用户积分
			for (INT_PTR i=0;i<m_GameScoreRecordActive.GetCount();i++)
			{
				//获取对象
				ASSERT_ERR(m_GameScoreRecordActive[i]!=NULL);
				tagGameScoreRecord * pGameScoreRecord=m_GameScoreRecordActive[i];

				//用户数目
				if (pGameScoreRecord->cbAndroid==FALSE)
				{
					GameScoreRecord.wUserCount++;
				}
				else
				{
					GameScoreRecord.wAndroidCount++;
				}

				//奖牌统计
				GameScoreRecord.dwUserMemal+=pGameScoreRecord->dwUserMemal;

				//统计信息
				if (pGameScoreRecord->cbAndroid==FALSE) //机器人不入库
				{
					//GameScoreRecord.lWasteCount-=(pGameScoreRecord->lScore+pGameScoreRecord->lRevenue);
					//不包括税收
					GameScoreRecord.lWasteCount -= pGameScoreRecord->lScore;
					GameScoreRecord.lRevenueCount+=pGameScoreRecord->lRevenue;
				}

				//成绩信息
				if (GameScoreRecord.wRecordCount<CountArray(GameScoreRecord.GameScoreRecord))
				{
					WORD wIndex=GameScoreRecord.wRecordCount++;
					CopyMemory(&GameScoreRecord.GameScoreRecord[wIndex],pGameScoreRecord,sizeof(tagGameScoreRecord));
				}
			}

			//投递数据
			if(GameScoreRecord.wUserCount > 0)
			{
				WORD wHeadSize=sizeof(GameScoreRecord)-sizeof(GameScoreRecord.GameScoreRecord);
				WORD wDataSize=sizeof(GameScoreRecord.GameScoreRecord[0])*GameScoreRecord.wRecordCount;
				m_pIRecordDataBaseEngine->PostDataBaseRequest(DBR_GR_GAME_SCORE_RECORD,0,&GameScoreRecord,wHeadSize+wDataSize);
			}
		}

		//清理记录
		if (m_GameScoreRecordActive.GetCount()>0L)
		{
			m_GameScoreRecordBuffer.Append(m_GameScoreRecordActive);
			m_GameScoreRecordActive.RemoveAll();
		}
	}

	//结束设置
	if (m_bGameStarted==false)
	{
		//变量定义
		bool bOffLineWait=false;

		//设置用户
		for (WORD i=0;i<m_wChairCount;i++)
		{
			//获取用户
			IServerUserItem * pIServerUserItem=GetTableUserItem(i);

			if ( pIServerUserItem == NULL ) continue;

			//解锁元宝
			if (m_lFrozenedScore[i] != 0L)
			{
				pIServerUserItem->UnFrozenedUserScore(m_lFrozenedScore[i]);

				m_lFrozenedScore[i] = 0L;
			}

			//判断掉线
			if (pIServerUserItem->GetUserStatus() == US_OFFLINE || pIServerUserItem->IsClientReady() == false)
			{
				//断线处理
				bOffLineWait = true;
				I_TRACE(TEXT("游戏结束 玩家掉线请离房间 %s, TableID %d,Status %d"), pIServerUserItem->GetNickName(), pIServerUserItem->GetTableID(), pIServerUserItem->GetUserStatus());
				PerformStandUpAction(pIServerUserItem,FALSE);
				pIServerUserItem->SetUserStatus(US_NULL, INVALID_TABLE, INVALID_CHAIR);
			}
			else
			{
				bool bAllowAvertCheatMode = (CServerRule::IsAllowAvertCheatMode(m_pGameServiceOption->dwServerRule) && (m_pGameServiceAttrib->wChairCount < MAX_CHAIR));

				//机器处理
				if (pIServerUserItem->IsAndroidUser() == true)
				{
					if (m_pGameServiceAttrib->wChairCount < MAX_CHAIR)
					{
						if (bAllowAvertCheatMode)
						{
							ToSaveScore(pIServerUserItem);
							PerformStandUpAction(pIServerUserItem, FALSE);  //机器人起立不通知
						}
						else
							pIServerUserItem->SetUserStatus(US_SIT, m_wTableID, i); //百人游戏机器人坐下
					}
					else pIServerUserItem->SetUserStatus(US_SIT, m_wTableID, i); //百人游戏机器人坐下
				}
				else
				{
					if (m_pGameServiceOption->wKindID != KIND_FISH)
					{
						if (bAllowAvertCheatMode)
							PerformStandUpAction(pIServerUserItem, FALSE);  //真人起立不通知
						else
							pIServerUserItem->SetUserStatus(US_SIT, m_wTableID, i);
					}
				}
			}
		}

		//删除时间
		//if (bOffLineWait==true) KillGameTimer(IDI_OFF_LINE);
	}

	//重置桌子
	ASSERT_ERR(m_pITableFrameSink!=NULL);
	if (m_pITableFrameSink!=NULL) m_pITableFrameSink->RepositionSink();

	//踢出检测  百人游戏后面优化
	if (m_bGameStarted==false && m_pGameServiceOption->wServerType != GAME_GENRE_MATCH && m_pGameServiceAttrib->wChairCount >= MAX_CHAIR) //百人游戏不准备，游戏结束检测
	{
 		for (WORD i=0;i<m_wChairCount;i++)
 		{
 			//获取用户
 			if (m_TableUserItemArray[i]==NULL) continue;
 			IServerUserItem * pIServerUserItem=m_TableUserItemArray[i];

			if (pIServerUserItem->IsAndroidUser()==true && 
				pIServerUserItem->GetUserStatus()>=US_SIT &&
				pIServerUserItem->GetUserScore() <10000000)
			{
				//CAttemperEngineSink * pAttemperEngineSink = (CAttemperEngineSink *)m_pIMainServiceFrame;
				//tagBindParameter * pBindParameter = pAttemperEngineSink->GetBindParameter(pIServerUserItem->GetBindIndex());

				//先取钱再起立
				ToSaveScore(pIServerUserItem);
				//机器人钱不够删除机器人
				PerformStandUpAction(pIServerUserItem);

				//m_pIAndroidUserManager->DeleteAndroidUserItem(pBindParameter->dwSocketID);

				continue;
			}

 				if ((m_pGameServiceOption->lMinEnterScore!=0L)&&(pIServerUserItem->GetUserScore()<m_pGameServiceOption->lMinEnterScore))
 				{
 					//构造提示
 					TCHAR szDescribe[128]=TEXT("");
 					if (m_pGameServiceOption->wServerType&(GAME_GENRE_GOLD|GAME_GENRE_SCORE))
 					{
 						_sntprintf(szDescribe,CountArray(szDescribe),TEXT("亲爱的玩家，此游戏桌需要至少%0.2f金币，您携带的金币不够，不能游戏，请到银行取款后再进行游戏！"),double(m_pGameServiceOption->lMinEnterScore)/1000);
 
 					}		
 
//  					if (pIServerUserItem->IsAndroidUser()==true && pIServerUserItem->GetUserStatus()>=US_SIT)
//  					{
// 						CAttemperEngineSink * pAttemperEngineSink = (CAttemperEngineSink *)m_pIMainServiceFrame;
// 						tagBindParameter * pBindParameter = pAttemperEngineSink->GetBindParameter(pIServerUserItem->GetBindIndex());
// 
//  						//机器人钱不够删除机器人
//  						PerformStandUpAction(pIServerUserItem);
//  						
//  						m_pIAndroidUserManager->DeleteAndroidUserItem(pBindParameter->dwSocketID);
//  						
//  					}
//  					else 
 					{
							SendGameMessage(pIServerUserItem,szDescribe,SMT_CHAT|SMT_EJECT|SMT_CLOSE_GAME);
 					}
 
 					continue;
 				}
 			
		}
	}

	//结束桌子
	ConcludeTable();

	//发送状态
	SendTableStatus();

	//WORD wIndex = 3;
	//if (m_pGameServiceOption->wKindID == 215) wIndex = 8;
	//SetGameTimer(IDI_ANDROID_STAND_UP, wIndex *1000,1,0);

	return true;
}
//机器人存取款
void CTableFrame::ToSaveScore(IServerUserItem* pIServerUserItem)
{	
	tagUserInfo * pUserInfo=pIServerUserItem->GetUserInfo();
	if (pUserInfo == NULL) return;
	if (pIServerUserItem->IsAndroidUser() == false) return;
	if (  m_pGameServiceOption->wRoomType == 4  ) //试玩
	{
		pUserInfo->lScore = 500000;
	}
	else 
	{
		if (pUserInfo->lScore <= m_pGameServiceOption->lMinEnterScore)
		{
			pUserInfo->lScore += (long long)((float)rand() / 1000.0f + (float)(m_pGameServiceOption->lMinEnterScore) * 4.5);
			//pUserInfo->lScore = 1255000;
			I_TRACE(TEXT("[取款] 机器人[%d],UserID[%d],分数[%I64d],准入[%I64d]"), pIServerUserItem->IsAndroidUser(), pIServerUserItem->GetUserID(), pIServerUserItem->GetUserScore(), m_pGameServiceOption->lMinEnterScore);
		}
	}
	
}
//结束桌子
bool CTableFrame::ConcludeTable()
{
	//结束桌子
	if ((m_bGameStarted==false)&&(m_bTableStarted==true))
	{
		//人数判断
		WORD wTableUserCount=GetSitUserCount();
		if (wTableUserCount==0) m_bTableStarted=false;
		if (m_pGameServiceAttrib->wChairCount==MAX_CHAIR) m_bTableStarted=false;

		//模式判断
		if (m_cbStartMode==START_MODE_FULL_READY) m_bTableStarted=false;
		if (m_cbStartMode==START_MODE_PAIR_READY) m_bTableStarted=false;
		if (m_cbStartMode==START_MODE_ALL_READY) m_bTableStarted=false;
		if (m_cbStartMode==START_MODE_SYSTRM_BANKER) m_bTableStarted=false;		// 游戏结束，桌子状态也结束  ZZL
	}

	return true;
}
// 捕鱼写记录
bool CTableFrame::WriteFishRecord(WORD wChairID, tagFishRecordInfo & FishRecordInfo, BYTE WriteScore)
{
	//效验参数
	ASSERT_ERR((wChairID < m_wChairCount));
	if ((wChairID >= m_wChairCount)) return false;

	//获取用户
	ASSERT_ERR(GetTableUserItem(wChairID) != NULL);
	IServerUserItem * pIServerUserItem = GetTableUserItem(wChairID);

	//写入积分 
	if (pIServerUserItem != NULL)
	{
		//游戏记录
		if (CServerRule::IsRecordGameScore(m_pGameServiceOption->dwServerRule) == true)
		{
			//变量定义
			tagFishRecordInfo * pFishRecord = NULL;

			//查询库存
			if (m_FishRecordBuffer.GetCount() > 0L)
			{
				//获取对象
				INT_PTR nCount = m_FishRecordBuffer.GetCount();
				pFishRecord = m_FishRecordBuffer[nCount - 1];

				//删除对象
				m_FishRecordBuffer.RemoveAt(nCount - 1);
			}

			//创建对象
			if (pFishRecord == NULL)
			{
				try
				{
					//创建对象
					pFishRecord = new tagFishRecordInfo;
					if (pFishRecord == NULL) throw TEXT("游戏记录对象创建失败");
				}
				catch (...)
				{
					ASSERT_ERR(FALSE);
				}
			}

			//记录数据
			if (pFishRecord != NULL)
			{
				pFishRecord->dwUserID = FishRecordInfo.dwUserID;
				pFishRecord->dwRoomRatio = FishRecordInfo.dwRoomRatio;
				pFishRecord->dwBulletID = FishRecordInfo.dwBulletID;
				pFishRecord->dwBulletScore = FishRecordInfo.dwBulletScore;
				pFishRecord->dwFishID = FishRecordInfo.dwFishID;
				pFishRecord->dwFishType = FishRecordInfo.dwFishType;
				pFishRecord->dwFishScore = FishRecordInfo.dwFishScore;
				pFishRecord->dwRevenueScore = FishRecordInfo.dwRevenueScore;

				pFishRecord->dwSceneType = FishRecordInfo.dwSceneType;
				pFishRecord->dwScoreType = FishRecordInfo.dwScoreType;
				pFishRecord->dwBulletSum = FishRecordInfo.dwBulletSum;
				pFishRecord->dwBulletAllScore = FishRecordInfo.dwBulletAllScore;
				pFishRecord->dwCheckFishAllScore = FishRecordInfo.dwCheckFishAllScore;
				pFishRecord->dwScore = FishRecordInfo.dwScore;
				pFishRecord->dwStartScore = FishRecordInfo.dwStartScore;
				pFishRecord->dwEndScore = FishRecordInfo.dwEndScore;

				pFishRecord->stStartTiem = FishRecordInfo.stStartTiem;
				pFishRecord->stEndTiem = FishRecordInfo.stEndTiem;

				_sntprintf(pFishRecord->szGameDetails, CountArray(pFishRecord->szGameDetails),
					TEXT("%s"),FishRecordInfo.szGameDetails);

				//插入数据
				m_FishRecordActive.Add(pFishRecord);
			}


			//捕鱼游戏 即时写分
			if (WriteScore == 1 || m_FishRecordActive.GetCount() > 50)
			{
				//变量定义
				DBR_GP_GameFishRecord GameFishRecord;
				ZeroMemory(&GameFishRecord, sizeof(GameFishRecord));

				GameFishRecord.wTableID = m_wTableID;

				//用户积分
				for (INT_PTR i = 0; i < m_FishRecordActive.GetCount(); i++)
				{
					//获取对象
					ASSERT_ERR(m_FishRecordActive[i] != NULL);
					tagFishRecordInfo * pFishRecord = m_FishRecordActive[i];

					//成绩信息
					if (GameFishRecord.wRecordCount < CountArray(GameFishRecord.FishRecord))
					{
						WORD wIndex = GameFishRecord.wRecordCount++;
						CopyMemory(&GameFishRecord.FishRecord[wIndex], pFishRecord, sizeof(tagFishRecordInfo));
					}
				}

				//投递数据
				if (GameFishRecord.wRecordCount> 0)
				{
					WORD wHeadSize = sizeof(GameFishRecord) - sizeof(GameFishRecord.FishRecord);
					WORD wDataSize = sizeof(GameFishRecord.FishRecord[0])*GameFishRecord.wRecordCount;
					m_pIRecordDataBaseEngine->PostDataBaseRequest(DBR_GP_GAME_FISH_RECORD, 0, &GameFishRecord, wHeadSize + wDataSize);
				}
				//清理记录
				if (m_FishRecordActive.GetCount() > 0L)
				{
					m_FishRecordBuffer.Append(m_FishRecordActive);
					m_FishRecordActive.RemoveAll();
				}
			}
		}
	}
	

	return true;
}

// 子游戏 滚动消息触发
bool CTableFrame::GameScrollMessage(VOID * pData, WORD wDataSize)
{
	return m_pIRecordDataBaseEngine->PostDataBaseRequest(DBR_GP_GAME_SCROLL_MESSAGE, 0, pData, wDataSize);
}

//写入积分
bool CTableFrame::WriteUserScore(WORD wChairID, tagScoreInfo & ScoreInfo, BYTE WriteScore)
{
	//效验参数
	ASSERT_ERR((wChairID < m_wChairCount) && (ScoreInfo.cbType != SCORE_TYPE_NULL));
	if ((wChairID >= m_wChairCount) && (ScoreInfo.cbType == SCORE_TYPE_NULL)) return false;

	//获取用户
	ASSERT_ERR(GetTableUserItem(wChairID) != NULL);
	IServerUserItem * pIServerUserItem = GetTableUserItem(wChairID);
	TCHAR szMessage[128] = TEXT("");

	//写入积分 
	if (pIServerUserItem != NULL)
	{

		//游戏时间
		DWORD dwCurrentTime = (DWORD)time(NULL);
		DWORD dwPlayTimeCount = (m_bDrawStarted == true) ? dwCurrentTime - m_dwDrawStartTime : 0L;


		//写入积分
		if (WriteScore == 0)
			pIServerUserItem->WriteUserScore(ScoreInfo.lScore, m_pGameServiceOption->lMinEnterScore, ScoreInfo.lRevenue, 0, ScoreInfo.cbType, dwPlayTimeCount);

		//游戏记录
		if (m_pGameServiceOption->wKindID != 2016 && CServerRule::IsRecordGameScore(m_pGameServiceOption->dwServerRule) == true)
		{
			//变量定义
			tagGameScoreRecord * pGameScoreRecord = NULL;

			//查询库存
			if (m_GameScoreRecordBuffer.GetCount() > 0L)
			{
				//获取对象
				INT_PTR nCount = m_GameScoreRecordBuffer.GetCount();
				pGameScoreRecord = m_GameScoreRecordBuffer[nCount - 1];

				//删除对象
				m_GameScoreRecordBuffer.RemoveAt(nCount - 1);
			}

			//创建对象
			if (pGameScoreRecord == NULL)
			{
				try
				{
					//创建对象
					pGameScoreRecord = new tagGameScoreRecord;
					if (pGameScoreRecord == NULL) throw TEXT("游戏记录对象创建失败");
				}
				catch (...)
				{
					ASSERT_ERR(FALSE);
				}
			}

			//记录数据
			if (pGameScoreRecord != NULL)
			{
				//用户信息
				pGameScoreRecord->wChairID = wChairID;
				pGameScoreRecord->dwUserID = pIServerUserItem->GetUserID();
				pGameScoreRecord->cbAndroid = (pIServerUserItem->IsAndroidUser() ? TRUE : FALSE);

				//用户信息
				pGameScoreRecord->dwDBQuestID = pIServerUserItem->GetDBQuestID();
				pGameScoreRecord->dwInoutIndex = pIServerUserItem->GetInoutIndex();

				//成绩信息
				pGameScoreRecord->lScore = ScoreInfo.lScore;
				//lGrade作为当前分数
				pGameScoreRecord->lGrade = pIServerUserItem->GetUserScore();
				pGameScoreRecord->lRevenue = ScoreInfo.lRevenue;

				//附加信息
				pGameScoreRecord->dwUserMemal = pIServerUserItem->GetUserMedal();
				pGameScoreRecord->dwPlayTimeCount = dwPlayTimeCount;
				//SYSTEMTIME SystemTime;
				//GetLocalTime(&pGameScoreRecord->RecordDate);

				pGameScoreRecord->lAddScore = ScoreInfo.lAddScore;
				_sntprintf_s(pGameScoreRecord->TCardDate, MAX_PATH, TEXT("%s"), ScoreInfo.TCardDate);
				_sntprintf_s(pGameScoreRecord->TGameProce, MAX_PATH, TEXT("%s"), ScoreInfo.TGameProce);

				//机器人免税
				// 				if(pIServerUserItem->IsAndroidUser())
				// 				{
				// 					pGameScoreRecord->lScore += pGameScoreRecord->lRevenue;
				// 					pGameScoreRecord->lRevenue = 0L;
				// 				}

				//插入数据
				m_GameScoreRecordActive.Add(pGameScoreRecord);
			}


			//捕鱼游戏 即时写分
			if (m_pGameServiceOption->wKindID == 2016 &&
				(WriteScore == 0 || m_GameScoreRecordActive.GetCount() > 12))
			{
				//变量定义
				DBR_GR_GameScoreRecord GameScoreRecord;
				ZeroMemory(&GameScoreRecord, sizeof(GameScoreRecord));

				//设置变量
				GameScoreRecord.wTableID = m_wTableID;
				GameScoreRecord.dwPlayTimeCount = 0; //本局游戏时间

													 //游戏时间
				GameScoreRecord.SystemTimeStart = m_SystemTimeStart;
				GetLocalTime(&GameScoreRecord.SystemTimeConclude);

				//用户积分
				for (INT_PTR i = 0; i < m_GameScoreRecordActive.GetCount(); i++)
				{
					//获取对象
					ASSERT_ERR(m_GameScoreRecordActive[i] != NULL);
					tagGameScoreRecord * pGameScoreRecord = m_GameScoreRecordActive[i];

					//用户数目
					if (pGameScoreRecord->cbAndroid == FALSE)
					{
						GameScoreRecord.wUserCount++;
					}
					else
					{
						GameScoreRecord.wAndroidCount++;
					}

					//奖牌统计
					GameScoreRecord.dwUserMemal += pGameScoreRecord->dwUserMemal;

					//统计信息
					if (pGameScoreRecord->cbAndroid==FALSE)
					{
						GameScoreRecord.lWasteCount -= (pGameScoreRecord->lScore + pGameScoreRecord->lRevenue);
						GameScoreRecord.lRevenueCount += pGameScoreRecord->lRevenue;
					}

					//成绩信息
					if (GameScoreRecord.wRecordCount < CountArray(GameScoreRecord.GameScoreRecord))
					{
						WORD wIndex = GameScoreRecord.wRecordCount++;
						CopyMemory(&GameScoreRecord.GameScoreRecord[wIndex], pGameScoreRecord, sizeof(tagGameScoreRecord));
					}
				}

				//投递数据
				if (GameScoreRecord.wUserCount > 0)
				{
					WORD wHeadSize = sizeof(GameScoreRecord) - sizeof(GameScoreRecord.GameScoreRecord);
					WORD wDataSize = sizeof(GameScoreRecord.GameScoreRecord[0])*GameScoreRecord.wRecordCount;
					m_pIRecordDataBaseEngine->PostDataBaseRequest(DBR_GR_GAME_SCORE_RECORD, 0, &GameScoreRecord, wHeadSize + wDataSize);
				}
				//清理记录
				if (m_GameScoreRecordActive.GetCount() > 0L)
				{
					m_GameScoreRecordBuffer.Append(m_GameScoreRecordActive);
					m_GameScoreRecordActive.RemoveAll();
				}
			}
		}
	}
	else
	{
		//离开用户
		I_TRACE(TEXT("玩家内存个人信息丢失 bug!!!"));

		return false;
	}


	//广播消息
	if (szMessage[0] != 0)
	{
		//变量定义
		IServerUserItem * pISendUserItem = NULL;
		WORD wEnumIndex = 0;

		//游戏玩家
		for (WORD i = 0; i < m_wChairCount; i++)
		{
			//获取用户
			pISendUserItem = GetTableUserItem(i);
			if (pISendUserItem == NULL) continue;

			//发送消息
			SendGameMessage(pISendUserItem, szMessage, SMT_CHAT);
		}

		//旁观用户
		do
		{
			pISendUserItem = EnumLookonUserItem(wEnumIndex++);
			if (pISendUserItem != NULL)
			{
				//发送消息
				SendGameMessage(pISendUserItem, szMessage, SMT_CHAT);
			}
		} while (pISendUserItem != NULL);
	}
	return true;
}

//写入积分
bool CTableFrame::WriteTableScore(tagScoreInfo ScoreInfoArray[], WORD wScoreCount)
{
	//效验参数
	ASSERT_ERR(wScoreCount==m_wChairCount);
	if (wScoreCount!=m_wChairCount) return false;

	//写入分数
	for (WORD i=0;i<m_wChairCount;i++)
	{
		if (ScoreInfoArray[i].cbType!=SCORE_TYPE_NULL)
		{
			WriteUserScore(i,ScoreInfoArray[i]);
		}
	}

	return true;
}

//写入奖牌
bool CTableFrame::WriteTableMedal(tagMedalInfo MedalInfoArray[], WORD wCount)
{
	//效验参数
	ASSERT(wCount==m_wChairCount);
	if (wCount!=m_wChairCount) return false;

	//写入分数
	for (WORD i=0;i<m_wChairCount;i++)
	{
		//if (MedalInfoArray[i].cbType!=SCORE_TYPE_NULL)
		{
			WriteUserMedal(i,MedalInfoArray[i]);
		}
	}

	return true;
}

//写入奖牌
bool CTableFrame::WriteUserMedal(WORD wChairID, tagMedalInfo & MedalInfo)
{
	//效验参数
	ASSERT((wChairID<m_wChairCount));
	if ((wChairID>=m_wChairCount)) return false;

	//获取用户
	ASSERT(GetTableUserItem(wChairID)!=NULL);
	IServerUserItem * pIServerUserItem=GetTableUserItem(wChairID);

	if (pIServerUserItem!=NULL)
	{
		//写入奖牌
		pIServerUserItem->WriteUserMedal(MedalInfo.lMedal,MedalInfo.cbType);
	}

	return true;
}

bool CTableFrame:: WriteGameEvent(WORD wChairID,void* pData)
{
	//效验参数
	ASSERT((wChairID<m_wChairCount));
	if ((wChairID>=m_wChairCount)) return false;

	//获取用户
	ASSERT(GetTableUserItem(wChairID)!=NULL);
	IServerUserItem * pIServerUserItem=GetTableUserItem(wChairID);

	if (pIServerUserItem!=NULL)
	{
		m_pIMainServiceFrame->PostGameEvent(pIServerUserItem,pData);
	}
	
	return true;
}

//计算税收
SCORE CTableFrame::CalculateRevenue(WORD wChairID, SCORE lScore)
{
	//效验参数
	ASSERT_ERR(wChairID<m_wChairCount);
	if (wChairID>=m_wChairCount) return 0L;

	//计算税收
	if ((m_pGameServiceOption->wRevenueRatio>0)&&(lScore>=REVENUE_BENCHMARK))
	{
		//获取用户
		ASSERT_ERR(GetTableUserItem(wChairID)!=NULL);
		IServerUserItem * pIServerUserItem=GetTableUserItem(wChairID);

		//计算税收
		SCORE lRevenue=lScore*m_pGameServiceOption->wRevenueRatio/REVENUE_DENOMINATOR;

		return lRevenue;
	}

	return 0L;
}

//消费限额
SCORE CTableFrame::QueryConsumeQuota(IServerUserItem * pIServerUserItem)
{
	//用户效验
	ASSERT_ERR(pIServerUserItem->GetTableID()==m_wTableID);
	if (pIServerUserItem->GetTableID()!=m_wTableID) return 0L;

	//查询额度
	SCORE lTrusteeScore=pIServerUserItem->GetTrusteeScore();
	SCORE lMinEnterScore=m_pGameServiceOption->lMinTableScore;
	SCORE lUserConsumeQuota=m_pITableFrameSink->QueryConsumeQuota(pIServerUserItem);

	//效验额度
	ASSERT_ERR((lUserConsumeQuota>=0L)&&(lUserConsumeQuota<=pIServerUserItem->GetUserScore()-lMinEnterScore));
	if ((lUserConsumeQuota<0L)||(lUserConsumeQuota>pIServerUserItem->GetUserScore()-lMinEnterScore)) return 0L;

	return lUserConsumeQuota+lTrusteeScore;
}

//寻找用户
IServerUserItem * CTableFrame::SearchUserItem(DWORD dwUserID)
{
	//变量定义
	WORD wEnumIndex=0;
	IServerUserItem * pIServerUserItem=NULL;

	//桌子用户
	for (WORD i=0;i<m_wChairCount;i++)
	{
		pIServerUserItem=GetTableUserItem(i);
		if ((pIServerUserItem!=NULL)&&(pIServerUserItem->GetUserID()==dwUserID)) return pIServerUserItem;
	}

	//旁观用户
	do
	{
		pIServerUserItem=EnumLookonUserItem(wEnumIndex++);
		if ((pIServerUserItem!=NULL)&&(pIServerUserItem->GetUserID()==dwUserID)) return pIServerUserItem;
	} while (pIServerUserItem!=NULL);

	return NULL;
}

//游戏用户
IServerUserItem * CTableFrame::GetTableUserItem(WORD wChairID)
{
	//效验参数
	if (wChairID>=m_wChairCount)
		return NULL;

	//获取用户
	IServerUserItem* pUserItem = m_TableUserItemArray[wChairID];
	if ( pUserItem != NULL)
	{
		WORD wTempTableID = pUserItem->GetTableID();
		WORD wTempChairID = pUserItem->GetChairID();

		//发送异常了
		if ( wTempTableID == INVALID_TABLE && wTempChairID == INVALID_CHAIR )
		{
			CString cs;
			cs.Format(TEXT("异常桌椅[%d-%d] 真桌[%d] 玩家[%d] 状态[%d] 机器人[%d]"),wTempTableID,wTempChairID,m_wTableID,pUserItem->GetUserID(),pUserItem->GetUserStatus(),pUserItem->IsAndroidUser());
			I_TRACE(cs.GetBuffer(0));
			m_ServerFileLog.Log(cs.GetBuffer(0));

			m_TableUserItemArray[wChairID]=NULL;
			return NULL;
		}
	}
	return m_TableUserItemArray[wChairID];

}

//旁观用户
IServerUserItem * CTableFrame::EnumLookonUserItem(WORD wEnumIndex)
{
	if (wEnumIndex>=m_LookonUserItemArray.GetCount()) return NULL;
	return m_LookonUserItemArray[wEnumIndex];
}

//设置时间
bool CTableFrame::SetGameTimer(DWORD dwTimerID, DWORD dwElapse, DWORD dwRepeat, WPARAM dwBindParameter)
{
	//效验参数
	ASSERT_ERR((dwTimerID>0)&&(dwTimerID<TIME_TABLE_MODULE_RANGE));
	if ((dwTimerID<=0)||(dwTimerID>=TIME_TABLE_MODULE_RANGE)) return false;

	//设置时间
	DWORD dwEngineTimerID=IDI_TABLE_MODULE_START+m_wTableID*TIME_TABLE_MODULE_RANGE;
	if (m_pITimerEngine!=NULL) m_pITimerEngine->SetTimer(dwEngineTimerID+dwTimerID,dwElapse,dwRepeat,dwBindParameter);

	return true;
}

//删除时间
bool CTableFrame::KillGameTimer(DWORD dwTimerID)
{
	//效验参数
	ASSERT_ERR((dwTimerID>0)&&(dwTimerID<=TIME_TABLE_MODULE_RANGE));
	if ((dwTimerID<=0)||(dwTimerID>TIME_TABLE_MODULE_RANGE)) return false;

	//删除时间
	DWORD dwEngineTimerID=IDI_TABLE_MODULE_START+m_wTableID*TIME_TABLE_MODULE_RANGE;
	if (m_pITimerEngine!=NULL) m_pITimerEngine->KillTimer(dwEngineTimerID+dwTimerID);

	return true;
}

//发送数据
bool CTableFrame::SendUserItemData(IServerUserItem * pIServerUserItem, WORD wSubCmdID)
{
	//状态效验
	ASSERT_ERR((pIServerUserItem!=NULL)&&(pIServerUserItem->IsClientReady()==true));
	if ((pIServerUserItem==NULL)&&(pIServerUserItem->IsClientReady()==false)) return false;

	//发送数据
	m_pIMainServiceFrame->SendData(pIServerUserItem,MDM_GF_GAME,wSubCmdID,NULL,0);

	return true;
}

//发送数据
bool CTableFrame::SendUserItemData(IServerUserItem * pIServerUserItem, WORD wSubCmdID, VOID * pData, WORD wDataSize)
{
	//状态效验
	ASSERT_ERR((pIServerUserItem!=NULL)&&(pIServerUserItem->IsClientReady()==true));
	if ((pIServerUserItem==NULL)&&(pIServerUserItem->IsClientReady()==false)) return false;

	//发送数据
	m_pIMainServiceFrame->SendData(pIServerUserItem,MDM_GF_GAME,wSubCmdID,pData,wDataSize);

	return true;
}

//发送数据
bool CTableFrame::SendTableData(WORD wChairID, WORD wSubCmdID)
{
	//用户群发
	if (wChairID==INVALID_CHAIR)
	{
		for (WORD i=0;i<m_wChairCount;i++)
		{
			//获取用户
			IServerUserItem * pIServerUserItem=GetTableUserItem(i);
			if (pIServerUserItem==NULL) continue;

			//效验状态
			//ASSERT(pIServerUserItem->IsClientReady()==true);
			//if (pIServerUserItem->IsClientReady()==false) continue;

			//发送数据
			m_pIMainServiceFrame->SendData(pIServerUserItem,MDM_GF_GAME,wSubCmdID,NULL,0);
		}

		return true;
	}
	else
	{
		//获取用户
		IServerUserItem * pIServerUserItem=GetTableUserItem(wChairID);
		if (pIServerUserItem==NULL) return false;

		//效验状态
		//ASSERT(pIServerUserItem->IsClientReady()==true);
		//if (pIServerUserItem->IsClientReady()==false) return false;

		//发送数据
		m_pIMainServiceFrame->SendData(pIServerUserItem,MDM_GF_GAME,wSubCmdID,NULL,0);

		return true;
	}

	return false;
}

//发送数据
bool CTableFrame::SendTableData(WORD wChairID, WORD wSubCmdID, VOID * pData, WORD wDataSize,WORD wMainCmdID)
{
	//用户群发
	if (wChairID==INVALID_CHAIR)
	{
		for (WORD i=0;i<m_wChairCount;i++)
		{
			//获取用户
			IServerUserItem * pIServerUserItem=GetTableUserItem(i);
			if ((pIServerUserItem==NULL)||(pIServerUserItem->IsClientReady()==false)) continue;

			//发送数据
			m_pIMainServiceFrame->SendData(pIServerUserItem,wMainCmdID,wSubCmdID,pData,wDataSize);
		}

		return true;
	}
	else
	{
		//获取用户
		IServerUserItem * pIServerUserItem=GetTableUserItem(wChairID);
		if ((pIServerUserItem==NULL)||(pIServerUserItem->IsClientReady()==false)) return false;

		//发送数据
		m_pIMainServiceFrame->SendData(pIServerUserItem,wMainCmdID,wSubCmdID,pData,wDataSize);

		return true;
	}

	return false;
}

//发送数据
bool CTableFrame::SendLookonData(WORD wChairID, WORD wSubCmdID)
{
	//变量定义
	WORD wEnumIndex=0;
	IServerUserItem * pIServerUserItem=NULL;

	//枚举用户
	do
	{
		//获取用户
		pIServerUserItem=EnumLookonUserItem(wEnumIndex++);
		if (pIServerUserItem==NULL) break;

		//效验状态
		ASSERT_ERR(pIServerUserItem->IsClientReady()==true);
		if (pIServerUserItem->IsClientReady()==false) return false;

		//发送数据
		if ((wChairID==INVALID_CHAIR)||(pIServerUserItem->GetChairID()==wChairID))
		{
			m_pIMainServiceFrame->SendData(pIServerUserItem,MDM_GF_GAME,wSubCmdID,NULL,0);
		}

	} while (true);

	return true;
}

//发送数据
bool CTableFrame::SendLookonData(WORD wChairID, WORD wSubCmdID, VOID * pData, WORD wDataSize)
{
	//变量定义
	WORD wEnumIndex=0;
	IServerUserItem * pIServerUserItem=NULL;

	//枚举用户
	do
	{
		//获取用户
		pIServerUserItem=EnumLookonUserItem(wEnumIndex++);
		if (pIServerUserItem==NULL) break;

		//效验状态
		//ASSERT_ERR(pIServerUserItem->IsClientReady()==true);
		if (pIServerUserItem->IsClientReady()==false) return false;

		//发送数据
		if ((wChairID==INVALID_CHAIR)||(pIServerUserItem->GetChairID()==wChairID))
		{
			m_pIMainServiceFrame->SendData(pIServerUserItem,MDM_GF_GAME,wSubCmdID,pData,wDataSize);
		}

	} while (true);

	return true;
}

//发送消息
bool CTableFrame::SendGameMessage(LPCTSTR lpszMessage, WORD wType)
{
	//变量定义
	WORD wEnumIndex=0;

	//发送消息
	for (WORD i=0;i<m_wChairCount;i++)
	{
		//获取用户
		IServerUserItem * pIServerUserItem=GetTableUserItem(i);
		if ((pIServerUserItem==NULL)||(pIServerUserItem->IsClientReady()==false)) continue;

		//发送消息
		m_pIMainServiceFrame->SendGameMessage(pIServerUserItem,lpszMessage,wType);
	}

	//枚举用户
	do
	{
		//获取用户
		IServerUserItem * pIServerUserItem=EnumLookonUserItem(wEnumIndex++);
		if (pIServerUserItem==NULL) break;

		//效验状态
		ASSERT_ERR(pIServerUserItem->IsClientReady()==true);
		if (pIServerUserItem->IsClientReady()==false) return false;

		//发送消息
		m_pIMainServiceFrame->SendGameMessage(pIServerUserItem,lpszMessage,wType);

	} while (true);

	return true;
}

//房间消息
bool CTableFrame::SendRoomMessage(IServerUserItem * pIServerUserItem, LPCTSTR lpszMessage, WORD wType)
{
	//用户效验
	ASSERT_ERR(pIServerUserItem!=NULL);
	if (pIServerUserItem==NULL) return false;

	//发送消息
	m_pIMainServiceFrame->SendRoomMessage(pIServerUserItem,lpszMessage,wType);

	return true;
}

//游戏消息
bool CTableFrame::SendGameMessage(IServerUserItem * pIServerUserItem, LPCTSTR lpszMessage, WORD wType)
{
	//用户效验
	ASSERT_ERR(pIServerUserItem!=NULL);
	if (pIServerUserItem==NULL) return false;

	//发送消息
	return m_pIMainServiceFrame->SendGameMessage(pIServerUserItem,lpszMessage,wType);
}

//发送场景
bool CTableFrame::SendGameScene(IServerUserItem * pIServerUserItem, VOID * pData, WORD wDataSize)
{
	//用户效验
	ASSERT_ERR((pIServerUserItem!=NULL)&&(pIServerUserItem->IsClientReady()==true));
	if ((pIServerUserItem==NULL)||(pIServerUserItem->IsClientReady()==false)) return false;

	//发送场景
	ASSERT_ERR(m_pIMainServiceFrame!=NULL);
	m_pIMainServiceFrame->SendData(pIServerUserItem,MDM_GF_FRAME,SUB_GF_GAME_SCENE,pData,wDataSize);

	return true;
}

//断线事件
bool CTableFrame::OnEventUserOffLine(IServerUserItem * pIServerUserItem)
{
	//参数效验
	ASSERT_ERR(pIServerUserItem!=NULL);
	if (pIServerUserItem==NULL) return false;

	//用户变量
	tagUserInfo * pUserInfo=pIServerUserItem->GetUserInfo();
	IServerUserItem * pITableUserItem=m_TableUserItemArray[pUserInfo->wChairID];

	//用户属性
	WORD wChairID=pIServerUserItem->GetChairID();
	BYTE cbUserStatus=pIServerUserItem->GetUserStatus();

	//游戏用户
	if (cbUserStatus!=US_LOOKON)
	{
		//效验用户
		ASSERT_ERR(pIServerUserItem==GetTableUserItem(wChairID));
		if (pIServerUserItem!=GetTableUserItem(wChairID)) return false;

		bool bFlag = false;

		//断线处理
		if ((cbUserStatus==US_PLAYING)/*&&(m_wOffLineCount[wChairID]<MAX_OFF_LINE)*/)
			bFlag = true;
		if ( m_pGameServiceOption->wServerType&GAME_GENRE_MATCH )
			bFlag = true;
		//断线处理
		if ( bFlag )
		{
			//用户设置
			pIServerUserItem->SetClientReady(false);
			pIServerUserItem->SetUserStatus(US_OFFLINE,m_wTableID,wChairID);
			m_pITableFrameSink->OnFrameMessage(SUB_GF_USER_OFFLINE,NULL,NULL,pIServerUserItem);

			//断线处理
			//if (m_dwOffLineTime[wChairID]==0L)
			//{
			//	//设置变量
			//	m_wOffLineCount[wChairID]++;
			//	m_dwOffLineTime[wChairID]=(DWORD)time(NULL);

			//	//时间设置
			//	//WORD wOffLineCount=GetOffLineUserCount();
			//	//if (wOffLineCount==1)

			//}

			//定时器的ID很将就，一个桌子不能超过50个，不然会跳到下一个桌子去
			//DWORD dwEngineTimerID=IDI_TABLE_MODULE_START+m_wTableID*TIME_TABLE_MODULE_RANGE;
			//if (m_pITimerEngine!=NULL) m_pITimerEngine->SetTimer(dwEngineTimerID+IDI_OFF_LINE,120*1000,1,wChairID);

			if ( !pIServerUserItem->IsAndroidUser() )
				I_TRACE(TEXT("玩家 %s 已掉线,Status:%d,TableID:%d,ChairID:%d"),pIServerUserItem->GetNickName(),pIServerUserItem->GetUserStatus(),m_wTableID,wChairID);

			//DWORD UserID = pIServerUserItem->GetUserID();
			//m_pIRecordDataBaseEngine->PostDataBaseRequest(DBR_GR_SET_USER_OFFLINE_RECORD,0,&UserID,sizeof(DWORD));

			return true;
		}
	}

	//游戏没开始，但坐下了，就会出现在这里
	I_TRACE(TEXT("OnEventUserOffLine %s, %d,%d"),pIServerUserItem->GetNickName(),pIServerUserItem->GetTableID(),pIServerUserItem->GetUserStatus());

	if ( m_pGameServiceOption->wServerType != GAME_GENRE_MATCH  )
	{
		PerformStandUpAction(pIServerUserItem);

		pIServerUserItem->SetUserStatus(US_NULL,INVALID_TABLE,INVALID_CHAIR);
	}

	return true;
}

//积分事件
bool CTableFrame::OnUserScroeNotify(WORD wChairID, IServerUserItem * pIServerUserItem, BYTE cbReason)
{
	//通知游戏
	return m_pITableFrameSink->OnUserScroeNotify(wChairID,pIServerUserItem,cbReason);
}

//时间事件
bool CTableFrame::OnEventTimer(DWORD dwTimerID, WPARAM dwBindParameter)
{
	//回调事件
	if ((dwTimerID>=0)&&(dwTimerID<TIME_TABLE_SINK_RANGE))
	{
		ASSERT_ERR(m_pITableFrameSink!=NULL);
		m_pITableFrameSink->OnTimerMessage(dwTimerID,dwBindParameter);
	}

	//事件处理
	switch (dwTimerID)
	{
	case IDI_OFF_LINE:	//断线事件
		{
			return true;
			//效验状态
			ASSERT_ERR(m_bGameStarted==true);
			if (m_bGameStarted==false) return false;

			//变量定义
			DWORD dwOffLineTime=0L;
			WORD wOffLineChair=INVALID_CHAIR;

			DISK_LOG(TEXT("断线定时器执行"));
			wOffLineChair = (WORD)dwBindParameter;
			IServerUserItem * pUserItem=GetTableUserItem(wOffLineChair);
			if ( pUserItem != NULL && 
				pUserItem->GetUserID() != 0 && 
				pUserItem->GetTableID() != INVALID_TABLE &&
				pUserItem->GetUserStatus() == US_OFFLINE &&
				//czg bug 离线的这里清理了会导致 某局结束时子游戏开始计分找不到坐位上的人
				(GetGameStatus()<GAME_STATUS_PLAY)	//当前桌子不处于游戏状态
				)
			{
				//设置变量
				m_dwOffLineTime[wOffLineChair]=0L;

				//用户起立
				DISK_LOG(TEXT("断线时间已到玩家起立 %s, 桌子 %d,状态 %d"),pUserItem->GetNickName(),pUserItem->GetTableID(),pUserItem->GetUserStatus());
				PerformStandUpAction(pUserItem);
				return true;
			}

			//寻找用户
			for (WORD i=0;i<m_wChairCount;i++)
			{
				if ((m_dwOffLineTime[i]!=0L)&&((m_dwOffLineTime[i]<dwOffLineTime)||(wOffLineChair==INVALID_CHAIR)))
				{
					wOffLineChair=i;
					dwOffLineTime=m_dwOffLineTime[i];
				}
			}

			//位置判断
			ASSERT_ERR(wOffLineChair!=INVALID_CHAIR);
			if (wOffLineChair==INVALID_CHAIR) return false;

			//用户判断
			ASSERT_ERR(dwBindParameter<m_wChairCount);
			if (wOffLineChair!=(WORD)dwBindParameter)
			{
				//时间计算
				DWORD dwCurrentTime=(DWORD)time(NULL);
				DWORD dwLapseTime=dwCurrentTime-m_dwOffLineTime[wOffLineChair];

				//设置时间
				dwLapseTime=__min(dwLapseTime,TIME_OFF_LINE-2000L);
				SetGameTimer(IDI_OFF_LINE,TIME_OFF_LINE-dwLapseTime,1,wOffLineChair);

				return true;
			}

			//czg bug 桌子处于游戏状态 离线的这里清理了会导致 某局结束时子游戏开始计分找不到坐位上的人
			if (m_bGameStarted==false)
			{
				//获取用户
				ASSERT_ERR(GetTableUserItem(wOffLineChair)!=NULL);
				IServerUserItem * pIServerUserItem=GetTableUserItem(wOffLineChair);

				//结束游戏
				if (pIServerUserItem!=NULL)
				{
					//设置变量
					m_dwOffLineTime[wOffLineChair]=0L;

					//用户起立
					DISK_LOG(TEXT("IDI_OFF_LINE %s, %d,%d"),pIServerUserItem->GetNickName(),pIServerUserItem->GetTableID(),pIServerUserItem->GetUserStatus());
					PerformStandUpAction(pIServerUserItem);
				}
			}
			else
			//继续时间
			{
				//变量定义
				DWORD dwOffLineTime=0L;
				WORD wOffLineChair=INVALID_CHAIR;

				//寻找用户
				for (WORD i=0;i<m_wChairCount;i++)
				{
					if ((m_dwOffLineTime[i]!=0L)&&((m_dwOffLineTime[i]<dwOffLineTime)||(wOffLineChair==INVALID_CHAIR)))
					{
						wOffLineChair=i;
						dwOffLineTime=m_dwOffLineTime[i];
					}
				}

				//设置时间
				if (wOffLineChair!=INVALID_CHAIR)
				{
					//时间计算
					DWORD dwCurrentTime=(DWORD)time(NULL);
					DWORD dwLapseTime=dwCurrentTime-m_dwOffLineTime[wOffLineChair];

					//设置时间
					dwLapseTime=__min(dwLapseTime,TIME_OFF_LINE-2000L);
					SetGameTimer(IDI_OFF_LINE,TIME_OFF_LINE-dwLapseTime,1,wOffLineChair);
				}
			}

			return true;
		}
 		case IDI_GAME_OPTION:
			{
				for (WORD i=0;i<m_wChairCount;i++)
				{
					//获取用户
					IServerUserItem * pIServerUserItem=GetTableUserItem(i);

					//获取属性
					WORD wChairID=pIServerUserItem->GetChairID();
					BYTE cbUserStatus=pIServerUserItem->GetUserStatus();

					//断线清理
					if ((cbUserStatus!=US_LOOKON)&&((m_dwOffLineTime[wChairID]!=0L)))
					{
						//设置变量
						//m_dwOffLineTime[wChairID]=0L;

						//删除时间
						//WORD wOffLineCount=GetOffLineUserCount();
						//if (wOffLineCount==0) KillGameTimer(IDI_OFF_LINE);
					}

					//设置状态
					pIServerUserItem->SetClientReady(true);
					m_bAllowLookon[wChairID]=false;

					//发送状态
					CMD_GF_GameStatus GameStatus;
					GameStatus.cbGameStatus=m_cbGameStatus;
					GameStatus.cbAllowLookon=FALSE;
					m_pIMainServiceFrame->SendData(pIServerUserItem,MDM_GF_FRAME,SUB_GF_GAME_STATUS,&GameStatus,sizeof(GameStatus));

					//发送场景
					bool bSendSecret= false;
					m_pITableFrameSink->OnEventSendGameScene(wChairID,pIServerUserItem,m_cbGameStatus,bSendSecret);

					//开始判断
					if ((cbUserStatus==US_READY || cbUserStatus==US_PLAYING || cbUserStatus== US_OFFLINE)&&(EfficacyStartGame(wChairID)==true))
					{
						if ( m_pGameServiceOption->wServerType&GAME_GENRE_MATCH )
							DISK_LOG(TEXT("游戏定时开始 第 %d 桌"),m_wTableID);
						StartGame(); 
					}
				}
				return true;
			}
		case IDI_ANDROID_STAND_UP:
			{
				for (WORD i=0;i<m_wChairCount;i++)
				{
					IServerUserItem * pIServerUserItem=GetTableUserItem(i);
					if ( pIServerUserItem == NULL ) continue;
					if ( pIServerUserItem->IsAndroidUser() == false ) continue;
					if( pIServerUserItem->GetUserStatus() != US_PLAYING ) continue;

					CAttemperEngineSink * pAttemperEngineSink = (CAttemperEngineSink *)m_pIMainServiceFrame;
					tagBindParameter * pBindParameter = pAttemperEngineSink->GetBindParameter(pIServerUserItem->GetBindIndex());

					if( m_pGameServiceOption->wKindID == 220 )
					{
						I_TRACE(TEXT("机器人取钱再起立 %s, TableID %d, Status %d"),pIServerUserItem->GetNickName(),pIServerUserItem->GetTableID(),pIServerUserItem->GetUserStatus());
						ToSaveScore(pIServerUserItem);
						PerformStandUpAction(pIServerUserItem);
						continue;
					}
					I_TRACE(TEXT("机器人再起立 %s, TableID %d, Status %d"),pIServerUserItem->GetNickName(),pIServerUserItem->GetTableID(),pIServerUserItem->GetUserStatus());
					PerformStandUpAction(pIServerUserItem);

					//机器人删除
					//m_pIAndroidUserManager->DeleteAndroidUserItem(pBindParameter->dwSocketID);
				}

				return true;
			}
		case IDI_USER_READY_DETECT:
			{
				//return true;
				I_TRACE(TEXT("未准备玩家检测"));
				for ( WORD i=0;i<m_wChairCount;++i )
				{
					IServerUserItem * pIServerUserItem=GetTableUserItem(i);

					if ( pIServerUserItem == NULL) continue;
					WORD wChairID=pIServerUserItem->GetChairID();
					BYTE cbUserStatus=pIServerUserItem->GetUserStatus();
					DWORD dwSitDownTime = pIServerUserItem->GetSitDownTime();

					//排除非坐下状态
					if ( cbUserStatus == US_FREE ||
						cbUserStatus == US_PLAYING ||
						cbUserStatus == US_LOOKON ||
						cbUserStatus == US_READY ||
						cbUserStatus == US_NULL 
						) continue;
					if ( dwSitDownTime == 0 ) continue;
					if ( IsGameStarted() ) continue;
					DWORD dwCurTime = (DWORD)time(NULL);
					if ( dwCurTime - dwSitDownTime >=5 )  //坐下间隔5秒，踢出
					{
						//I_TRACE(TEXT("未准备玩家踢出"));
						SendGameMessage(pIServerUserItem,TEXT("由于您长时间没准备,系统已把您踢出房间"),SMT_CHAT|SMT_EJECT|SMT_CLOSE_GAME);
						PerformStandUpAction(pIServerUserItem);
						m_pIMainServiceFrame->ShutDownSocket(pIServerUserItem);
						


					}
				}
				return true;
			}
	}

	return false;
}

//游戏事件
bool CTableFrame::OnEventSocketGame(WORD wSubCmdID, VOID * pData, WORD wDataSize, IServerUserItem * pIServerUserItem)
{
	//效验参数
	ASSERT_ERR(pIServerUserItem!=NULL);
	ASSERT_ERR(m_pITableFrameSink!=NULL);

	//消息处理
	bool bRet = false;
	bRet = m_pITableFrameSink->OnGameMessage(wSubCmdID,pData,wDataSize,pIServerUserItem);
	if ( bRet == false)
		I_TRACE(TEXT("游戏事件S_cmd:%d,桌子:%d,玩家:%d"),wSubCmdID,m_wTableID,pIServerUserItem->GetUserID());
	return bRet;
}

//框架事件
bool CTableFrame::OnEventSocketFrame(WORD wSubCmdID, VOID * pData, WORD wDataSize, IServerUserItem * pIServerUserItem)
{
	//游戏处理
	if (m_pITableFrameSink->OnFrameMessage(wSubCmdID,pData,wDataSize,pIServerUserItem)==true) return true;

	//比赛处理
	if(m_pIGameMatchSink!=NULL && m_pIGameMatchSink->OnFrameMessage(wSubCmdID,pData,wDataSize,pIServerUserItem)==true) return true;

	//默认处理
	switch (wSubCmdID)
	{
	case SUB_GF_GAME_OPTION_H5 :
		{
		//GameServer::GSGameOption gsGameOption;
		//gsGameOption.ParseFromArray(pData, wDataSize);

		//场景消息只触发一次
		if ( pIServerUserItem->IsClientReady() )
		{
			m_fileLog.Log(TEXT("场景消息只触发一次 %d"), pIServerUserItem->IsClientReady());
			return true;
		}

		//获取属性
		WORD wChairID = pIServerUserItem->GetChairID();
		BYTE cbUserStatus = pIServerUserItem->GetUserStatus();

		//设置状态
		pIServerUserItem->SetClientReady(true);

		//发送状态
		/*CMD_GF_GameStatus GameStatus;
		GameStatus.cbGameStatus = m_cbGameStatus;
		GameStatus.cbAllowLookon = FALSE;*/

		GameServer::Proto_GameStatus ProtoGameStarus;
		ProtoGameStarus.set_cbgamestatus(m_cbGameStatus);
		std::string serializeStr;
		ProtoGameStarus.SerializeToString(&serializeStr);
		m_pIMainServiceFrame->SendData(pIServerUserItem, MDM_GF_FRAME, SUB_GF_GAME_STATUS, (void*)serializeStr.c_str(), (WORD)serializeStr.size());

		//发送场景
		bool bSendSecret = ((cbUserStatus != US_LOOKON) || (m_bAllowLookon[wChairID] == true));
		m_pITableFrameSink->OnEventSendGameScene(wChairID, pIServerUserItem, m_cbGameStatus, bSendSecret);
		I_TRACE(TEXT("发送场景消息 %s,%d-%d,Status:%d"),pIServerUserItem->GetNickName(),pIServerUserItem->GetTableID(),pIServerUserItem->GetChairID(),pIServerUserItem->GetUserStatus());

		//开始判断
		if ((cbUserStatus == US_READY || cbUserStatus == US_PLAYING) && (EfficacyStartGame(wChairID) == true))
		{
			if (m_pGameServiceOption->wServerType&GAME_GENRE_MATCH)
			{
				KillGameTimer(IDI_GAME_OPTION);
			}
			//I_TRACE(TEXT("场景准备结束,游戏开始"));
			StartGame();
		}

			return true;
		}
	case SUB_GF_USER_READY_H5:
		{
		GameServer::GSUserReady gsUserReady;
		gsUserReady.ParseFromArray(pData, wDataSize);
		if (pIServerUserItem->GetUserID() != gsUserReady.userid())
			return false;

		//获取属性
		WORD wChairID = pIServerUserItem->GetChairID();
		BYTE cbUserStatus = pIServerUserItem->GetUserStatus();

		//效验状态
		ASSERT_ERR(GetTableUserItem(wChairID) == pIServerUserItem);
		if (GetTableUserItem(wChairID) != pIServerUserItem) return false;


		if (m_pGameServiceOption->wServerType == GAME_GENRE_SCORE && pIServerUserItem->GetUserScore() <= GetCellScore() * 5)
		{
			SendGameMessage(pIServerUserItem, TEXT("携带分数不足，请取款后再进入游戏!"), SMT_CHAT | SMT_EJECT | SMT_CLOSE_GAME);
			return true;
		}

		if (pIServerUserItem->GetUserScore() <= m_pGameServiceOption->lMinEnterScore)
		{
			//构造提示
			TCHAR szDescribe[128] = TEXT("");
			if (m_pGameServiceOption->wServerType&(GAME_GENRE_GOLD | GAME_GENRE_SCORE))
				_sntprintf(szDescribe, CountArray(szDescribe), TEXT("亲爱的玩家，此游戏桌需要至少%0.2f金币，您携带的金币不够，不能游戏，请到银行取款后再进行游戏！"), double(m_pGameServiceOption->lMinEnterScore) / 1000);

			//发送消息
			if (pIServerUserItem->IsAndroidUser() == true)
			{
				//DISK_LOG(TEXT("AndroidUser not enough score %s, %d,%d"),pIServerUserItem->GetNickName(),pIServerUserItem->GetTableID(),pIServerUserItem->GetUserStatus());
				PerformStandUpAction(pIServerUserItem);

				//CAttemperEngineSink * pAttemperEngineSink = (CAttemperEngineSink *)m_pIMainServiceFrame;
				//tagBindParameter * pBindParameter = pAttemperEngineSink->GetBindParameter(pIServerUserItem->GetBindIndex());

				//m_pIAndroidUserManager->DeleteAndroidUserItem(pBindParameter->dwSocketID);		 
			}
			else
				SendGameMessage(pIServerUserItem, szDescribe, SMT_CHAT | SMT_EJECT | SMT_CLOSE_GAME);

			return true;
		}

		if (cbUserStatus != US_SIT) return true;

		//分组判断
		if (m_wDrawCount >= __max(rand() % 6, 3) && pIServerUserItem->IsAndroidUser() && CServerRule::IsAllowAvertCheatMode(m_pGameServiceOption->dwServerRule) && (m_pGameServiceAttrib->wChairCount < MAX_CHAIR))
		{
			m_pIMainServiceFrame->InsertDistribute(pIServerUserItem);
			return true;
		}

		//事件通知
		if (m_pITableUserAction != NULL)
		{
			m_pITableUserAction->OnActionUserOnReady(wChairID, pIServerUserItem, pData, wDataSize);
		}

		//事件通知
		if (m_pIMatchTableAction != NULL && !m_pIMatchTableAction->OnActionUserOnReady(wChairID, pIServerUserItem, pData, wDataSize))
			return true;

		//开始判断
		if (EfficacyStartGame(wChairID) == false)
		{
			pIServerUserItem->SetUserStatus(US_READY, m_wTableID, wChairID);
		}
		else
		{
			StartGame();
		}

		return true;
			return true;
		}
	case SUB_GF_LOOKON_CONFIG_H5:
		{
			return true;
		}
	case SUB_GF_GAME_OPTION:	//游戏配置
		{
			//效验参数
			//ASSERT_ERR(wDataSize==sizeof(CMD_GF_GameOption));
			//if (wDataSize!=sizeof(CMD_GF_GameOption)) return false;

			//变量定义
			//CMD_GF_GameOption * pGameOption=(CMD_GF_GameOption *)pData;

			//获取属性
			WORD wChairID=pIServerUserItem->GetChairID();
			BYTE cbUserStatus=pIServerUserItem->GetUserStatus();

			//设置状态
			pIServerUserItem->SetClientReady(true);
			//if (cbUserStatus!=US_LOOKON) m_bAllowLookon[wChairID]=pGameOption->cbAllowLookon?true:false;

			//发送状态
			CMD_GF_GameStatus GameStatus;
			GameStatus.cbGameStatus=m_cbGameStatus;
			GameStatus.cbAllowLookon=m_bAllowLookon[wChairID]?TRUE:FALSE;
			m_pIMainServiceFrame->SendData(pIServerUserItem,MDM_GF_FRAME,SUB_GF_GAME_STATUS,&GameStatus,sizeof(GameStatus));

// 			if ((m_pGameServiceOption->wServerType&GAME_GENRE_MATCH)==0)
// 			{
// 				//发送消息
// 				TCHAR szMessage[128]=TEXT("");
// 				_sntprintf(szMessage,CountArray(szMessage),TEXT("欢迎您进入“%s”游戏，祝您游戏愉快！"),m_pGameServiceAttrib->szGameName);
// 				m_pIMainServiceFrame->SendGameMessage(pIServerUserItem,szMessage,SMT_CHAT);
// 			}

			//发送场景
			bool bSendSecret=((cbUserStatus!=US_LOOKON)||(m_bAllowLookon[wChairID]==true));
			m_pITableFrameSink->OnEventSendGameScene(wChairID,pIServerUserItem,m_cbGameStatus,bSendSecret);

			//m_pIMainServiceFrame->SendUserCardBox(pIServerUserItem);
			//I_TRACE(TEXT("场景准备 %s %d-%d Status:%d"), pIServerUserItem->GetNickName(), pIServerUserItem->GetTableID(), pIServerUserItem->GetChairID(), pIServerUserItem->GetUserStatus());
			//开始判断
			if ((cbUserStatus==US_READY || cbUserStatus == US_PLAYING)&&(EfficacyStartGame(wChairID)==true))
			{
				if ( m_pGameServiceOption->wServerType&GAME_GENRE_MATCH )
				{
					KillGameTimer(IDI_GAME_OPTION);
				}
				StartGame(); 
			}

			return true;
		}
	case SUB_GF_USER_READY:		//用户准备
		{
			//获取属性
			WORD wChairID=pIServerUserItem->GetChairID();
			BYTE cbUserStatus=pIServerUserItem->GetUserStatus();

			//效验状态
			ASSERT_ERR(GetTableUserItem(wChairID)==pIServerUserItem);
			if (GetTableUserItem(wChairID)!=pIServerUserItem) return false;

			if ( m_pGameServiceOption->wServerType&GAME_GENRE_MATCH ) return true;

			if ( m_pGameServiceOption->wServerType==GAME_GENRE_SCORE && pIServerUserItem->GetUserScore() <= GetCellScore()*5 )
			{
				SendGameMessage(pIServerUserItem,TEXT("携带分数不足，请取款后再进入游戏!"),SMT_CHAT|SMT_EJECT|SMT_CLOSE_GAME);
				return true;
			}

				if (pIServerUserItem->GetUserScore()<=m_pGameServiceOption->lMinEnterScore)
				{
					//构造提示
					TCHAR szDescribe[128]=TEXT("");
					if (m_pGameServiceOption->wServerType&(GAME_GENRE_GOLD|GAME_GENRE_SCORE))
						_sntprintf(szDescribe, CountArray(szDescribe), TEXT("亲爱的玩家，此游戏桌需要至少%0.2f金币，您携带的金币不够，不能游戏，请到银行取款后再进行游戏！"), double(m_pGameServiceOption->lMinEnterScore) / 1000);

					//发送消息
					if (pIServerUserItem->IsAndroidUser()==true)
					{
						//DISK_LOG(TEXT("AndroidUser not enough score %s, %d,%d"),pIServerUserItem->GetNickName(),pIServerUserItem->GetTableID(),pIServerUserItem->GetUserStatus());
						PerformStandUpAction(pIServerUserItem);

						//CAttemperEngineSink * pAttemperEngineSink = (CAttemperEngineSink *)m_pIMainServiceFrame;
						//tagBindParameter * pBindParameter = pAttemperEngineSink->GetBindParameter(pIServerUserItem->GetBindIndex());

						//m_pIAndroidUserManager->DeleteAndroidUserItem(pBindParameter->dwSocketID);		 
					}
					else
						SendGameMessage(pIServerUserItem, szDescribe, SMT_CHAT | SMT_EJECT | SMT_CLOSE_GAME);

					return true;
				}

//				if ( m_pGameServiceOption->wRoomType!=3 && (m_pGameServiceOption->lMaxEnterScore!=0L)&&(pIServerUserItem->GetUserScore()>=m_pGameServiceOption->lMaxEnterScore*3) )
//				{
					//构造提示
// 					TCHAR szDescribe[128]=TEXT("");
// 					if (m_pGameServiceOption->wServerType&(GAME_GENRE_GOLD|GAME_GENRE_SCORE))
// 					{
// 						_sntprintf(szDescribe,CountArray(szDescribe),TEXT("亲爱的玩家，您的分数太高，不能进行游戏，请到高倍场游戏！"));
// 					}

					//发送消息
//					if (pIServerUserItem->IsAndroidUser()==true)
//					{
//						//先取钱再起立
//						ToSaveScore(pIServerUserItem);
//						PerformStandUpAction(pIServerUserItem);
// 						CAttemperEngineSink * pAttemperEngineSink = (CAttemperEngineSink *)m_pIMainServiceFrame;
// 						tagBindParameter * pBindParameter = pAttemperEngineSink->GetBindParameter(pIServerUserItem->GetBindIndex());
// 						m_pIAndroidUserManager->DeleteAndroidUserItem(pBindParameter->dwSocketID);

//					}
//					else SendGameMessage(pIServerUserItem,szDescribe,SMT_CHAT|SMT_EJECT|SMT_CLOSE_GAME);

//				}
			

			//效验状态
			//ASSERT_ERR(cbUserStatus==US_SIT);
			if (cbUserStatus!=US_SIT) return true;

			//分组判断
 			if (m_wDrawCount >= __max(rand()%6, 3) && pIServerUserItem->IsAndroidUser() && CServerRule::IsAllowAvertCheatMode(m_pGameServiceOption->dwServerRule)&&(m_pGameServiceAttrib->wChairCount < MAX_CHAIR))
 			{
 				m_pIMainServiceFrame->InsertDistribute(pIServerUserItem);
 				return true;
 			}

			//事件通知
			if (m_pITableUserAction!=NULL)
			{
				m_pITableUserAction->OnActionUserOnReady(wChairID,pIServerUserItem,pData,wDataSize);
			}

			//事件通知
			if(m_pIMatchTableAction!=NULL && !m_pIMatchTableAction->OnActionUserOnReady(wChairID,pIServerUserItem, pData,wDataSize))
				return true;

			//开始判断
			if (EfficacyStartGame(wChairID)==false)
			{
				pIServerUserItem->SetUserStatus(US_READY,m_wTableID,wChairID);
			}
			else
			{
				I_TRACE(TEXT("所有人准备，游戏开始!"));
				StartGame(); 
			}

			return true;
		}
	case SUB_GF_USER_CHAT:		//用户聊天
		{
			//变量定义
			CMD_GF_C_UserChat * pUserChat=(CMD_GF_C_UserChat *)pData;

			//效验参数
			ASSERT_ERR(wDataSize<=sizeof(CMD_GF_C_UserChat));
			ASSERT_ERR(wDataSize>=(sizeof(CMD_GF_C_UserChat)-sizeof(pUserChat->szChatString)));
			ASSERT_ERR(wDataSize==(sizeof(CMD_GF_C_UserChat)-sizeof(pUserChat->szChatString)+pUserChat->wChatLength*sizeof(pUserChat->szChatString[0])));

			//效验参数
			if (wDataSize>sizeof(CMD_GF_C_UserChat)) return false;
			if (wDataSize<(sizeof(CMD_GF_C_UserChat)-sizeof(pUserChat->szChatString))) return false;
			if (wDataSize!=(sizeof(CMD_GF_C_UserChat)-sizeof(pUserChat->szChatString)+pUserChat->wChatLength*sizeof(pUserChat->szChatString[0]))) return false;

			//目标用户
			if ((pUserChat->dwTargetUserID!=0)&&(SearchUserItem(pUserChat->dwTargetUserID)==NULL))
			{
				ASSERT_ERR(FALSE);
				return true;
			}

			//状态判断
			if ((CServerRule::IsForfendGameChat(m_pGameServiceOption->dwServerRule)==true)&&(pIServerUserItem->GetMasterOrder()==0L))
			{
				SendGameMessage(pIServerUserItem,TEXT("抱歉，当前游戏房间禁止游戏聊天！"),SMT_CHAT);
				return true;
			}

			//权限判断
			if (CUserRight::CanRoomChat(pIServerUserItem->GetUserRight())==false)
			{
				SendGameMessage(pIServerUserItem,TEXT("抱歉，您没有游戏聊天的权限，若需要帮助，请联系游戏客服咨询！"),SMT_EJECT|SMT_CHAT);
				return true;
			}

			//构造消息
			CMD_GF_S_UserChat UserChat;
			ZeroMemory(&UserChat,sizeof(UserChat));

			//字符过滤
			m_pIMainServiceFrame->SensitiveWordFilter(pUserChat->szChatString,UserChat.szChatString,CountArray(UserChat.szChatString));

			//构造数据
			UserChat.dwChatColor=pUserChat->dwChatColor;
			UserChat.wChatLength=pUserChat->wChatLength;
			UserChat.dwTargetUserID=pUserChat->dwTargetUserID;
			UserChat.dwSendUserID=pIServerUserItem->GetUserID();
			UserChat.wChatLength=CountStringBuffer(UserChat.szChatString);

			//发送数据
			WORD wHeadSize=sizeof(UserChat)-sizeof(UserChat.szChatString);
			WORD wSendSize=wHeadSize+UserChat.wChatLength*sizeof(UserChat.szChatString[0]);

			//游戏用户
			for (WORD i=0;i<m_wChairCount;i++)
			{
				//获取用户
				IServerUserItem * pIServerUserItem=GetTableUserItem(i);
				if ((pIServerUserItem==NULL)||(pIServerUserItem->IsClientReady()==false)) continue;

				m_pIMainServiceFrame->SendData(pIServerUserItem,MDM_GF_FRAME,SUB_GF_USER_CHAT,&UserChat,wSendSize);
			}

			//旁观用户
			WORD wEnumIndex=0;
			IServerUserItem * pIServerUserItem=NULL;

			//枚举用户
			do
			{
				//获取用户
				pIServerUserItem=EnumLookonUserItem(wEnumIndex++);
				if (pIServerUserItem==NULL) break;

				//发送数据
				if (pIServerUserItem->IsClientReady()==true)
				{
					m_pIMainServiceFrame->SendData(pIServerUserItem,MDM_GF_FRAME,SUB_GF_USER_CHAT,&UserChat,wSendSize);
				}
			} while (true);

			return true;
		}
	case SUB_GF_USER_EXPRESSION:	//用户表情
		{
			//效验参数
			ASSERT_ERR(wDataSize==sizeof(CMD_GF_C_UserExpression));
			if (wDataSize!=sizeof(CMD_GF_C_UserExpression)) return false;

			//变量定义
			CMD_GF_C_UserExpression * pUserExpression=(CMD_GF_C_UserExpression *)pData;

			//目标用户
			if ((pUserExpression->dwTargetUserID!=0)&&(SearchUserItem(pUserExpression->dwTargetUserID)==NULL))
			{
				ASSERT_ERR(FALSE);
				return true;
			}

			//状态判断
			if ((CServerRule::IsForfendGameChat(m_pGameServiceOption->dwServerRule)==true)&&(pIServerUserItem->GetMasterOrder()==0L))
			{
				SendGameMessage(pIServerUserItem,TEXT("抱歉，当前游戏房间禁止游戏聊天！"),SMT_CHAT);
				return true;
			}

			//权限判断
			if (CUserRight::CanRoomChat(pIServerUserItem->GetUserRight())==false)
			{
				SendGameMessage(pIServerUserItem,TEXT("抱歉，您没有游戏聊天的权限，若需要帮助，请联系游戏客服咨询！"),SMT_EJECT|SMT_CHAT);
				return true;
			}

			//构造消息
			CMD_GR_S_UserExpression UserExpression;
			ZeroMemory(&UserExpression,sizeof(UserExpression));

			//构造数据
			UserExpression.wItemIndex=pUserExpression->wItemIndex;
			UserExpression.dwSendUserID=pIServerUserItem->GetUserID();
			UserExpression.dwTargetUserID=pUserExpression->dwTargetUserID;

			//游戏用户
			for (WORD i=0;i<m_wChairCount;i++)
			{
				//获取用户
				IServerUserItem * pIServerUserItem=GetTableUserItem(i);
				if ((pIServerUserItem==NULL)||(pIServerUserItem->IsClientReady()==false)) continue;

				//发送数据
				m_pIMainServiceFrame->SendData(pIServerUserItem,MDM_GF_FRAME,SUB_GF_USER_EXPRESSION,&UserExpression,sizeof(UserExpression));
			}

			//旁观用户
			WORD wEnumIndex=0;
			IServerUserItem * pIServerUserItem=NULL;

			//枚举用户
			do
			{
				//获取用户
				pIServerUserItem=EnumLookonUserItem(wEnumIndex++);
				if (pIServerUserItem==NULL) break;

				//发送数据
				if (pIServerUserItem->IsClientReady()==true)
				{
					m_pIMainServiceFrame->SendData(pIServerUserItem,MDM_GF_FRAME,SUB_GF_USER_EXPRESSION,&UserExpression,sizeof(UserExpression));
				}
			} while (true);

			return true;
		}
	case SUB_GF_LOOKON_CONFIG:		//旁观配置
		{
			//效验参数
			ASSERT_ERR(wDataSize==sizeof(CMD_GF_LookonConfig));
			if (wDataSize<sizeof(CMD_GF_LookonConfig)) return false;

			//变量定义
			CMD_GF_LookonConfig * pLookonConfig=(CMD_GF_LookonConfig *)pData;

			//目标用户
			if ((pLookonConfig->dwUserID!=0)&&(SearchUserItem(pLookonConfig->dwUserID)==NULL))
			{
				ASSERT_ERR(FALSE);
				return true;
			}

			//用户效验
			ASSERT_ERR(pIServerUserItem->GetUserStatus()!=US_LOOKON);
			if (pIServerUserItem->GetUserStatus()==US_LOOKON) return false;

			//旁观处理
			if (pLookonConfig->dwUserID!=0L)
			{
				for (INT_PTR i=0;i<m_LookonUserItemArray.GetCount();i++)
				{
					//获取用户
					IServerUserItem * pILookonUserItem=m_LookonUserItemArray[i];
					if (pILookonUserItem->GetUserID()!=pLookonConfig->dwUserID) continue;
					if (pILookonUserItem->GetChairID()!=pIServerUserItem->GetChairID()) continue;

					//构造消息
					CMD_GF_LookonStatus LookonStatus;
					LookonStatus.cbAllowLookon=pLookonConfig->cbAllowLookon;

					//发送消息
					ASSERT_ERR(m_pIMainServiceFrame!=NULL);
					m_pIMainServiceFrame->SendData(pILookonUserItem,MDM_GF_FRAME,SUB_GF_LOOKON_STATUS,&LookonStatus,sizeof(LookonStatus));

					break;
				}
			}
			else
			{
				//设置判断
				bool bAllowLookon=(pLookonConfig->cbAllowLookon==TRUE)?true:false;
				if (bAllowLookon==m_bAllowLookon[pIServerUserItem->GetChairID()]) return true;

				//设置变量
				m_bAllowLookon[pIServerUserItem->GetChairID()]=bAllowLookon;

				//构造消息
				CMD_GF_LookonStatus LookonStatus;
				LookonStatus.cbAllowLookon=pLookonConfig->cbAllowLookon;

				//发送消息
				for (INT_PTR i=0;i<m_LookonUserItemArray.GetCount();i++)
				{
					//获取用户
					IServerUserItem * pILookonUserItem=m_LookonUserItemArray[i];
					if (pILookonUserItem->GetChairID()!=pIServerUserItem->GetChairID()) continue;

					//发送消息
					ASSERT_ERR(m_pIMainServiceFrame!=NULL);
					m_pIMainServiceFrame->SendData(pILookonUserItem,MDM_GF_FRAME,SUB_GF_LOOKON_STATUS,&LookonStatus,sizeof(LookonStatus));
				}
			}

			return true;
		}
	}

	return false;
}

//获取空位
WORD CTableFrame::GetNullChairID()
{
	//椅子搜索
	for (WORD i=0;i<m_wChairCount;i++)
	{
		if (m_TableUserItemArray[i]==NULL)
		{
			return i;
		}
	}

	return INVALID_CHAIR;
}

//随机空位
WORD CTableFrame::GetRandNullChairID()
{
	//椅子搜索
	WORD wIndex = 0;
	if ( m_pGameServiceOption->wKindID == GAME_CALLBAN_OX)
	{
		wIndex = 0;
	}
	else
	{
		wIndex = rand() % m_wChairCount;
	}
	for (WORD i=wIndex;i<m_wChairCount+wIndex;i++)
	{
		if (m_TableUserItemArray[i%m_wChairCount]==NULL)
		{
			return i%m_wChairCount;
		}
	}

	return INVALID_CHAIR;
}

//用户数目
WORD CTableFrame::GetSitUserCount()
{
	//变量定义
	WORD wUserCount=0;

	//数目统计
	for (WORD i=0;i<m_wChairCount;i++)
	{
		if (GetTableUserItem(i)!=NULL)
		{
			wUserCount++;
		}
	}

	return wUserCount;
}

//旁观数目
WORD CTableFrame::GetLookonUserCount()
{
	//获取数目
	INT_PTR nLookonCount=m_LookonUserItemArray.GetCount();

	return (WORD)(nLookonCount);
}

//断线数目
WORD CTableFrame::GetOffLineUserCount()
{
	//变量定义
	WORD wOffLineCount=0;

	//断线人数
	for (WORD i=0;i<m_wChairCount;i++)
	{
		if (m_dwOffLineTime[i]!=0L)
		{
			wOffLineCount++;
		}
	}

	return wOffLineCount;
}


//桌子状况
WORD CTableFrame::GetTableUserInfo(tagTableUserInfo & TableUserInfo)
{
	//设置变量
	ZeroMemory(&TableUserInfo,sizeof(TableUserInfo));

	//用户分析
	for (WORD i=0;i<m_pGameServiceAttrib->wChairCount;i++)
	{
		//获取用户
		IServerUserItem * pIServerUserItem=GetTableUserItem(i);
		if (pIServerUserItem==NULL) continue;

		//用户类型
		if (pIServerUserItem->IsAndroidUser()==false)
		{
			TableUserInfo.wTableUserCount++;
		}
		else
		{
			TableUserInfo.wTableAndroidCount++;
		}

		//准备判断
		if (pIServerUserItem->GetUserStatus()==US_READY)
		{
			TableUserInfo.wTableReadyCount++;
		}
	}

	//最少数目
	switch (m_cbStartMode)
	{
	case START_MODE_ALL_READY:		//所有准备
		{
			TableUserInfo.wMinUserCount=2;
			break;
		}
	case START_MODE_PAIR_READY:		//配对开始
		{
			TableUserInfo.wMinUserCount=2;
			break;
		}
	case START_MODE_TIME_CONTROL:	//时间控制
		{
			TableUserInfo.wMinUserCount=1;
			break;
		}
	case START_MODE_SYSTRM_BANKER:	//系统坐庄，最小开始人数			ZZL
		{
			TableUserInfo.wMinUserCount=1;
			break;
		}
	default:						//默认模式
		{
			TableUserInfo.wMinUserCount=m_pGameServiceAttrib->wChairCount;
			break;
		}
	}

	return TableUserInfo.wTableAndroidCount+TableUserInfo.wTableUserCount;
}

//配置桌子
bool CTableFrame::InitializationFrame(WORD wTableID, tagTableFrameParameter & TableFrameParameter)
{
	//设置变量
	m_wTableID=wTableID;
	m_wChairCount=TableFrameParameter.pGameServiceAttrib->wChairCount;

	//配置参数
	m_pGameParameter=TableFrameParameter.pGameParameter;
	m_pGameServiceAttrib=TableFrameParameter.pGameServiceAttrib;
	m_pGameServiceOption=TableFrameParameter.pGameServiceOption;

	//组件接口
	m_pITimerEngine=TableFrameParameter.pITimerEngine;
	m_pIMainServiceFrame=TableFrameParameter.pIMainServiceFrame;
	m_pIAndroidUserManager=TableFrameParameter.pIAndroidUserManager;
	m_pIKernelDataBaseEngine=TableFrameParameter.pIKernelDataBaseEngine;
	m_pIRecordDataBaseEngine=TableFrameParameter.pIRecordDataBaseEngine;

	//创建桌子
	IGameServiceManager * pIGameServiceManager=TableFrameParameter.pIGameServiceManager;
	m_pITableFrameSink=(ITableFrameSink *)pIGameServiceManager->CreateTableFrameSink(IID_ITableFrameSink,VER_ITableFrameSink);

	//错误判断
	if (m_pITableFrameSink==NULL)
	{
		ASSERT_ERR(FALSE);
		return false;
	}

	//设置桌子
	IUnknownEx * pITableFrame=QUERY_ME_INTERFACE(IUnknownEx);
	if (m_pITableFrameSink->Initialization(pITableFrame)==false) return false;

	//设置变量
	m_lCellScore=m_pGameServiceOption->lCellScore;

	g_szFilePath;
	ZeroMemory(g_szFilePath,CountArray(g_szFilePath));
	GetCurrentDirectory(sizeof(g_szFilePath), g_szFilePath);

	//扩展接口
	m_pITableUserAction=QUERY_OBJECT_PTR_INTERFACE(m_pITableFrameSink,ITableUserAction);
	m_pITableUserRequest=QUERY_OBJECT_PTR_INTERFACE(m_pITableFrameSink,ITableUserRequest);

	m_ServerFileLog.SetRoot(TEXT("./SLog/UserAction/%s(Server)"), m_pGameServiceOption->szServerName);

	//创建比赛模式
	if((TableFrameParameter.pGameServiceOption->wServerType&GAME_GENRE_MATCH)!=0 && TableFrameParameter.pIGameMatchServiceManager!=NULL)
	{
		IUnknownEx * pIUnknownEx=QUERY_ME_INTERFACE(IUnknownEx);
		IGameMatchServiceManager * pIGameMatchServiceManager=QUERY_OBJECT_PTR_INTERFACE(TableFrameParameter.pIGameMatchServiceManager,IGameMatchServiceManager);
		if (pIGameMatchServiceManager==NULL)
		{
			ASSERT_ERR(FALSE);
			return false;
		}
		m_pIGameMatchSink=(IGameMatchSink *)pIGameMatchServiceManager->CreateGameMatchSink(IID_IGameMatchSink,VER_IGameMatchSink);

		//错误判断
		if (m_pIGameMatchSink==NULL)
		{
			ASSERT_ERR(FALSE);
			return false;
		}

		//扩展接口
		m_pIMatchTableAction=QUERY_OBJECT_PTR_INTERFACE(m_pIGameMatchSink,ITableUserAction);
		if (m_pIGameMatchSink->InitTableFrameSink(pIUnknownEx)==false) 
		{
			return false;
		}
	}

	return true;
}

//起立动作
bool CTableFrame::PerformStandUpActionH5(IServerUserItem * pIServerUserItem, BYTE cbNotifyClient)
{
	//效验参数
	ASSERT_ERR(pIServerUserItem != NULL);
	ASSERT_ERR(pIServerUserItem->GetTableID() == m_wTableID);
	ASSERT_ERR(pIServerUserItem->GetChairID() <= m_wChairCount);
	//I_TRACE(TEXT("请求起立"));
	//用户属性
	WORD wChairID = pIServerUserItem->GetChairID();
	WORD wTableID = pIServerUserItem->GetTableID();
	BYTE cbUserStatus = pIServerUserItem->GetUserStatus();
	IServerUserItem * pITableUserItem = GetTableUserItem(wChairID);

	//游戏用户
	if ((m_bGameStarted == true)/*&& m_cbStartMode!=START_MODE_TIME_CONTROL*/ && ((cbUserStatus == US_PLAYING) || (cbUserStatus == US_OFFLINE)))
	{
		if (m_pGameServiceOption->wRoomType == 4 || m_pGameServiceAttrib->wChairCount == MAX_CHAIR)
		{
			BYTE cbConcludeReason = (cbUserStatus == US_OFFLINE) ? GER_NETWORK_ERROR : GER_USER_LEAVE;
			m_pITableFrameSink->OnEventGameConclude(wChairID, pIServerUserItem, cbConcludeReason);
		}
	}

	I_TRACE(TEXT("当前桌[%d] 起立玩家[%s][%d-%d]  桌子玩家[%s][%d-%d]"),m_wTableID,pIServerUserItem->GetNickName(),pIServerUserItem->GetTableID(),pIServerUserItem->GetChairID(),
		pITableUserItem->GetNickName(),pITableUserItem->GetTableID(),pITableUserItem->GetChairID());

	//设置变量
	if (pIServerUserItem == pITableUserItem)
	{
		//解锁元宝
		if (m_lFrozenedScore[wChairID] != 0L)
		{
			pIServerUserItem->UnFrozenedUserScore(m_lFrozenedScore[wChairID]);
			m_lFrozenedScore[wChairID] = 0L;
		}

		//事件通知
		if (m_pITableUserAction != NULL)
		{
			m_pITableUserAction->OnActionUserStandUp(wChairID, pIServerUserItem, false); //捕鱼游戏起立后会触发游戏结束，改变状态
		}

		//结束桌子
		ConcludeTable();

		//用户状态
		pIServerUserItem->SetClientReady(false);
		
		if ( pIServerUserItem->GetUserStatus() != US_FREE) //结束游戏时有改变状态
		{
			if (pIServerUserItem->GetUserStatus() == US_OFFLINE)
				pIServerUserItem->SetUserStatus(US_NULL, INVALID_TABLE, INVALID_CHAIR,cbNotifyClient);
			else {
// 				CString cs;
// 				cs.Format(TEXT("【玩家请求起立】桌子[%d] 玩家[%d] 桌椅[%d-%d] 状态[%d] 通知[%d]"), m_wTableID, pIServerUserItem->GetUserID(), pIServerUserItem->GetTableID(), pIServerUserItem->GetChairID(), pIServerUserItem->GetUserStatus(), cbNotifyClient);
// 				m_ServerFileLog.Log(cs.GetBuffer(0));
				pIServerUserItem->SetUserStatus(US_FREE, INVALID_TABLE, INVALID_CHAIR, cbNotifyClient);
			}
		}

		//设置变量
		m_TableUserItemArray[wChairID] = NULL;

		return true;
	}
	else
	{
		//起立处理
		for (INT_PTR i = 0; i < m_LookonUserItemArray.GetCount(); i++)
		{
			if (pIServerUserItem == m_LookonUserItemArray[i])
			{
				//删除子项
				m_LookonUserItemArray.RemoveAt(i);

				//事件通知
				if (m_pITableUserAction != NULL)
				{
					m_pITableUserAction->OnActionUserStandUp(wChairID, pIServerUserItem, true);
				}

				//用户状态
				pIServerUserItem->SetClientReady(false);
				pIServerUserItem->SetUserStatus(US_FREE, INVALID_TABLE, INVALID_CHAIR,cbNotifyClient);

				return true;
			}
		}

	}

	return true;
}

//起立动作
bool CTableFrame::PerformStandUpAction(IServerUserItem * pIServerUserItem, BYTE cbNotifyClient)
{
	//效验参数
	ASSERT_ERR(pIServerUserItem!=NULL);
	ASSERT_ERR(pIServerUserItem->GetTableID()==m_wTableID);
	ASSERT_ERR(pIServerUserItem->GetChairID()<=m_wChairCount);

	tagUserInfo* pUserInfo = pIServerUserItem->GetUserInfo();
	if ( pUserInfo->cbClientKind == CLIENT_KIND_WEBSOCKET )
	{
		//I_TRACE(TEXT("起立动作 cbNotifyClient[%d]"),cbNotifyClient);
		return PerformStandUpActionH5(pIServerUserItem,cbNotifyClient);
	}

	//用户属性
	WORD wChairID=pIServerUserItem->GetChairID();
	WORD wTableID=pIServerUserItem->GetTableID();
	BYTE cbUserStatus=pIServerUserItem->GetUserStatus();
	IServerUserItem * pITableUserItem=GetTableUserItem(wChairID);

	//游戏用户
	if ((m_bGameStarted==true)/*&& m_cbStartMode!=START_MODE_TIME_CONTROL*/ &&((cbUserStatus==US_PLAYING)||(cbUserStatus==US_OFFLINE)))
	{
		if ( m_pGameServiceOption->wRoomType == 4 ) //试玩场强退解散游戏
		{
			BYTE cbConcludeReason=(cbUserStatus==US_OFFLINE)?GER_NETWORK_ERROR:GER_USER_LEAVE;
			m_pITableFrameSink->OnEventGameConclude(wChairID,pIServerUserItem,cbConcludeReason);
		}
		else if ( m_pGameServiceOption->wKindID == 301 ) //二人麻将
		{
			BYTE cbConcludeReason=(cbUserStatus==US_OFFLINE)?GER_NETWORK_ERROR:GER_USER_LEAVE;
			m_pITableFrameSink->OnEventGameConclude(wChairID,pIServerUserItem,cbConcludeReason);
		}
		else
		{
			//离开判断
 			BYTE cbConcludeReason=(cbUserStatus==US_OFFLINE)?GER_NETWORK_ERROR:GER_USER_LEAVE;
 
 			if ( m_pGameServiceAttrib->wChairCount == MAX_CHAIR ) //百人走这里
 				m_pITableFrameSink->OnEventGameConclude(wChairID,pIServerUserItem,cbConcludeReason);
 			
		}
	}


	//设置变量
	if (pIServerUserItem==pITableUserItem)
	{
		//解锁元宝
		if (m_lFrozenedScore[wChairID]!=0L)
		{
			pIServerUserItem->UnFrozenedUserScore(m_lFrozenedScore[wChairID]);
			m_lFrozenedScore[wChairID]=0L;
		}

		//事件通知
		if (m_pITableUserAction!=NULL)
		{
			m_pITableUserAction->OnActionUserStandUp(wChairID,pIServerUserItem,false);
		}

		//事件通知
		if(m_pIMatchTableAction!=NULL) m_pIMatchTableAction->OnActionUserStandUp(wChairID,pIServerUserItem,false);

		//结束桌子
		ConcludeTable();

		//用户状态
		pIServerUserItem->SetClientReady(false);
		//I_TRACE(TEXT("机器人起立:%d"),pIServerUserItem->GetUserID());
		pIServerUserItem->SetUserStatus((cbUserStatus==US_OFFLINE)?US_NULL:US_FREE,INVALID_TABLE,INVALID_CHAIR,cbNotifyClient);

		//设置变量
		m_TableUserItemArray[wChairID] = NULL;

		//开始判断
		if (EfficacyStartGame(INVALID_CHAIR)==true)
		{
			StartGame();
		}

		//变量定义
		bool bTableLocked=IsTableLocked();
		bool bTableStarted=IsTableStarted();
		WORD wTableUserCount=GetSitUserCount();

		//桌子信息
		if (wTableUserCount==0)
		{
			m_dwTableOwnerID=0L;
			m_szEnterPassword[0]=0;
		}

		//踢走旁观
		if (wTableUserCount==0)
		{
			for (INT_PTR i=0;i<m_LookonUserItemArray.GetCount();i++)
			{
				SendGameMessage(m_LookonUserItemArray[i],TEXT("此游戏桌的所有玩家已经离开了！"),SMT_CLOSE_GAME|SMT_EJECT);
			}
		}

		//发送状态
		if ((bTableLocked!=IsTableLocked())||(bTableStarted!=IsTableStarted()))
		{
			SendTableStatus();
		}

		return true;
	}
	else
	{
		//起立处理
		for (INT_PTR i=0;i<m_LookonUserItemArray.GetCount();i++)
		{
			if (pIServerUserItem==m_LookonUserItemArray[i])
			{
				//删除子项
				m_LookonUserItemArray.RemoveAt(i);

				//事件通知
				if (m_pITableUserAction!=NULL)
				{
					m_pITableUserAction->OnActionUserStandUp(wChairID,pIServerUserItem,true);
				}

				//事件通知
				if(m_pIMatchTableAction!=NULL) m_pIMatchTableAction->OnActionUserStandUp(wChairID,pIServerUserItem,true);

				//用户状态
				pIServerUserItem->SetClientReady(false);
				pIServerUserItem->SetUserStatus(US_FREE,INVALID_TABLE,INVALID_CHAIR, cbNotifyClient);

				return true;
			}
		}
		
		//错误断言
		ASSERT_ERR(FALSE);
	}

	return true;
}

//旁观动作
bool CTableFrame::PerformLookonAction(WORD wChairID, IServerUserItem * pIServerUserItem)
{
	//效验参数
	ASSERT_ERR((pIServerUserItem!=NULL)&&(wChairID<m_wChairCount));
	ASSERT_ERR((pIServerUserItem->GetTableID()==INVALID_TABLE)&&(pIServerUserItem->GetChairID()==INVALID_CHAIR));

	//变量定义
	tagUserInfo * pUserInfo=pIServerUserItem->GetUserInfo();
	tagUserRule * pUserRule=pIServerUserItem->GetUserRule();
	IServerUserItem * pITableUserItem=GetTableUserItem(wChairID);

	//游戏状态
	if ((m_bGameStarted==false)&&(pIServerUserItem->GetMasterOrder()==0L))
	{
		SendRequestFailure(pIServerUserItem,TEXT("游戏还没有开始，不能旁观此游戏桌！"),REQUEST_FAILURE_NORMAL);
		return false;
	}

	//模拟处理
	if (m_pGameServiceAttrib->wChairCount < MAX_CHAIR && pIServerUserItem->IsAndroidUser()==false)
	{
		//定义变量
		CAttemperEngineSink * pAttemperEngineSink=(CAttemperEngineSink *)m_pIMainServiceFrame;

		//查找机器
		for (WORD i=0; i<m_pGameServiceAttrib->wChairCount; i++)
		{
			//获取用户
			IServerUserItem *pIUserItem=m_TableUserItemArray[i];
			if(pIUserItem==NULL) continue;
			if(pIUserItem->IsAndroidUser()==false)break;

			//获取参数
			tagBindParameter * pBindParameter=pAttemperEngineSink->GetBindParameter(pIUserItem->GetBindIndex());
			IAndroidUserItem * pIAndroidUserItem=m_pIAndroidUserManager->SearchAndroidUserItem(pIUserItem->GetUserID(),pBindParameter->dwSocketID);
			tagAndroidParameter * pAndroidParameter=pIAndroidUserItem->GetAndroidParameter();

			//模拟判断
			if((pAndroidParameter->dwServiceGender&ANDROID_SIMULATE)!=0
				&& (pAndroidParameter->dwServiceGender&ANDROID_PASSIVITY)==0
				&& (pAndroidParameter->dwServiceGender&ANDROID_INITIATIVE)==0)
			{
				SendRequestFailure(pIServerUserItem,TEXT("抱歉，当前游戏桌子禁止用户旁观！"),REQUEST_FAILURE_NORMAL);
				return false;
			}

			break;
		}
	}


	//旁观判断
	if (CServerRule::IsAllowAndroidSimulate(m_pGameServiceOption->dwServerRule)==true
		&& (CServerRule::IsAllowAndroidAttend(m_pGameServiceOption->dwServerRule)==false))
	{
		if ((pITableUserItem!=NULL)&&(pITableUserItem->IsAndroidUser()==true))
		{
			SendRequestFailure(pIServerUserItem,TEXT("抱歉，当前游戏房间禁止用户旁观！"),REQUEST_FAILURE_NORMAL);
			return false;
		}
	}

	//状态判断
	if ((CServerRule::IsForfendGameLookon(m_pGameServiceOption->dwServerRule)==true)&&(pIServerUserItem->GetMasterOrder()==0))
	{
		SendRequestFailure(pIServerUserItem,TEXT("抱歉，当前游戏房间禁止用户旁观！"),REQUEST_FAILURE_NORMAL);
		return false;
	}

	//椅子判断
	if ((pITableUserItem==NULL)&&(pIServerUserItem->GetMasterOrder()==0L))
	{
		SendRequestFailure(pIServerUserItem,TEXT("您所请求的位置没有游戏玩家，无法旁观此游戏桌"),REQUEST_FAILURE_NORMAL);
		return false;
	}

	//密码效验
	if ((IsTableLocked()==true)&&(pIServerUserItem->GetMasterOrder()==0L)&&(lstrcmp(pUserRule->szPassword,m_szEnterPassword)!=0))
	{
		SendRequestFailure(pIServerUserItem,TEXT("游戏桌进入密码不正确，不能旁观游戏！"),REQUEST_FAILURE_PASSWORD);
		return false;
	}

	//扩展效验
	if (m_pITableUserRequest!=NULL)
	{
		//变量定义
		tagRequestResult RequestResult;
		ZeroMemory(&RequestResult,sizeof(RequestResult));

		//坐下效验
		if (m_pITableUserRequest->OnUserRequestLookon(wChairID,pIServerUserItem,RequestResult)==false)
		{
			//发送信息
			SendRequestFailure(pIServerUserItem,RequestResult.szFailureReason,RequestResult.cbFailureCode);

			return false;
		}
	}

	//设置用户
	m_LookonUserItemArray.Add(pIServerUserItem);

	//用户状态
	pIServerUserItem->SetClientReady(false);
	pIServerUserItem->SetUserStatus(US_LOOKON,m_wTableID,wChairID);

	//事件通知
	if (m_pITableUserAction!=NULL)
	{
		m_pITableUserAction->OnActionUserSitDown(wChairID,pIServerUserItem,true);
	}

	//事件通知
	if(m_pIMatchTableAction!=NULL) m_pIMatchTableAction->OnActionUserSitDown(wChairID,pIServerUserItem,true);
	return true;
}

//坐下动作
bool CTableFrame::PerformSitDownActionH5(WORD wChairID, IServerUserItem * pIServerUserItem, LPCTSTR lpszPassword)
{
	//效验参数
	ASSERT_ERR((pIServerUserItem != NULL) && (wChairID < m_wChairCount));
	ASSERT_ERR((pIServerUserItem->GetTableID() == INVALID_TABLE) && (pIServerUserItem->GetChairID() == INVALID_CHAIR));

	//变量定义
	tagUserInfo * pUserInfo = pIServerUserItem->GetUserInfo();
	tagUserRule * pUserRule = pIServerUserItem->GetUserRule();
	IServerUserItem * pITableUserItem = GetTableUserItem(wChairID);

	//积分变量
	SCORE lUserScore = pIServerUserItem->GetUserScore();
	SCORE lMinTableScore = m_pGameServiceOption->lMinTableScore;  //进入分
	SCORE lLessEnterScore = m_pITableFrameSink->QueryLessEnterScore(wChairID, pIServerUserItem);

	CAttemperEngineSink * pAttemperEngineSink = (CAttemperEngineSink *)m_pIMainServiceFrame;
	tagBindParameter * pBindParameter = pAttemperEngineSink->GetBindParameter(pIServerUserItem->GetBindIndex());
	if (pBindParameter == NULL) return false;
	//构造信息
	TCHAR szDescribe[128] = TEXT("");

	//动态加入
	bool bDynamicJoin = true;
	if (m_pGameServiceAttrib->cbDynamicJoin == FALSE) bDynamicJoin = false;
	if (CServerRule::IsAllowDynamicJoin(m_pGameServiceOption->dwServerRule) == false) bDynamicJoin = false;

	//游戏状态
	if ((m_bGameStarted == true) && (bDynamicJoin == false))
	{
		_sntprintf(szDescribe,CountArray(szDescribe),TEXT("游戏已经开始了，现在不能进入游戏桌!"));
		m_pIMainServiceFrame->SendLogonFailure(szDescribe, 0, pBindParameter->dwSocketID);
		I_TRACE(szDescribe);
		return false;
	}

	//椅子判断
	if (pITableUserItem != NULL)
	{
		_sntprintf(szDescribe, CountArray(szDescribe), TEXT("椅子已经被 [ %s ] 占领了，下次动作要快点哟！"), pITableUserItem->GetNickName());
		I_TRACE(TEXT("%s"), szDescribe);
		//发送信息
		m_pIMainServiceFrame->SendLogonFailure(szDescribe, 0, pBindParameter->dwSocketID);
		return false;
	}

	//密码效验
	if (((IsTableLocked() == true) && (pIServerUserItem->GetMasterOrder() == 0L))
		&& ((lpszPassword == NULL) || (lstrcmp(lpszPassword, m_szEnterPassword) != 0)))
	{
		m_pIMainServiceFrame->SendLogonFailure(TEXT("游戏桌进入密码不正确，不能加入游戏！"), 0, pBindParameter->dwSocketID);
		I_TRACE(TEXT("游戏桌进入密码不正确，不能加入游戏！"));
		return false;
	}

	//积分限制
	if ((m_pGameServiceOption->lMinEnterScore != 0L) && (lUserScore < m_pGameServiceOption->lMinEnterScore))
	{
		_sntprintf(szDescribe, CountArray(szDescribe), TEXT("至少需要%0.2f的金币，您的金币不够，不能加入！"), (float)m_pGameServiceOption->lMinEnterScore / 1000);
		I_TRACE(TEXT("%s"), szDescribe);
		//发送信息
		m_pIMainServiceFrame->SendLogonFailure(szDescribe, 0, pBindParameter->dwSocketID);

		return false;
	}


	//设置变量
	m_TableUserItemArray[wChairID] = pIServerUserItem;

	//用户状态
	if ((IsGameStarted() == false) || (m_cbStartMode != START_MODE_TIME_CONTROL))
	{
		pIServerUserItem->SetClientReady(false);
		//pIServerUserItem->SetUserStatus(US_SIT, m_wTableID, wChairID);
		I_TRACE(TEXT("%s开始坐下 %d-%d"),pIServerUserItem->GetNickName(),m_wTableID,wChairID);
		pIServerUserItem->SetUserStatus(US_READY, m_wTableID, wChairID);
	}
	else
	{
		//设置变量
		m_wOffLineCount[wChairID] = 0L;
		m_dwOffLineTime[wChairID] = 0L;

		//锁定元宝
		if (m_pGameServiceOption->lServiceScore > 0L)
		{
			m_lFrozenedScore[wChairID] = m_pGameServiceOption->lServiceScore;

			pIServerUserItem->FrozenedUserScore(m_pGameServiceOption->lServiceScore);
		}

		//设置状态
		pIServerUserItem->SetClientReady(false);
		pIServerUserItem->SetUserStatus(US_PLAYING, m_wTableID, wChairID);
	}

	//事件通知
	if (m_pITableUserAction != NULL)
	{
		m_pITableUserAction->OnActionUserSitDown(wChairID, pIServerUserItem, false);
	}

	return true;
}

//坐下动作
bool CTableFrame::PerformSitDownAction(WORD wChairID, IServerUserItem * pIServerUserItem, LPCTSTR lpszPassword)
{
	//效验参数
	ASSERT_ERR((pIServerUserItem!=NULL)&&(wChairID<m_wChairCount));
	ASSERT_ERR((pIServerUserItem->GetTableID()==INVALID_TABLE)&&(pIServerUserItem->GetChairID()==INVALID_CHAIR));

	//变量定义
	tagUserInfo * pUserInfo=pIServerUserItem->GetUserInfo();

	if (pUserInfo && pUserInfo->cbClientKind == CLIENT_KIND_WEBSOCKET )
	{
		return PerformSitDownActionH5(wChairID, pIServerUserItem, lpszPassword);
	}

	tagUserRule * pUserRule=pIServerUserItem->GetUserRule();
	IServerUserItem * pITableUserItem=GetTableUserItem(wChairID);

	//积分变量
	SCORE lUserScore=pIServerUserItem->GetUserScore();
	SCORE lMinTableScore=m_pGameServiceOption->lMinTableScore;  //进入分
	SCORE lLessEnterScore=m_pITableFrameSink->QueryLessEnterScore(wChairID,pIServerUserItem);

	CAttemperEngineSink * pAttemperEngineSink = (CAttemperEngineSink *)m_pIMainServiceFrame;
	tagBindParameter * pBindParameter = pAttemperEngineSink->GetBindParameter(pIServerUserItem->GetBindIndex());

	m_wDrawCount = 0;

// 	//状态判断
// 	if ((CServerRule::IsForfendGameEnter(m_pGameServiceOption->dwServerRule)==true)&&(pIServerUserItem->GetMasterOrder()==0))
// 	{
// 		SendRequestFailure(pIServerUserItem,TEXT("抱歉，当前游戏桌子禁止用户进入！"),REQUEST_FAILURE_NORMAL);
// 		return false;
// 	}

	//模拟处理
// 	if (m_pGameServiceAttrib->wChairCount < MAX_CHAIR && pIServerUserItem->IsAndroidUser()==false)
// 	{
// 		//定义变量
// 		CAttemperEngineSink * pAttemperEngineSink=(CAttemperEngineSink *)m_pIMainServiceFrame;
// 
// 		//查找机器
// 		for (WORD i=0; i<m_pGameServiceAttrib->wChairCount; i++)
// 		{
// 			//获取用户
// 			IServerUserItem *pIUserItem=m_TableUserItemArray[i];
// 			if(pIUserItem==NULL) continue;
// 			if(pIUserItem->IsAndroidUser()==false)break;
// 
// 			//获取参数
// 			tagBindParameter * pBindParameter=pAttemperEngineSink->GetBindParameter(pIUserItem->GetBindIndex());
// 			IAndroidUserItem * pIAndroidUserItem=m_pIAndroidUserManager->SearchAndroidUserItem(pIUserItem->GetUserID(),pBindParameter->dwSocketID);
// 			tagAndroidParameter * pAndroidParameter=pIAndroidUserItem->GetAndroidParameter();
// 
// 			//模拟判断
// 			if((pAndroidParameter->dwServiceGender&ANDROID_SIMULATE)!=0
// 				&& (pAndroidParameter->dwServiceGender&ANDROID_PASSIVITY)==0
// 				&& (pAndroidParameter->dwServiceGender&ANDROID_INITIATIVE)==0)
// 			{
// 				SendRequestFailure(pIServerUserItem,TEXT("抱歉，当前游戏桌子禁止用户进入！"),REQUEST_FAILURE_NORMAL);
// 				return false;
// 			}
// 
// 			break;
// 		}
// 	}

	//动态加入
	bool bDynamicJoin=true;
	if (m_pGameServiceAttrib->cbDynamicJoin==FALSE) bDynamicJoin=false;
	if (CServerRule::IsAllowDynamicJoin(m_pGameServiceOption->dwServerRule)==false) bDynamicJoin=false;

	//游戏状态
	if ((m_bGameStarted==true)&&(bDynamicJoin==false))
	{
		m_pIMainServiceFrame->SendLogonFailure(TEXT("游戏已经开始了，现在不能进入游戏桌！"),0,pBindParameter->dwSocketID);
		I_TRACE(TEXT("游戏已经开始了，现在不能进入游戏桌"));
		return false;
	}

	//椅子判断
	if (pITableUserItem!=NULL)
	{
		//构造信息
		TCHAR szDescribe[128]=TEXT("");
		_sntprintf(szDescribe,CountArray(szDescribe),TEXT("椅子已经被 [ %s ] 占领了，下次动作要快点哟！"),pITableUserItem->GetNickName());
			I_TRACE(TEXT("%s"),szDescribe);
		//发送信息
		m_pIMainServiceFrame->SendLogonFailure(szDescribe,0,pBindParameter->dwSocketID);
		

		return false;
	}

	//密码效验
	if(((IsTableLocked()==true)&&(pIServerUserItem->GetMasterOrder()==0L))
		&&((lpszPassword==NULL)||(lstrcmp(lpszPassword,m_szEnterPassword)!=0)))
	{
		m_pIMainServiceFrame->SendLogonFailure(TEXT("游戏桌进入密码不正确，不能加入游戏！"),0,pBindParameter->dwSocketID);
		I_TRACE(TEXT("游戏桌进入密码不正确，不能加入游戏！"));
		return false;
	}
	
	//积分限制
	if ((m_pGameServiceOption->lMinEnterScore != 0L) && (lUserScore < m_pGameServiceOption->lMinEnterScore))
	{
		//构造信息
		TCHAR szDescribe[128]=TEXT("");
		_sntprintf(szDescribe,CountArray(szDescribe),TEXT("加入游戏至少需要%0.2f的金币，您的金币不够，不能加入！"),lMinTableScore/1000);
		I_TRACE(TEXT("%s"),szDescribe);
		//发送信息
		m_pIMainServiceFrame->SendLogonFailure(szDescribe,0,pBindParameter->dwSocketID);
		ToSaveScore(pIServerUserItem);

		return false;
	}

	//规则效验
	//if (EfficacyIPAddress(pIServerUserItem)==false) return false;
	//if (EfficacyScoreRule(pIServerUserItem)==false) return false;

	//扩展效验
	if (m_pITableUserRequest!=NULL)
	{
		//变量定义
		tagRequestResult RequestResult;
		ZeroMemory(&RequestResult,sizeof(RequestResult));

		//坐下效验
		if (m_pITableUserRequest->OnUserRequestSitDown(wChairID,pIServerUserItem,RequestResult)==false)
		{
			//发送信息
			m_pIMainServiceFrame->SendLogonFailure(RequestResult.szFailureReason,RequestResult.cbFailureCode,pBindParameter->dwSocketID);
			I_TRACE(TEXT("%s"),RequestResult.szFailureReason);
			return false;
		}
	}

	//设置变量
	m_TableUserItemArray[wChairID]=pIServerUserItem;

	//用户状态
	if ((IsGameStarted()==false)||(m_cbStartMode!=START_MODE_TIME_CONTROL))
	{
// 		if ((m_pGameServiceOption->wServerType&GAME_GENRE_MATCH)==0)
// 		{
// 			pIServerUserItem->SetClientReady(false);
// 			pIServerUserItem->SetUserStatus(US_SIT,m_wTableID,wChairID);
// 		}
//  		else
 		{
 			pIServerUserItem->SetClientReady(false);
 			pIServerUserItem->SetUserStatus(US_READY,m_wTableID,wChairID);
 		}
	}
	else
	{
		//设置变量
		m_wOffLineCount[wChairID]=0L;
		m_dwOffLineTime[wChairID]=0L;

		//锁定元宝
		if (m_pGameServiceOption->lServiceScore>0L)
		{
			m_lFrozenedScore[wChairID]=m_pGameServiceOption->lServiceScore;

			pIServerUserItem->FrozenedUserScore(m_pGameServiceOption->lServiceScore);
		}

		//设置状态
		pIServerUserItem->SetClientReady(false);
		pIServerUserItem->SetUserStatus(US_PLAYING,m_wTableID,wChairID);
	}

	//桌子信息
	if (GetSitUserCount()==1)
	{
		//状态变量
		bool bTableLocked=IsTableLocked();

		//设置变量
		m_dwTableOwnerID=pIServerUserItem->GetUserID();
		lstrcpyn(m_szEnterPassword,pUserRule->szPassword,CountArray(m_szEnterPassword));

		//发送状态
		if (bTableLocked!=IsTableLocked()) SendTableStatus();
	}	

	//事件通知
	if (m_pITableUserAction!=NULL)
	{
		m_pITableUserAction->OnActionUserSitDown(wChairID,pIServerUserItem,false);
	}

	//事件通知
	if(m_pIMatchTableAction!=NULL) m_pIMatchTableAction->OnActionUserSitDown(wChairID,pIServerUserItem,false);

	//SetGameTimer(IDI_USER_READY_DETECT,32*1000,1,0);

	return true;
}

//桌子状态
bool CTableFrame::SendTableStatus()
{
	//客户端不处理该消息
	return true;
	//变量定义
	CMD_GR_TableStatus TableStatus;
	ZeroMemory(&TableStatus,sizeof(TableStatus));

	//构造数据
	TableStatus.wTableID=m_wTableID;
	TableStatus.TableStatus.cbTableLock=IsTableLocked()?TRUE:FALSE;
	TableStatus.TableStatus.cbPlayStatus=IsTableStarted()?TRUE:FALSE;

	

	//电脑数据
	m_pIMainServiceFrame->SendData(BG_COMPUTER,MDM_GR_STATUS,SUB_GR_TABLE_STATUS,&TableStatus,sizeof(TableStatus));

	//手机数据

	return true;
}

//请求失败
bool CTableFrame::SendRequestFailure(IServerUserItem * pIServerUserItem, LPCTSTR pszDescribe, LONG lErrorCode)
{
	//变量定义
	CMD_GR_RequestFailure RequestFailure;
	ZeroMemory(&RequestFailure,sizeof(RequestFailure));

	//构造数据
	RequestFailure.lErrorCode=lErrorCode;
	lstrcpyn(RequestFailure.szDescribeString,pszDescribe,CountArray(RequestFailure.szDescribeString));

	//发送数据
	WORD wDataSize=CountStringBuffer(RequestFailure.szDescribeString);
	WORD wHeadSize=sizeof(RequestFailure)-sizeof(RequestFailure.szDescribeString);
	m_pIMainServiceFrame->SendData(pIServerUserItem,MDM_GR_USER,SUB_GR_REQUEST_FAILURE,&RequestFailure,wHeadSize+wDataSize);

	return true;
}

//开始效验
bool CTableFrame::EfficacyStartGame(WORD wReadyChairID)
{
	//状态判断
	if (m_bGameStarted==true) return false;

	//模式过滤
	if (m_cbStartMode==START_MODE_TIME_CONTROL) return false;
	if (m_cbStartMode==START_MODE_MASTER_CONTROL) return false;

	//准备人数
	WORD wReadyUserCount=0;
	for (WORD i=0;i<m_wChairCount;i++)
	{
		//获取用户
		IServerUserItem * pITableUserItem=GetTableUserItem(i);
		if (pITableUserItem==NULL) continue;

		//用户统计
		if (pITableUserItem!=NULL)
		{
			//状态判断
			if (pITableUserItem->IsClientReady()==false) return false;
			BYTE cbUserStatus = pITableUserItem->GetUserStatus();
			//传进来的椅子用户不用判断状态，该用户可能已经掉线
			if ((wReadyChairID!=i)&&(cbUserStatus!=US_READY)) return false;

			//用户计数
			wReadyUserCount++;
		}
	}

	//开始处理
	switch (m_cbStartMode)
	{
	case START_MODE_ALL_READY:			//所有准备
		{
			//数目判断
			if ( m_pGameServiceOption->wKindID==GAME_CALLBAN_OX)
			{
				if (wReadyUserCount >= 3L) return true;
			}
			else
			{
				if (wReadyUserCount >= 2L) return true;
			}

			return false;
		}
	case START_MODE_FULL_READY:			//满人开始
		{
			//人数判断
			if (wReadyUserCount==m_wChairCount) return true;

			return false;
		}
	case START_MODE_PAIR_READY:			//配对开始
		{
			//数目判断
			if (wReadyUserCount==m_wChairCount) return true;
			if ((wReadyUserCount<2L)||(wReadyUserCount%2)!=0) return false;

			//位置判断
			for (WORD i=0;i<m_wChairCount/2;i++)
			{
				//获取用户
				IServerUserItem * pICurrentUserItem=GetTableUserItem(i);
				IServerUserItem * pITowardsUserItem=GetTableUserItem(i+m_wChairCount/2);

				//位置过滤
				if ((pICurrentUserItem==NULL)&&(pITowardsUserItem!=NULL)) return false;
				if ((pICurrentUserItem!=NULL)&&(pITowardsUserItem==NULL)) return false;
			}

			return true;
		}
	case START_MODE_SYSTRM_BANKER:		// 系统坐庄   ZZL
		{
			if(wReadyUserCount >= 1L)
				return true;
			return false;
		}
	default:
		{
			ASSERT_ERR(FALSE);
			return false;
		}
	}

	return false;
}

//地址效验
bool CTableFrame::EfficacyIPAddress(IServerUserItem * pIServerUserItem)
{
	//管理员不受限制
	if(pIServerUserItem->GetMasterOrder()!=0) return true;

	//规则判断
	if (CServerRule::IsForfendGameRule(m_pGameServiceOption->dwServerRule)==true) return true;

	//地址效验
	const tagUserRule * pUserRule=pIServerUserItem->GetUserRule(),*pTableUserRule=NULL;
	bool bCheckSameIP=pUserRule->bLimitSameIP;
	for (WORD i=0;i<m_wChairCount;i++)
	{
		//获取用户
		IServerUserItem * pITableUserItem=GetTableUserItem(i);
		if (pITableUserItem!=NULL && (!pITableUserItem->IsAndroidUser()) && (pITableUserItem->GetMasterOrder()==0))
		{
			pTableUserRule=pITableUserItem->GetUserRule();
			if (pTableUserRule->bLimitSameIP==true) 
			{
				bCheckSameIP=true;
				break;
			}
		}
	}

	//地址效验
	if (bCheckSameIP==true)
	{
		DWORD dwUserIP=pIServerUserItem->GetClientAddr();
		for (WORD i=0;i<m_wChairCount;i++)
		{
			//获取用户
			IServerUserItem * pITableUserItem=GetTableUserItem(i);
			if ((pITableUserItem!=NULL)&&(pITableUserItem != pIServerUserItem)&&(!pITableUserItem->IsAndroidUser())&&(pITableUserItem->GetMasterOrder()==0)&&(pITableUserItem->GetClientAddr()==dwUserIP))
			{
				if (!pUserRule->bLimitSameIP)
				{
					//发送信息
					LPCTSTR pszDescribe=TEXT("此游戏桌玩家设置了不跟相同 IP 地址的玩家游戏，您 IP 地址与此玩家的 IP 地址相同，不能加入游戏！");
					SendRequestFailure(pIServerUserItem,pszDescribe,REQUEST_FAILURE_QUIT);
					return false;
				}
				else
				{
					//发送信息
					LPCTSTR pszDescribe=TEXT("您设置了不跟相同 IP 地址的玩家游戏，此游戏桌存在与您 IP 地址相同的玩家，不能加入游戏！");
					SendRequestFailure(pIServerUserItem,pszDescribe,REQUEST_FAILURE_QUIT);
					return false;
				}
			}
		}
		for (WORD i=0;i<m_wChairCount-1;i++)
		{
			//获取用户
			IServerUserItem * pITableUserItem=GetTableUserItem(i);
			if (pITableUserItem!=NULL && (!pITableUserItem->IsAndroidUser()) && (pITableUserItem->GetMasterOrder()==0))
			{
				for (WORD j=i+1;j<m_wChairCount;j++)
				{
					//获取用户
					IServerUserItem * pITableNextUserItem=GetTableUserItem(j);
					if ((pITableNextUserItem!=NULL) && (!pITableNextUserItem->IsAndroidUser()) && (pITableNextUserItem->GetMasterOrder()==0)&&(pITableUserItem->GetClientAddr()==pITableNextUserItem->GetClientAddr()))
					{
						LPCTSTR pszDescribe=TEXT("您设置了不跟相同 IP 地址的玩家游戏，此游戏桌存在 IP 地址相同的玩家，不能加入游戏！");
						SendRequestFailure(pIServerUserItem,pszDescribe,REQUEST_FAILURE_QUIT);
						return false;
					}
				}
			}
		}
	}
	return true;
}

//积分效验
bool CTableFrame::EfficacyScoreRule(IServerUserItem * pIServerUserItem)
{
	//管理员不受限制
	if(pIServerUserItem->GetMasterOrder()!=0) return true;

	//规则判断
	if (CServerRule::IsForfendGameRule(m_pGameServiceOption->dwServerRule)==true) return true;

	//变量定义
	WORD wWinRate=pIServerUserItem->GetUserWinRate();
	WORD wFleeRate=pIServerUserItem->GetUserFleeRate();

	//积分范围
	for (WORD i=0;i<m_wChairCount;i++)
	{
		//获取用户
		IServerUserItem * pITableUserItem=GetTableUserItem(i);

		//规则效验
		if (pITableUserItem!=NULL)
		{
			//获取规则
			tagUserRule * pTableUserRule=pITableUserItem->GetUserRule();

			//逃率效验
			if ((pTableUserRule->bLimitFleeRate)&&(wFleeRate>pTableUserRule->wMaxFleeRate))
			{
				//构造信息
				TCHAR szDescribe[128]=TEXT("");
				_sntprintf(szDescribe,CountArray(szDescribe),TEXT("您的逃跑率太高，与 %s 设置的设置不符，不能加入游戏！"),pITableUserItem->GetNickName());

				//发送信息
				SendRequestFailure(pIServerUserItem,szDescribe,REQUEST_FAILURE_QUIT);

				return false;
			}

			//胜率效验
			if ((pTableUserRule->bLimitWinRate)&&(wWinRate<pTableUserRule->wMinWinRate))
			{
				//构造信息
				TCHAR szDescribe[128]=TEXT("");
				_sntprintf(szDescribe,CountArray(szDescribe),TEXT("您的胜率太低，与 %s 设置的设置不符，不能加入游戏！"),pITableUserItem->GetNickName());

				//发送信息
				SendRequestFailure(pIServerUserItem,szDescribe,REQUEST_FAILURE_NORMAL);

				return false;
			}

			//积分效验
			if (pTableUserRule->bLimitGameScore==true)
			{
				//最高积分
				if (pIServerUserItem->GetUserScore()>pTableUserRule->lMaxGameScore)
				{
					//构造信息
					TCHAR szDescribe[128]=TEXT("");
					_sntprintf(szDescribe,CountArray(szDescribe),TEXT("您的积分太高，与 %s 设置的设置不符，不能加入游戏！"),pITableUserItem->GetNickName());

					//发送信息
					SendRequestFailure(pIServerUserItem,szDescribe,REQUEST_FAILURE_QUIT);

					return false;
				}

				//最低积分
				if (pIServerUserItem->GetUserScore()<pTableUserRule->lMinGameScore)
				{
					//构造信息
					TCHAR szDescribe[128]=TEXT("");
					_sntprintf(szDescribe,CountArray(szDescribe),TEXT("您的积分太低，与 %s 设置的设置不符，不能加入游戏！"),pITableUserItem->GetNickName());

					//发送信息
					SendRequestFailure(pIServerUserItem,szDescribe,REQUEST_FAILURE_QUIT);

					return false;
				}
			}
		}
	}

	return true;
}
